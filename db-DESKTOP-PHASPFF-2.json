{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/V-logo.jpg","path":"images/V-logo.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ProfilePhoto.jpg","path":"images/ProfilePhoto.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/V-logo2.jpg","path":"images/V-logo2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-large.jpg","path":"images/favicon-large.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-small.ico","path":"images/favicon-small.ico","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1197ef58253238fdcf13cd0e9f2d5392873e8241","modified":1534743843419},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534498280625},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534498280643},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534498280608},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1534498280792},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1534498280639},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1534498280801},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534498280798},{"_id":"themes/next/bower.json","hash":"beac259ba5ef7d199a45a142221dae7d34dbdc49","modified":1534498280811},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1534498280874},{"_id":"themes/next/package.json","hash":"22a8e1a6259ee7452fe0d9a7a8952ad3ccabf719","modified":1534498281129},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1534498280813},{"_id":"themes/next/_config.yml","hash":"9a60e132172cb9d3dbcef00bc58e67e36d2e2a30","modified":1536124030323},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1534498280804},{"_id":"themes/next/README.md","hash":"c1d6d1c6b75736b892e179865833ea58da5ca9d2","modified":1534498280806},{"_id":"source/_posts/Getting-Started-with-Git.md","hash":"eaa631556269f442bda88e0bfecd1d2dd05b8c8c","modified":1536124332106},{"_id":"source/_posts/【概率论与数理统计】——事件与概率.md","hash":"85631183cb11787caa40c1d5b06abc3594065fce","modified":1539139232421},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布.md","hash":"1d503ac794021b5567664bdfde85ef7b7d77c276","modified":1539144166126},{"_id":"source/_posts/北京上海那些事.md","hash":"f2922454971e7c742346522e0fa5fd512a64dae0","modified":1538635176260},{"_id":"source/_posts/Git常用命令.md","hash":"f030beffb3171bd2538735a8b33db758f6189d69","modified":1534747911209},{"_id":"source/_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛.md","hash":"303112c9736938ff022c933654fdec3a31beabe7","modified":1538026733246},{"_id":"source/_posts/保研历程分享.md","hash":"bbd1b5db9981cafafcc056d2d6120049e14c65bf","modified":1538053316888},{"_id":"source/tags/index.md","hash":"489caf8a1898cca4e06026359639b24f03c76f75","modified":1534770152852},{"_id":"source/_posts/用hexo搭建个人网站.md","hash":"552bc129a7aea5d05c8c33a20d80dabafeaa0701","modified":1536124198007},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1534498280654},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1534498280750},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1534498280760},{"_id":"source/categories/index.md","hash":"90865f9f369545949da6d4e2394e47d319c6e190","modified":1534747805255},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1534498280666},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534498280770},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1534498280781},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1534498280815},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1534498280817},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1534498280822},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1534498280819},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1534498280823},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1534498280824},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1534498280825},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1534498280829},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1534498280887},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1534498280886},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1534498280894},{"_id":"themes/next/languages/en.yml","hash":"9015cc2592dabf9ac950ada711313061409351ae","modified":1534771387311},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1534498280900},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1534498280898},{"_id":"themes/next/languages/ja.yml","hash":"509af6c38458a402d37b9beea3500e3b439aa153","modified":1534498280903},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1534498280909},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1534498280827},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1534498280912},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1534498280913},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1534498280915},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1534498280917},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1534498280921},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1534498280924},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1534498280929},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1534498280927},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1534498280937},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1534498281121},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1534498281120},{"_id":"themes/next/layout/_layout.swig","hash":"17f11eaf9dedef2912d7fd887e64fa5126b488ab","modified":1534773837083},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1534498281123},{"_id":"themes/next/layout/index.swig","hash":"28d978f331ce4afd9ce5caaafb7e20e5cf5d2126","modified":1534772405468},{"_id":"themes/next/layout/post.swig","hash":"f0d38d7bc3877ce7242793ceea1a66e0f9ee34a3","modified":1534772394131},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1534498281126},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1534498281127},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534498281507},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1534498281130},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1534498281132},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534498281133},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534498281508},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281441},{"_id":"source/_posts/Getting-Started-with-Git/ff_merge.png","hash":"079b383b3c54b5c2782943d84373c02a58637750","modified":1534508078783},{"_id":"source/_posts/Getting-Started-with-Git/branch.png","hash":"84cc6d11747a80da975a837529b9203a0686129a","modified":1534506345772},{"_id":"source/_posts/Getting-Started-with-Git/git_reset.png","hash":"f734888cf40539c9efe697902a5cc464f867f996","modified":1534498279092},{"_id":"source/_posts/Getting-Started-with-Git/git_four_states.png","hash":"0fff74b4e84005466d9cdce1589b5365b798b768","modified":1534498279089},{"_id":"source/_posts/Getting-Started-with-Git/git_workflow.png","hash":"7fe1804c931e2b816bab59e05e0b0a480e409343","modified":1534498279111},{"_id":"source/_posts/Getting-Started-with-Git/pull.png","hash":"22c8808646d27c5b4d02db02d03f0cbbc6ff9f9a","modified":1534498279117},{"_id":"source/_posts/Getting-Started-with-Git/push.png","hash":"77ab91a8210a53b302536cb72ed3426e50328851","modified":1534498279120},{"_id":"source/_posts/Getting-Started-with-Git/header.jpg","hash":"3906a95a6a5d53830c4803c505e2a69305dc05d4","modified":1534563108205},{"_id":"source/_posts/Getting-Started-with-Git/stash.png","hash":"d13c3bfd9d5d66ef134284d5405b3066ebb5de2b","modified":1534512459788},{"_id":"source/_posts/Getting-Started-with-Git/pr.jpg","hash":"25a6fca1f926a44d7f7e85cc6fa9dfd179c6ce44","modified":1534735165725},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534498281509},{"_id":"source/_posts/【概率论与数理统计】——事件与概率/condition_proba.png","hash":"db39ceb1fabf9add133e5ebe3a5b75b9e2c7e76d","modified":1535091737215},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/F分布.png","hash":"6a8194ce29636bc3608b8c2c5912c2b48515df41","modified":1536047155007},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/t分布alpha.png","hash":"e5f861c37f8f12a06e2df9e36b27c2d328c99676","modified":1536044969023},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二维随机变量.png","hash":"86211869755bbb128c3c773cf80a38b1baa7e052","modified":1535891416849},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二项分布.png","hash":"e744860313542eaf4c1a5a2cce5062b76be7551a","modified":1535429726445},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/卡方分布.png","hash":"a9a72f356d21b49ed0c2e9f4c9738db59369bce2","modified":1536043443790},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/分布函数.png","hash":"19d074f3dc5d8ebb76c9a077085c66a9228ecf48","modified":1535428953306},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/卡方分布alpha.png","hash":"10f94fedc183093b71f21f9545f355e06135de61","modified":1536043570959},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/指数分布.png","hash":"95501e59290466f27e8c1a43d1f459e4f94dcdab","modified":1535448760436},{"_id":"source/_posts/用hexo搭建个人网站/hexo_homepage.png","hash":"1be5a6493b77dd44269c8786b1afe8378083fc26","modified":1534498279138},{"_id":"source/_posts/用hexo搭建个人网站/header.jpg","hash":"53d70fa809156ad0bbbd593005dc9b0e11ffb05b","modified":1534498279136},{"_id":"source/_posts/Git常用命令/header.jpg","hash":"f2eee2af06c5978f6955b5fec3e4b8884cc426a0","modified":1534566646988},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1534498280830},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1534498280832},{"_id":"themes/next/docs/ru/README.md","hash":"edfe0cfb8b2c9f0effd3beb868af9bfd0fabb3a6","modified":1534498280833},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1534498280842},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1534498280845},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1534498280851},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1534498280844},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1534498280852},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1534498280858},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1534498280860},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1534498280867},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534498280942},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534498280943},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534498280941},{"_id":"themes/next/docs/zh-CN/README.md","hash":"46b264623af21211a0a9c4ba0cf1318a80eeb9fb","modified":1534498280864},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534498280953},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1534498280956},{"_id":"themes/next/layout/_macro/post.swig","hash":"df2f8833b66bfa48bf60ac71971ff7232c878de7","modified":1534772846615},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1534498280960},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1534498280964},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1534498280969},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1534498280972},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1534498280971},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1534498280994},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1534498280995},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1534498281009},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1534498281012},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1534498280846},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1534498280967},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4712150532e3c120e09343637f647bc654aafce4","modified":1534772938411},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1534498281019},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1534498281057},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1534498281069},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1534498281070},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1534498281071},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1534498281083},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1534498281080},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534498281085},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1534498281092},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534498281086},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1534498281441},{"_id":"themes/next/source/images/V-logo.jpg","hash":"3111f5f4af3d62284cb14557ea293dde99e25dc3","modified":1534752137219},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1534498281028},{"_id":"themes/next/source/images/ProfilePhoto.jpg","hash":"67b09d3db02e8310fb0f451629337985ffddd9e6","modified":1522302172845},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534498281443},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534498281444},{"_id":"themes/next/source/images/V-logo2.jpg","hash":"a1044c94c0819668ff6425491cd80305eebcb21a","modified":1534752151109},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534498281445},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534498281448},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534498281450},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534498281451},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534498281452},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534498281454},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534498281458},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534498281455},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534498281456},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534498281460},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534498281457},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534498281461},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534498281462},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534498281463},{"_id":"themes/next/source/images/favicon-large.jpg","hash":"d2c001fe3c72eb01938577f05093cd67d599c6fa","modified":1534752085690},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534498281467},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534498281466},{"_id":"themes/next/source/images/favicon-small.ico","hash":"86756a24981282357edc5236543813bccc79242b","modified":1534752101642},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/t分布.png","hash":"ae7d1b15d9f25abd4de8a06eb441a83f0ecc59cc","modified":1536044528537},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/泊松分布.png","hash":"7d97c6f3200e2e81fd24f5d0337251435685bfc0","modified":1535443072619},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1534498281136},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1534498281139},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1534498281144},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1534498281145},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1d59b968af4b8d147f8bc9bc295d596e41be8348","modified":1534498281171},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1534498281172},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1534498281173},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1534498281180},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1534498281181},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281024},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281025},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281380},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281381},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281384},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281436},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534498281439},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1534498280946},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534498280975},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1534498280976},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1534498280978},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1534498280987},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1534498280950},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1534498280990},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1534498280992},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1534498280997},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1534498280984},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534498280999},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534498281002},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534498281004},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534498281007},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534498281001},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1534498281022},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534498281030},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534498281027},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534498281033},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1534498281023},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1534498281040},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534498281043},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534498281045},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534498281036},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534498281051},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1534498281053},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1534498281047},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534498281054},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1534498281049},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534498281055},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534498281056},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534498281059},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1534498281060},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1534498281063},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534498281005},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1534498281061},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1534498281078},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1534498281067},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1534498281076},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534498281107},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1534498281079},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"88b5a808b6b254c6122444e9dc180d5cc459cb19","modified":1534498281065},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534498281112},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534498281380},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1534498281383},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1534498281379},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1534498281384},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534498281118},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1534498281109},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534498281436},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1534498281435},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1534498281438},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0b43ddd92e395342703550f629699c5e591fd68b","modified":1534498281439},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1534498281470},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1534498281471},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1534498281473},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534498281474},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1534498281468},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1534498281476},{"_id":"themes/next/source/js/src/motion.js","hash":"52fd093cb96b68229b38436c9b8ebcefc7e12cb2","modified":1534498281475},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1534498281480},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1534498281479},{"_id":"themes/next/source/lib/Han/README.md","hash":"572a02d6dfcb37f35eb47339862da6fddae00826","modified":1534763975241},{"_id":"themes/next/source/js/src/utils.js","hash":"e829806d054991d0324a339993082206ca6026e5","modified":1534498281481},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1534750432425},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1534763975240},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9c0e38750e26eb9e83e2b5ab9e069b66f0965ce4","modified":1534750432425},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"10e4cb3bb98f6b9806bedbb8dbbc00151bad4c70","modified":1534750432425},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"7713a1753ce88f2c7e6b054ecc8e4c786df76300","modified":1534750432425},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534498281488},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534498281489},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534498281506},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1533898837000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1533898837000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1533898837000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1533898837000},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二维正态.png","hash":"6ca81f6bd96c0b55089465687ace669618f1d194","modified":1535883380339},{"_id":"source/_posts/Git常用命令/git-cheatsheet.pdf","hash":"e01508fdb65c4038c9e81c190aafac7637ce28db","modified":1533216307000},{"_id":"source/_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛/header.png","hash":"07e1ab91e25579f4492b9c68dc25bfe970edae62","modified":1538026684122},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534498281103},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1534498281095},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534498281183},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534498281184},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534498281187},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534498281188},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534498281191},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1533898837000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534498281283},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1534498281371},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534498281340},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534498281373},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534498281376},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534498281375},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534498281374},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1534498281378},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1534498281388},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534498281389},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534498281391},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1534498281369},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1534498281394},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534498281398},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1534498281396},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1534498281400},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534498281405},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534498281406},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534498281409},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1534498281387},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1534498281410},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1534498281408},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534498281426},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1534498281428},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534498281429},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1534498281427},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1534498281433},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1534498281431},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1534498281432},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534763975175},{"_id":"themes/next/source/lib/Han/.git/config","hash":"bdc479aba5357f8dfc01db46cea9abcf2743fdd7","modified":1534763975195},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534763969677},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"6e2c4e71af7f142cc38f974c70328b7b85a30e91","modified":1534763975148},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"ab6f13fae0513a9b39f8d8c4c3a4e3928014f046","modified":1534498281478},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534763975251},{"_id":"themes/next/source/lib/Han/.git/index","hash":"0451867b8f3f8d67b2554552b4ce96d0862b51ef","modified":1534763975262},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534750432394},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534763975254},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"6d27bad8831d14b10d7b775812c49acbe18b2af4","modified":1534750432410},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1534750432379},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"95e73417a1a88e8a06e95719a560d61dd66e80ec","modified":1534750432457},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534763975255},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"f7b9796b5b50c2c267eae284fefb6456ba83d656","modified":1534750432441},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1534750432441},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b9a1185936351c902a3dfa179a3fde1d81d0ae68","modified":1534750432441},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1533898837000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1533898837000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533898837000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1533898837000},{"_id":"source/_posts/用hexo搭建个人网站/github_pages_homepage.png","hash":"8daa2474098b7bd7ed20fe3cd371d0a03b29573d","modified":1534498279135},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534498281483},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1533898837000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534763975252},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533898837000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534498281486},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534498281196},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1534498281195},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1534498281192},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534498281211},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534498281212},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534498281213},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1534498281215},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1534498281194},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534498281224},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1534498281227},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534498281226},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534498281228},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1534498281279},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534498281284},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534498281280},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534498281281},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534498281210},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534498281294},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534498281297},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534498281301},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1534498281298},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534498281285},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1534498281302},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1534498281308},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534498281307},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534498281316},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534498281319},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1534498281314},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534498281321},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ed9608d2740a33664eb703f806c218a4fc520087","modified":1534498281324},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1534498281323},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1534498281320},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534498281330},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1534498281325},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bbe0d111f6451fc04e52719fd538bd0753ec17f9","modified":1534498281328},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534498281331},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534498281332},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534498281337},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534498281333},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1534498281336},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1534498281338},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534498281339},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1534498281345},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534498281348},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"cf2185a0ea170fd8450f592e859a6c941141e5ee","modified":1534498281343},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534498281347},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534498281342},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534498281351},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534498281357},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534498281349},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1534498281358},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534498281361},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534498281359},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534498281362},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534498281364},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534498281356},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1534498281368},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1534498281367},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534498281366},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533898837000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534498281402},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534763969723},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534498281411},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"8ebea7a13b1d4e9852566303a3d37211284e79f0","modified":1534763975186},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534498281403},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534763969677},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534763969692},{"_id":"themes/next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1534763969692},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534763969692},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534763969708},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534763969692},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534763969677},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534763969708},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534763969708},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534763969723},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534763969723},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534763975244},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534763975243},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534763975249},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1534750427863},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534763975245},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534750427863},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534763975247},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534750427863},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534750427879},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534750427879},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534750427879},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534750427879},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1534750432441},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"e72794707ef26fbdf5995532d91d95766173ecd4","modified":1534750432457},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534750427879},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533898837000},{"_id":"source/_posts/用hexo搭建个人网站/hexo网站初始化的样子.png","hash":"51e11fad7257893ec2493cf0af802087d577c40f","modified":1534498279141},{"_id":"themes/next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1534763974390},{"_id":"themes/next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1534763974765},{"_id":"themes/next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1534763974953},{"_id":"themes/next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1534763974015},{"_id":"themes/next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1534763973890},{"_id":"themes/next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1534763974297},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"1f486176ed5f400fcfb470918f9db5283e042238","modified":1534750432394},{"_id":"themes/next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1534763974375},{"_id":"themes/next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1534763974265},{"_id":"themes/next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1534763974500},{"_id":"themes/next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1534763974687},{"_id":"themes/next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1534763975031},{"_id":"themes/next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1534763973859},{"_id":"themes/next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1534763974156},{"_id":"themes/next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1534763974875},{"_id":"themes/next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1534763974359},{"_id":"themes/next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1534763974593},{"_id":"themes/next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1534763974140},{"_id":"themes/next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1534763974437},{"_id":"themes/next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1534763974234},{"_id":"themes/next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1534763974328},{"_id":"themes/next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1534763974406},{"_id":"themes/next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1534763973984},{"_id":"themes/next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1534763975015},{"_id":"themes/next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1534763974531},{"_id":"themes/next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1534763974094},{"_id":"themes/next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1534763974031},{"_id":"themes/next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1534763974515},{"_id":"themes/next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1534763974187},{"_id":"themes/next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1534763974219},{"_id":"themes/next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1534763974828},{"_id":"themes/next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1534763973953},{"_id":"themes/next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1534763974921},{"_id":"themes/next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1534763974640},{"_id":"themes/next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1534763974890},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"ee343043f53b3ea48b689ba9c558932a01928d24","modified":1534763975185},{"_id":"themes/next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1534763974078},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1534750431733},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1534750432191},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1534750432285},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1534750431999},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1534750431968},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1534750431640},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1534750432030},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1534750432222},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1534750431749},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1534750432124},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1534750431765},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1534750431702},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"01fe0b1cf911f9e2e30415be1c967b1eaae2ee38","modified":1534750432394},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"8ebea7a13b1d4e9852566303a3d37211284e79f0","modified":1534763975188},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"1f486176ed5f400fcfb470918f9db5283e042238","modified":1534750432410},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534763975167},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534750432394},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"8ebea7a13b1d4e9852566303a3d37211284e79f0","modified":1534763975166},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1534750431859},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1534750431812},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"1f486176ed5f400fcfb470918f9db5283e042238","modified":1534750432394},{"_id":"source/_posts/北京上海那些事/上海展览中心.png","hash":"8b24c4e87c720a43b60af421aec40dec3dc774ae","modified":1538634962101},{"_id":"source/_posts/北京上海那些事/圆明园迷宫.png","hash":"a8596d81b4e824cdf3228279d237948a5713620c","modified":1538635111631},{"_id":"source/_posts/北京上海那些事/颐和园石舫.png","hash":"899aafddc778a1e0c93e2b169f5ba9dbc2cabb16","modified":1538635043992},{"_id":"source/_posts/北京上海那些事/庙门.png","hash":"c0c168ad0bf07cc46f0098a675810488f6f343f3","modified":1538634843046},{"_id":"source/_posts/北京上海那些事/二校门.png","hash":"f9faee536684dd2697e3715840725754348cb7fa","modified":1538634800237},{"_id":"source/_posts/北京上海那些事/圆明园大水法.png","hash":"f0b335e3c2786938fb69100465c0c9a28a9aec98","modified":1538635088397},{"_id":"source/_posts/北京上海那些事/田子坊.png","hash":"4343e22862a3eb7403cb0bd4ca96a91595312360","modified":1538635005840},{"_id":"source/_posts/北京上海那些事/颐和园一隅.png","hash":"ea5ed90b67fb148f36775ec00c938b6d669bf483","modified":1538635068983},{"_id":"source/_posts/北京上海那些事/东门.png","hash":"ec27817bb8b1ba2e8098d45f33f69dac42943ad4","modified":1538634769841},{"_id":"source/_posts/北京上海那些事/颐和园佛香阁.png","hash":"824a256bcf5f93d4d8d8ef882ee3f424e8efd8b2","modified":1538635027831},{"_id":"source/_posts/北京上海那些事/凯旋门.png","hash":"354fc5d78dfc84de422b3c7cf417cf8345e4d29c","modified":1538634822360},{"_id":"source/_posts/北京上海那些事/上海财经大学.png","hash":"a727fc56185fa628c55fe3361955662eb03a0cfd","modified":1538634942599},{"_id":"source/_posts/北京上海那些事/水木清华.png","hash":"136179ca64550e5f487dc85ec52db9105f9fdacc","modified":1538634983995},{"_id":"source/_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛/达观杯十强分享汇总ppt.pdf","hash":"a7b854988764d4c7236fb05e9f494ddba7850ad8","modified":1537248892304},{"_id":"public/atom.xml","hash":"ef3668a15a052ff6c4b46169a47d9d3a887cd29e","modified":1540211370549},{"_id":"public/search.xml","hash":"cc7c9cbb74e13cd36da253710142031982db238c","modified":1540211370551},{"_id":"public/tags/index.html","hash":"ac14bbb89660bd81b23cd7f36d48ccc32257bfe2","modified":1540211371600},{"_id":"public/categories/index.html","hash":"1079ffc20f6647b34404b54a23951dfce9ad470d","modified":1540211371606},{"_id":"public/2018/10/03/北京上海那些事/index.html","hash":"aed0ac2937f8aa38452610a24c0ebc41fd8647f6","modified":1540211371606},{"_id":"public/2018/09/27/保研历程分享/index.html","hash":"1b4e39945f4b14d5f596b2b6789f0a22edf66efe","modified":1540211371606},{"_id":"public/2018/09/24/【数据挖掘比赛】————达观杯文本智能处理挑战赛/index.html","hash":"f59c9bcdf09267081dbc59a66a0b389be1d2a448","modified":1540211371607},{"_id":"public/2018/08/27/【概率论与数理统计】——事件与概率/index.html","hash":"bcc451c51a5ef0d5977cdafe1b4670b7452cfc5e","modified":1540211371607},{"_id":"public/2018/08/18/Git常用命令/index.html","hash":"accf9f6e615b532f2d6a6a3e464b98baf1e9a9ee","modified":1540211371607},{"_id":"public/2018/08/15/Getting-Started-with-Git/index.html","hash":"6754402c060ff60a88cae0301375e3bdab65e450","modified":1540211371607},{"_id":"public/2018/08/14/用hexo搭建个人网站/index.html","hash":"5b081e341802fb8c07c0698d5b110d9b6e4dd9c5","modified":1540211371608},{"_id":"public/categories/Git/index.html","hash":"4083c49a2ddc8a62de988a3cfa7f69f993628e50","modified":1540211371608},{"_id":"public/index.html","hash":"6fe726c0d812dff65e1ec6abc4994260271eb1c6","modified":1540211371608},{"_id":"public/archives/index.html","hash":"73ad2204535495e3ca49bd15a43b76a50c4cc61e","modified":1540211371608},{"_id":"public/archives/2018/index.html","hash":"9070e823f2dcdca1300bffc04437bb89f29e3643","modified":1540211371608},{"_id":"public/archives/2018/08/index.html","hash":"746449c27fa7cff2abc1ce90deab5b6d11013deb","modified":1540211371608},{"_id":"public/archives/2018/09/index.html","hash":"28f2be1864f9cc9ba342255a5308515f5d2ef5f9","modified":1540211371608},{"_id":"public/archives/2018/10/index.html","hash":"69ff5ac731e0925ea3ac2ef38858bb0c1cb2ab80","modified":1540211371608},{"_id":"public/tags/概率论/index.html","hash":"97a39fa9c4537b15b784b85aa13dd6c38e67b8a3","modified":1540211371608},{"_id":"public/tags/hexo/index.html","hash":"f05431bf6a7a0f44ece9e1f12455d07f38823330","modified":1540211371608},{"_id":"public/2018/09/04/【概率论与数理统计】——随机变量及其分布/index.html","hash":"5159c958fb9bd572c152f1ad00053dc5cfbec7e7","modified":1540211371608}],"Category":[{"name":"Git","_id":"cjn2m7gcb0002akw2qsl6917a"}],"Data":[],"Page":[{"title":"tags","date":"2018-08-20T13:02:32.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-20 21:02:32\n---\n","updated":"2018-08-20T13:02:32.852Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjn2m7gkw000aakw21or2iuxg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All categories","date":"2018-08-20T06:49:11.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2018-08-20 14:49:11\ntype: \"categories\"\n---\n","updated":"2018-08-20T06:50:05.255Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjn2m7gkz000cakw225z51bxv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Getting Started with Git","date":"2018-08-15T06:50:13.000Z","_content":"\n{% asset_img header.jpg 500 250 %}\n> Git是一个分布式的版本控制软件，不需要服务器端软件，就可以运作版本控制，使得代码的发布和交流机器方便。Git的速度很快，这对于Linux内核的项目来说很重要，且Git拥有出色的合并追踪(merge tracking)能力，能够记录修改的代码。\n>\n\n\n<!--more -->\n<br>\n# 1. 安装配置Git\nLinux下安装Git非常的简单，只需要简单的一条命令。\n```bash\n$ sudo apt-get install git\n```\n配置本地Git的用户名和邮箱与Github的一致\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n<br>\n# 2. Git基本概念\n\n## 2.1 What is git?\ngit是一个管理代码的版本控制系统(Version Control System, VCS)，它能跟踪每一个文件的变化，如果你修改了某个文件，VCS能够记录并且保存这些变化，这使得你可以撤销任何的修改，回溯到任何一个历史版本。\n**注意**\n所有的版本控制系统都只能跟踪文本文件的改动，如TXT文件、网页文件、程序代码等；而对于图片、视频这种二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只能知道图片从100KB改成120KB，但是到底改了什么，无法知道。不幸的是，Microsoft的Word文件也是二进制格式的，因此Git也没法跟踪Word文件的改动。\n\n## 2.2 Git workflow\n在一个Git项目里面，由三个主要的组成元素：\n- 版本库(repository)：简称repo，它记录了你项目的所有变化和修改，保存了所有的commit，commit是指在某个时间点，项目所有文件的一个snapshot，可以理解为一次提交，将最新的版本提交到版本库，交由版本库进行保存。\n- 暂存区(index or staging area)：它是工作区和版本库之间的一个bridge，可以理解为一个中转站。暂存区的文件能够被commit，index is where commits are prepared。\n- 工作区(working tree)：就是我们本地工作的目录，我们能够修改文件、增添删除文件的目录。\n\n三者可以理解为一个层级关系，版本库是在层级最高的位置，工作区最低，我们在工作区工作，进行文件修改，我们每完成一次修改，我们希望保存到版本库，并且告诉版本库这次修改了什么，好让版本库能够记录下来。\n下面就是Git的基本工作流程：\n1. 在工作区修改文件。\n2. 将工作区所有修改过的文件add(stage)到暂存区，准备commit。\n3. commit到版本库。\n\n{% asset_img git_workflow.png 600 300 %}\n\n一个文件的四个状态，可以通过git status命令看得到这些词。\n- Untracked: 当一个文件新创建，在版本库里面没有它，所以无法追踪。\n- Modified：一个文件在工作区被修改了，但是还没到暂存区。\n- Staged：修改的文件被stage到暂存区。\n- Committed：修改的文件在暂存区commit到版本库。\n\n{% asset_img git_four_states.png 600 300 %}\n\nGit项目的三个组成元素，各自代表一个版本，我们可以查看两两之间的差别：\n- git diff: 查看工作区和暂存区的差别。\n- git diff --cached: 查看暂存区和版本库的差别。\n- git diff HEAD: 查看工作区和版本库的差别。\n\n\n## 2.3 版本回退\n### 2.3.1 仓库版本回退\nGit既然能够跟踪文件的修改，自然就可以回溯，`.git`文件有保留每一次commit的信息，每一次commit都有一个唯一的commit id对应，它是经过SHA1计算出来的一个数字，用16进制表示，我们可以通过命令回退命令，回退到想要版本。\n```\n$ git reset <mode> <你想回退到的版本的commit id的前几位>\n```\n\n在Git管理版本的时候，会有一个HEAD指针，指向最近的一次commit，每次的commit会练成一条链，回退的过程实际是将HEAD指针指向之前的节点\n{% asset_img git_reset.png 400 200 %}\n\nreset有三种mode：soft, mixed(默认), hard，可以看到无论是哪个模式，HEAD的位置都肯定是会改变的，所以reset的另外一个作用就是撤销commit。\n\n| mode  | HEAD指针的位置 | 暂存区 | 工作区 |\n| :---: | :------------: | :----: | :----: |\n| soft  |      改变      |  不变  |  不变  |\n| mixed |      改变      |  改变  |  不变  |\n| hard  |      改变      |  改变  |  改变  |\n\n一种更加简单的方式替换commit id的是用HEAD指针，上一个版本就是`HEAD^`，上上个版本就是`HEAD^^`，依次往后可以写成`HEAD~n`。\n\n### 2.3.2 工作区修改撤销\n当你在工作区乱改一通，也忘了自己改了什么地方，那么你可以用本地版本库的内容直接替换工作区，丢弃工作区的所有改变，用以下的命令可以使得file回到最近一次commit或者stage时的状态(注意，stage也是可以的，有些人可能提交到暂存区后，又乱改一通，这条命令将暂存区的版本替换工作区)\n```\n$ git checkout -- <file>\n```\n\n### 2.3.3 暂存区版本回退\n当我们在commit之前发现文件有问题，不能commit，但是修改的文件已经添加到了暂存区了，可以用以下的命令将暂存区的修改撤销(unstage)，重新放回工作区。`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区，用HEAD的时候，表示最新的版本。\n```\n$ git reset HEAD <file>\n```\n\n总结一下：\n1. 撤销工作区修改，可以直接用本地版本库来替换\n2. 不小心stage到暂存区，可以用reset命令撤销，撤销后暂存区该文件恢复原状，但是工作区依旧时修改了的。但是我个人觉得，既然工作区你瞎改了一些东西，并且add到暂存区，那么只需要把修改的内容改回去，再重新add到暂存区，就能恢复原状了。\n3. 不小心还commit到版本库了，也可以用reset命令，结合hard mode，将工作区、暂存区全部恢复之前的版本。\n\n## 2.4 创建版本库\n首先，版本库有两种类型：\n- 本地版本库(local)，寄托在本地的机器，一般是个人电脑，为个人所用。\n- 远端版本库(remote)，托管在远端的一个服务器上，被多个用户所使用。Github就是全球最大的托管Git版本库的服务器，从名字就可以知道。\n\n本地版本库的创建有两种方法：\n- git init, 在本地初始化一个版本库。\n- git clone, 从远端克隆一个仓库到本地。\n\n当我们创建完一个本地版本库后，在本地的目录下就会多一个`.git`的文件夹，它就是版本库，里面就是管理整个目录的内容。\n\n## 2.5 版本库的同步\n远端仓库的创建非常简单，只需要在Github上创建即可，但是远端仓库创建之后，仓库内是空的，它只能通过本地版本库的同步来实现初始化。\n远端仓库使得我们可以和其它用户一起合作，只需要保证远端的版本库永远是最新的版本即可，因此，本地和远端版本库之间就需要频繁地进行同步，主要通过三个动作来完成：push, pull, merge。\n同步之前，我们需要绑定本地版本库到远端仓库，才能进行以后的同步操作。远端仓库默认叫做origin，当然也可以叫其它名字。\n```\n$ git remote add origin <remote repo addr>\n```\n\n### 2.5.1 Git push\n当我们想将本地版本库更新到远端仓库的时候，我们可以将其push到远端的仓库，这样就能使得远端仓库跟本地保持同步。\n{% asset_img push.png 600 300 %}\n\n### 2.5.2 Git pull\n当你的队友将他的本地仓库push到你们共同的远端仓库，你需要对自己本地的仓库进行更新，跟你队友的仓库保持一致，这时候我们就需要将远端仓库pull到自己的本地仓库。\n{% asset_img pull.png 600 300 %}\n\n### 2.5.3 Git merge\n无论是上传到远端仓库还是从远端仓库下载，远端仓库永远是最新版本，拥有最高优先级的。当我们想push我们的本地仓库到远程仓库的时候，不幸你的本地库的版本不是最新版本(即你在修改自己的本地版本的同时，有人更新了远程仓库)，这时候push会被拒绝，因为远程仓库的有些更新并不在你的本地仓库。这时候我们需要将远端仓库先pull下来，并和本地仓库进行合并(merge)。\nmerge就是指两个仓库(或者一个仓库的两个分支)进行合并的过程，在合并的过程，Git会自动地将另外一个仓库(分支)的改变更新到当前的仓库(分支)。\n但是，合并的两个仓库(分支)在某些文件可能都共同地修改了同个地方，这时候就出现了所谓的conflit，Git并不会自动地帮你选择一个版本，而是将这个选择的权利交给了我们，Git会帮我们将conflit的地方标记出来，我们需要手动地进行修改，才能最后完成合并过程。\n\n下面对比一下pull和fetch\n- fetch：fetch是将远程仓库的某条分支的内容拉到本地，但是fetch后是看不到变化，而是在本地新开了一个分支，该分支的指针是`FETCH_HEAD`，checkout到该分支后可以查看远程分支的最新内容。然后切换到master分支，执行merge，选中`FETCH_HEAD`，合并后如果出现冲突则解决冲突，最后commit。\n- pull：pull相当于fetch和merge，自动将远程仓库更新到本地仓库\n```\n$ git fetch origin master(将远程仓库的master分支拉到本地当前分支)\n$ git merge FETCH_HEAD\n```\n<br>\n# 3. 分支管理和协作\n分支使得Git变得更加的强大，使得团队协作更加的方便。任何一个Git仓库，都会默认有一个master的分支，无论是本地仓库还是远程仓库，这个分支是在创建Git仓库的时候就会默认创建的。之前提到HEAD指针是指向最近一次commit的，但严格来讲，HEAD指针是指向master指针，master指针才是指向最近一次commit，所以可以理解为HEAD指针是指向当前的分支。\n如果这样来看的话，一条分支就好比链表，每一次commit就往链表尾部插入新的仓库snapshot。一个仓库可以有好几条分支，当新开一条分支的时候，原有的链表尾部就会开始分叉，同时会有另外一个新的指针指向新的分叉，当我们切换分支的时候，HEAD指针就会指向对应分支的指针。\n{% asset_img branch.png 500 250 %}\n\n## 3.1 创建、切换分支\nGit创建分支和切换分支都很快，因为无非就是创建一个指针，和改变HEAD指针的指向而已。\n```\n创建branch：git branch <branch_name>\n切换branch：git checkout <branch_name>\n创建并切换branch：git checkout -b <branch_name>\n查看branch list：git branch\n```\n\n## 3.2 分支合并\n在多人协作的时候，基本上都是每个人都在自己的分支上工作，完成自己的工作之后再把自己的代码合并到master分支上。\n之前提到，两条分支的merge可能会导致conflit，冲突的原因是两个**已经提交的分支**的相同文件相同位置的不同操作进行了合并。\n\n**注意**\n要避免冲突，就是最好每次修改文件之前，先merge别的分支(或者pull远程仓库)，这样就能保证自己是在别人最新版本的基础上修改的，自己修改完后去合并到别人分支(push到远程仓库)都不会产生冲突。\n这种情况就好比下图，第三个节点是最新版本，然后在dev分支上修改，修改完成后commit，再切换回master分支，然后跟dev分支进行merge，这时候这种merge叫做fast forward，因为是直接将master的指针指向了第四个节点，相当于直接覆盖。\n{% asset_img ff_merge.png 500 250 %}\n\n以下的情况会导致冲突，假如我在dev分支修改了a文件的第二行代码，并且提交了。然后我切换到master分支，假如我不知道dev分支改了什么，我在master分支也改了a文件的第二行代码，并且提交了。然后我在这个时候想把dev分支的修改一起merge到master分支上，冲突发生了，因为两个版本都修改了同一行代码，Git会将冲突的位置，用以下的方式告知我们，并要求我们人工进行修改。如果不解决冲突时没法提交或者切换分支的。\n```\n<<<<<<<< HEAD(Current Change)\nother code\n========\nyour code\n>>>>>>>> your branch name(Incoming Change)\n```\n\n但是假如我在master分支改的时a文件的第三行代码，并且提交了，这时候再去将dev分支merge进来，不会有冲突，而是会自动合并，即使我在修改第三行代码前并没有先将dev的修改merge进来。但是还是建议先merge再做修改。\n\n## 3.3 与远端仓库的同步\n像之前所说，无论是本地仓库还是远端的仓库，都可以存在不同的分支，还是那句话，在修改代码前，先将远端仓库pull下来，方便以后push的时候，避免产生冲突。并且需要注意，本地仓库是从哪条分支pull下来的，最好就push回哪条分支，不然push不上去。\n如果本地仓库和远端仓库都只有一条分支，那么情况就简单很多，因为不需要明确地指明哪条分支到哪条分支。\n- pull：如果本地和远端都只有一条分支，直接git pull就好，如果想pull到当前分支，那么本地分支名可以省略。\n    ```\n    $ git pull [远程仓库名字，一般默认origin] [远端分支名]:[本地分支名]\n    eg: git pull origin master:master\n    ```\n- fetch：fetch不需要写本地分支名，因为它还没有merge，只是把远端分支拉到本地并保存到`FETCH_HEAD`而已。\n    ```\n    $ git fetch [远程仓库名字] [远端分支名]\n    ```\n- push：建议写全。\n    - 最常见到的是`git push origin master`，远程分支被省略，它表示将本地分支推送到与其存在追踪关系的远程分支(通常两者同名)，因为远端仓库肯定存在master分支，因此省略也没有问题。如果该远程分支不存在，则会被新建。\n    - 其它形式如`git push origin`，表示将当前分支push到远端与当前分支存在追踪关系的分支。\n    - `git push`，如果本地和远端都只有一条分支，那么全都可以省略。\n    ```\n    $ git push [远程仓库名字] [本地分支名]:[远端分支名]\n    ```\n\n## 3.4 Stash\nStash是一个工作状态保存栈，用于保存/恢复工作区的临时状态。\n{% asset_img stash.png 500 250 %}\n\n那么什么时候才需要将工作区的状态暂时保存起来呢？说到暂时，那么肯定就是修改只进行了一半，还没到commit或者stage的地步。比如我在master上进行了一些修改，但是还没有commit(加到暂存区也不行)，现在我需要切换到dev分支进行其它的修改。Git会reject你的分支切换(另一种reject分支切换的情况是出现conflit，conflit没解决之前，不允许切换分支)，并且告诉你要不将修改commit，要不将它放到stash里面，才可以切换分支。这就是stash出现的目的，暂时存储工作区的状态。\n将工作区临时保存起来可以用`git stash`命令，实际保存的是工作区的一个snapshot，将工作区stash之后，工作区变回干净状态(从git status可以看出)。因此可以多次stash，相当于将不同的几个snapshot保存起来，stash的地方是一个栈，遵循后进先出。\n`git stash list`可以查看栈里面的snapshot。如果要恢复工作区可以有两种方法：\n- `git stash pop`：将栈顶元素pop出来，恢复工作区的同时把stash的内容删掉。\n- `git stash apply stash@{n}` & `git stash drop stash@{n}`：从stash list选出需要恢复的snapshot，snapshot的命名就是`stash@{n}`。\n\n<br>\n# 4. GitHub之pull request\n当我们在进行团队任务的时候，每个人都会在本地拥有自己的一条分支，同理，在远端也会有一条与之对应的分支，如feature分支、bug fix分支等，当我们在本地完成自己的任务，然后push到远端自己分支之后，我们准备将它merge到master分支(master分支永远是最新的版本)，首先我们不可能直接将自己本地的分支push到远端的master，因为万一出错了就会很麻烦，因此我们只会push到自己的分支，那么怎样能够更新远端的master分支呢？\n这就是pull request要做的事了，字面上理解pull request是指请求合并代码，或者请求对方pull一下自己的代码。pull request可以发生在一个仓库的不同分支，也可以发生在两个不同的仓库，但是这两个不同的仓库必须存在fork的关系，fork是指将别人的仓库copy到自己的仓库。\n\n假设你想为一些开源项目做一下贡献\n1. 将这个项目fork到自己的GitHub，并将它clone到本地(注意是自己GitHub上的那个仓库)\n2. 创建新分支，进行代码修改\n3. push到自己GitHub上对应的分支\n4. 发起pull request，pull request里有base和compare，base就是别人的代码，compare是指自己修改后的代码，在这里base要选择开源项目仓库的master分支，compare选自己仓库的那条分支。\n5. 对方进行代码审核，如果通过了，就会进行代码合并。\n<br>\n{% asset_img pr.jpg 500 250 %}\n\n<br>\n# 5. 总结\nGit可以说是每一个开发者必备的工具，而Github更是全世界最活跃的网站之一，无论你是将Github看成是一个项目代码的仓库，还是在公司跟同事合作，掌握Git都会让你受益匪浅，个人推荐用Git Bash，不要依赖Github Desktop，虽然方便，但是沉下心来理解Git的基本概念和操作，也是每个开发者值得做和应该做的一件事。\n\n<br>\n# 6. 参考资料\n1. [廖雪峰Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [backlog git tutorial](https://backlog.com/git-tutorial/)\n3. [Git官网](https://git-scm.com/docs/)，但是太难懂了，我暂时也没看懂>_<\n\n<br>\n","source":"_posts/Getting-Started-with-Git.md","raw":"---\ntitle: Getting Started with Git\ndate: 2018-08-15 14:50:13\ntags:\ncategories:\n- Git\n---\n\n{% asset_img header.jpg 500 250 %}\n> Git是一个分布式的版本控制软件，不需要服务器端软件，就可以运作版本控制，使得代码的发布和交流机器方便。Git的速度很快，这对于Linux内核的项目来说很重要，且Git拥有出色的合并追踪(merge tracking)能力，能够记录修改的代码。\n>\n\n\n<!--more -->\n<br>\n# 1. 安装配置Git\nLinux下安装Git非常的简单，只需要简单的一条命令。\n```bash\n$ sudo apt-get install git\n```\n配置本地Git的用户名和邮箱与Github的一致\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n<br>\n# 2. Git基本概念\n\n## 2.1 What is git?\ngit是一个管理代码的版本控制系统(Version Control System, VCS)，它能跟踪每一个文件的变化，如果你修改了某个文件，VCS能够记录并且保存这些变化，这使得你可以撤销任何的修改，回溯到任何一个历史版本。\n**注意**\n所有的版本控制系统都只能跟踪文本文件的改动，如TXT文件、网页文件、程序代码等；而对于图片、视频这种二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只能知道图片从100KB改成120KB，但是到底改了什么，无法知道。不幸的是，Microsoft的Word文件也是二进制格式的，因此Git也没法跟踪Word文件的改动。\n\n## 2.2 Git workflow\n在一个Git项目里面，由三个主要的组成元素：\n- 版本库(repository)：简称repo，它记录了你项目的所有变化和修改，保存了所有的commit，commit是指在某个时间点，项目所有文件的一个snapshot，可以理解为一次提交，将最新的版本提交到版本库，交由版本库进行保存。\n- 暂存区(index or staging area)：它是工作区和版本库之间的一个bridge，可以理解为一个中转站。暂存区的文件能够被commit，index is where commits are prepared。\n- 工作区(working tree)：就是我们本地工作的目录，我们能够修改文件、增添删除文件的目录。\n\n三者可以理解为一个层级关系，版本库是在层级最高的位置，工作区最低，我们在工作区工作，进行文件修改，我们每完成一次修改，我们希望保存到版本库，并且告诉版本库这次修改了什么，好让版本库能够记录下来。\n下面就是Git的基本工作流程：\n1. 在工作区修改文件。\n2. 将工作区所有修改过的文件add(stage)到暂存区，准备commit。\n3. commit到版本库。\n\n{% asset_img git_workflow.png 600 300 %}\n\n一个文件的四个状态，可以通过git status命令看得到这些词。\n- Untracked: 当一个文件新创建，在版本库里面没有它，所以无法追踪。\n- Modified：一个文件在工作区被修改了，但是还没到暂存区。\n- Staged：修改的文件被stage到暂存区。\n- Committed：修改的文件在暂存区commit到版本库。\n\n{% asset_img git_four_states.png 600 300 %}\n\nGit项目的三个组成元素，各自代表一个版本，我们可以查看两两之间的差别：\n- git diff: 查看工作区和暂存区的差别。\n- git diff --cached: 查看暂存区和版本库的差别。\n- git diff HEAD: 查看工作区和版本库的差别。\n\n\n## 2.3 版本回退\n### 2.3.1 仓库版本回退\nGit既然能够跟踪文件的修改，自然就可以回溯，`.git`文件有保留每一次commit的信息，每一次commit都有一个唯一的commit id对应，它是经过SHA1计算出来的一个数字，用16进制表示，我们可以通过命令回退命令，回退到想要版本。\n```\n$ git reset <mode> <你想回退到的版本的commit id的前几位>\n```\n\n在Git管理版本的时候，会有一个HEAD指针，指向最近的一次commit，每次的commit会练成一条链，回退的过程实际是将HEAD指针指向之前的节点\n{% asset_img git_reset.png 400 200 %}\n\nreset有三种mode：soft, mixed(默认), hard，可以看到无论是哪个模式，HEAD的位置都肯定是会改变的，所以reset的另外一个作用就是撤销commit。\n\n| mode  | HEAD指针的位置 | 暂存区 | 工作区 |\n| :---: | :------------: | :----: | :----: |\n| soft  |      改变      |  不变  |  不变  |\n| mixed |      改变      |  改变  |  不变  |\n| hard  |      改变      |  改变  |  改变  |\n\n一种更加简单的方式替换commit id的是用HEAD指针，上一个版本就是`HEAD^`，上上个版本就是`HEAD^^`，依次往后可以写成`HEAD~n`。\n\n### 2.3.2 工作区修改撤销\n当你在工作区乱改一通，也忘了自己改了什么地方，那么你可以用本地版本库的内容直接替换工作区，丢弃工作区的所有改变，用以下的命令可以使得file回到最近一次commit或者stage时的状态(注意，stage也是可以的，有些人可能提交到暂存区后，又乱改一通，这条命令将暂存区的版本替换工作区)\n```\n$ git checkout -- <file>\n```\n\n### 2.3.3 暂存区版本回退\n当我们在commit之前发现文件有问题，不能commit，但是修改的文件已经添加到了暂存区了，可以用以下的命令将暂存区的修改撤销(unstage)，重新放回工作区。`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区，用HEAD的时候，表示最新的版本。\n```\n$ git reset HEAD <file>\n```\n\n总结一下：\n1. 撤销工作区修改，可以直接用本地版本库来替换\n2. 不小心stage到暂存区，可以用reset命令撤销，撤销后暂存区该文件恢复原状，但是工作区依旧时修改了的。但是我个人觉得，既然工作区你瞎改了一些东西，并且add到暂存区，那么只需要把修改的内容改回去，再重新add到暂存区，就能恢复原状了。\n3. 不小心还commit到版本库了，也可以用reset命令，结合hard mode，将工作区、暂存区全部恢复之前的版本。\n\n## 2.4 创建版本库\n首先，版本库有两种类型：\n- 本地版本库(local)，寄托在本地的机器，一般是个人电脑，为个人所用。\n- 远端版本库(remote)，托管在远端的一个服务器上，被多个用户所使用。Github就是全球最大的托管Git版本库的服务器，从名字就可以知道。\n\n本地版本库的创建有两种方法：\n- git init, 在本地初始化一个版本库。\n- git clone, 从远端克隆一个仓库到本地。\n\n当我们创建完一个本地版本库后，在本地的目录下就会多一个`.git`的文件夹，它就是版本库，里面就是管理整个目录的内容。\n\n## 2.5 版本库的同步\n远端仓库的创建非常简单，只需要在Github上创建即可，但是远端仓库创建之后，仓库内是空的，它只能通过本地版本库的同步来实现初始化。\n远端仓库使得我们可以和其它用户一起合作，只需要保证远端的版本库永远是最新的版本即可，因此，本地和远端版本库之间就需要频繁地进行同步，主要通过三个动作来完成：push, pull, merge。\n同步之前，我们需要绑定本地版本库到远端仓库，才能进行以后的同步操作。远端仓库默认叫做origin，当然也可以叫其它名字。\n```\n$ git remote add origin <remote repo addr>\n```\n\n### 2.5.1 Git push\n当我们想将本地版本库更新到远端仓库的时候，我们可以将其push到远端的仓库，这样就能使得远端仓库跟本地保持同步。\n{% asset_img push.png 600 300 %}\n\n### 2.5.2 Git pull\n当你的队友将他的本地仓库push到你们共同的远端仓库，你需要对自己本地的仓库进行更新，跟你队友的仓库保持一致，这时候我们就需要将远端仓库pull到自己的本地仓库。\n{% asset_img pull.png 600 300 %}\n\n### 2.5.3 Git merge\n无论是上传到远端仓库还是从远端仓库下载，远端仓库永远是最新版本，拥有最高优先级的。当我们想push我们的本地仓库到远程仓库的时候，不幸你的本地库的版本不是最新版本(即你在修改自己的本地版本的同时，有人更新了远程仓库)，这时候push会被拒绝，因为远程仓库的有些更新并不在你的本地仓库。这时候我们需要将远端仓库先pull下来，并和本地仓库进行合并(merge)。\nmerge就是指两个仓库(或者一个仓库的两个分支)进行合并的过程，在合并的过程，Git会自动地将另外一个仓库(分支)的改变更新到当前的仓库(分支)。\n但是，合并的两个仓库(分支)在某些文件可能都共同地修改了同个地方，这时候就出现了所谓的conflit，Git并不会自动地帮你选择一个版本，而是将这个选择的权利交给了我们，Git会帮我们将conflit的地方标记出来，我们需要手动地进行修改，才能最后完成合并过程。\n\n下面对比一下pull和fetch\n- fetch：fetch是将远程仓库的某条分支的内容拉到本地，但是fetch后是看不到变化，而是在本地新开了一个分支，该分支的指针是`FETCH_HEAD`，checkout到该分支后可以查看远程分支的最新内容。然后切换到master分支，执行merge，选中`FETCH_HEAD`，合并后如果出现冲突则解决冲突，最后commit。\n- pull：pull相当于fetch和merge，自动将远程仓库更新到本地仓库\n```\n$ git fetch origin master(将远程仓库的master分支拉到本地当前分支)\n$ git merge FETCH_HEAD\n```\n<br>\n# 3. 分支管理和协作\n分支使得Git变得更加的强大，使得团队协作更加的方便。任何一个Git仓库，都会默认有一个master的分支，无论是本地仓库还是远程仓库，这个分支是在创建Git仓库的时候就会默认创建的。之前提到HEAD指针是指向最近一次commit的，但严格来讲，HEAD指针是指向master指针，master指针才是指向最近一次commit，所以可以理解为HEAD指针是指向当前的分支。\n如果这样来看的话，一条分支就好比链表，每一次commit就往链表尾部插入新的仓库snapshot。一个仓库可以有好几条分支，当新开一条分支的时候，原有的链表尾部就会开始分叉，同时会有另外一个新的指针指向新的分叉，当我们切换分支的时候，HEAD指针就会指向对应分支的指针。\n{% asset_img branch.png 500 250 %}\n\n## 3.1 创建、切换分支\nGit创建分支和切换分支都很快，因为无非就是创建一个指针，和改变HEAD指针的指向而已。\n```\n创建branch：git branch <branch_name>\n切换branch：git checkout <branch_name>\n创建并切换branch：git checkout -b <branch_name>\n查看branch list：git branch\n```\n\n## 3.2 分支合并\n在多人协作的时候，基本上都是每个人都在自己的分支上工作，完成自己的工作之后再把自己的代码合并到master分支上。\n之前提到，两条分支的merge可能会导致conflit，冲突的原因是两个**已经提交的分支**的相同文件相同位置的不同操作进行了合并。\n\n**注意**\n要避免冲突，就是最好每次修改文件之前，先merge别的分支(或者pull远程仓库)，这样就能保证自己是在别人最新版本的基础上修改的，自己修改完后去合并到别人分支(push到远程仓库)都不会产生冲突。\n这种情况就好比下图，第三个节点是最新版本，然后在dev分支上修改，修改完成后commit，再切换回master分支，然后跟dev分支进行merge，这时候这种merge叫做fast forward，因为是直接将master的指针指向了第四个节点，相当于直接覆盖。\n{% asset_img ff_merge.png 500 250 %}\n\n以下的情况会导致冲突，假如我在dev分支修改了a文件的第二行代码，并且提交了。然后我切换到master分支，假如我不知道dev分支改了什么，我在master分支也改了a文件的第二行代码，并且提交了。然后我在这个时候想把dev分支的修改一起merge到master分支上，冲突发生了，因为两个版本都修改了同一行代码，Git会将冲突的位置，用以下的方式告知我们，并要求我们人工进行修改。如果不解决冲突时没法提交或者切换分支的。\n```\n<<<<<<<< HEAD(Current Change)\nother code\n========\nyour code\n>>>>>>>> your branch name(Incoming Change)\n```\n\n但是假如我在master分支改的时a文件的第三行代码，并且提交了，这时候再去将dev分支merge进来，不会有冲突，而是会自动合并，即使我在修改第三行代码前并没有先将dev的修改merge进来。但是还是建议先merge再做修改。\n\n## 3.3 与远端仓库的同步\n像之前所说，无论是本地仓库还是远端的仓库，都可以存在不同的分支，还是那句话，在修改代码前，先将远端仓库pull下来，方便以后push的时候，避免产生冲突。并且需要注意，本地仓库是从哪条分支pull下来的，最好就push回哪条分支，不然push不上去。\n如果本地仓库和远端仓库都只有一条分支，那么情况就简单很多，因为不需要明确地指明哪条分支到哪条分支。\n- pull：如果本地和远端都只有一条分支，直接git pull就好，如果想pull到当前分支，那么本地分支名可以省略。\n    ```\n    $ git pull [远程仓库名字，一般默认origin] [远端分支名]:[本地分支名]\n    eg: git pull origin master:master\n    ```\n- fetch：fetch不需要写本地分支名，因为它还没有merge，只是把远端分支拉到本地并保存到`FETCH_HEAD`而已。\n    ```\n    $ git fetch [远程仓库名字] [远端分支名]\n    ```\n- push：建议写全。\n    - 最常见到的是`git push origin master`，远程分支被省略，它表示将本地分支推送到与其存在追踪关系的远程分支(通常两者同名)，因为远端仓库肯定存在master分支，因此省略也没有问题。如果该远程分支不存在，则会被新建。\n    - 其它形式如`git push origin`，表示将当前分支push到远端与当前分支存在追踪关系的分支。\n    - `git push`，如果本地和远端都只有一条分支，那么全都可以省略。\n    ```\n    $ git push [远程仓库名字] [本地分支名]:[远端分支名]\n    ```\n\n## 3.4 Stash\nStash是一个工作状态保存栈，用于保存/恢复工作区的临时状态。\n{% asset_img stash.png 500 250 %}\n\n那么什么时候才需要将工作区的状态暂时保存起来呢？说到暂时，那么肯定就是修改只进行了一半，还没到commit或者stage的地步。比如我在master上进行了一些修改，但是还没有commit(加到暂存区也不行)，现在我需要切换到dev分支进行其它的修改。Git会reject你的分支切换(另一种reject分支切换的情况是出现conflit，conflit没解决之前，不允许切换分支)，并且告诉你要不将修改commit，要不将它放到stash里面，才可以切换分支。这就是stash出现的目的，暂时存储工作区的状态。\n将工作区临时保存起来可以用`git stash`命令，实际保存的是工作区的一个snapshot，将工作区stash之后，工作区变回干净状态(从git status可以看出)。因此可以多次stash，相当于将不同的几个snapshot保存起来，stash的地方是一个栈，遵循后进先出。\n`git stash list`可以查看栈里面的snapshot。如果要恢复工作区可以有两种方法：\n- `git stash pop`：将栈顶元素pop出来，恢复工作区的同时把stash的内容删掉。\n- `git stash apply stash@{n}` & `git stash drop stash@{n}`：从stash list选出需要恢复的snapshot，snapshot的命名就是`stash@{n}`。\n\n<br>\n# 4. GitHub之pull request\n当我们在进行团队任务的时候，每个人都会在本地拥有自己的一条分支，同理，在远端也会有一条与之对应的分支，如feature分支、bug fix分支等，当我们在本地完成自己的任务，然后push到远端自己分支之后，我们准备将它merge到master分支(master分支永远是最新的版本)，首先我们不可能直接将自己本地的分支push到远端的master，因为万一出错了就会很麻烦，因此我们只会push到自己的分支，那么怎样能够更新远端的master分支呢？\n这就是pull request要做的事了，字面上理解pull request是指请求合并代码，或者请求对方pull一下自己的代码。pull request可以发生在一个仓库的不同分支，也可以发生在两个不同的仓库，但是这两个不同的仓库必须存在fork的关系，fork是指将别人的仓库copy到自己的仓库。\n\n假设你想为一些开源项目做一下贡献\n1. 将这个项目fork到自己的GitHub，并将它clone到本地(注意是自己GitHub上的那个仓库)\n2. 创建新分支，进行代码修改\n3. push到自己GitHub上对应的分支\n4. 发起pull request，pull request里有base和compare，base就是别人的代码，compare是指自己修改后的代码，在这里base要选择开源项目仓库的master分支，compare选自己仓库的那条分支。\n5. 对方进行代码审核，如果通过了，就会进行代码合并。\n<br>\n{% asset_img pr.jpg 500 250 %}\n\n<br>\n# 5. 总结\nGit可以说是每一个开发者必备的工具，而Github更是全世界最活跃的网站之一，无论你是将Github看成是一个项目代码的仓库，还是在公司跟同事合作，掌握Git都会让你受益匪浅，个人推荐用Git Bash，不要依赖Github Desktop，虽然方便，但是沉下心来理解Git的基本概念和操作，也是每个开发者值得做和应该做的一件事。\n\n<br>\n# 6. 参考资料\n1. [廖雪峰Git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n2. [backlog git tutorial](https://backlog.com/git-tutorial/)\n3. [Git官网](https://git-scm.com/docs/)，但是太难懂了，我暂时也没看懂>_<\n\n<br>\n","slug":"Getting-Started-with-Git","published":1,"updated":"2018-09-05T05:12:12.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7g920000akw28lq36428","content":"<img src=\"/2018/08/15/Getting-Started-with-Git/header.jpg\" width=\"500\" height=\"250\">\n<blockquote>\n<p>Git是一个分布式的版本控制软件，不需要服务器端软件，就可以运作版本控制，使得代码的发布和交流机器方便。Git的速度很快，这对于Linux内核的项目来说很重要，且Git拥有出色的合并追踪(merge tracking)能力，能够记录修改的代码。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"1-安装配置Git\"><a href=\"#1-安装配置Git\" class=\"headerlink\" title=\"1. 安装配置Git\"></a>1. 安装配置Git</h1><p>Linux下安装Git非常的简单，只需要简单的一条命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure></p>\n<p>配置本地Git的用户名和邮箱与Github的一致<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h1 id=\"2-Git基本概念\"><a href=\"#2-Git基本概念\" class=\"headerlink\" title=\"2. Git基本概念\"></a>2. Git基本概念</h1><h2 id=\"2-1-What-is-git\"><a href=\"#2-1-What-is-git\" class=\"headerlink\" title=\"2.1 What is git?\"></a>2.1 What is git?</h2><p>git是一个管理代码的版本控制系统(Version Control System, VCS)，它能跟踪每一个文件的变化，如果你修改了某个文件，VCS能够记录并且保存这些变化，这使得你可以撤销任何的修改，回溯到任何一个历史版本。<br><strong>注意</strong><br>所有的版本控制系统都只能跟踪文本文件的改动，如TXT文件、网页文件、程序代码等；而对于图片、视频这种二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只能知道图片从100KB改成120KB，但是到底改了什么，无法知道。不幸的是，Microsoft的Word文件也是二进制格式的，因此Git也没法跟踪Word文件的改动。</p>\n<h2 id=\"2-2-Git-workflow\"><a href=\"#2-2-Git-workflow\" class=\"headerlink\" title=\"2.2 Git workflow\"></a>2.2 Git workflow</h2><p>在一个Git项目里面，由三个主要的组成元素：</p>\n<ul>\n<li>版本库(repository)：简称repo，它记录了你项目的所有变化和修改，保存了所有的commit，commit是指在某个时间点，项目所有文件的一个snapshot，可以理解为一次提交，将最新的版本提交到版本库，交由版本库进行保存。</li>\n<li>暂存区(index or staging area)：它是工作区和版本库之间的一个bridge，可以理解为一个中转站。暂存区的文件能够被commit，index is where commits are prepared。</li>\n<li>工作区(working tree)：就是我们本地工作的目录，我们能够修改文件、增添删除文件的目录。</li>\n</ul>\n<p>三者可以理解为一个层级关系，版本库是在层级最高的位置，工作区最低，我们在工作区工作，进行文件修改，我们每完成一次修改，我们希望保存到版本库，并且告诉版本库这次修改了什么，好让版本库能够记录下来。<br>下面就是Git的基本工作流程：</p>\n<ol>\n<li>在工作区修改文件。</li>\n<li>将工作区所有修改过的文件add(stage)到暂存区，准备commit。</li>\n<li>commit到版本库。</li>\n</ol>\n<img src=\"/2018/08/15/Getting-Started-with-Git/git_workflow.png\" width=\"600\" height=\"300\">\n<p>一个文件的四个状态，可以通过git status命令看得到这些词。</p>\n<ul>\n<li>Untracked: 当一个文件新创建，在版本库里面没有它，所以无法追踪。</li>\n<li>Modified：一个文件在工作区被修改了，但是还没到暂存区。</li>\n<li>Staged：修改的文件被stage到暂存区。</li>\n<li>Committed：修改的文件在暂存区commit到版本库。</li>\n</ul>\n<img src=\"/2018/08/15/Getting-Started-with-Git/git_four_states.png\" width=\"600\" height=\"300\">\n<p>Git项目的三个组成元素，各自代表一个版本，我们可以查看两两之间的差别：</p>\n<ul>\n<li>git diff: 查看工作区和暂存区的差别。</li>\n<li>git diff —cached: 查看暂存区和版本库的差别。</li>\n<li>git diff HEAD: 查看工作区和版本库的差别。</li>\n</ul>\n<h2 id=\"2-3-版本回退\"><a href=\"#2-3-版本回退\" class=\"headerlink\" title=\"2.3 版本回退\"></a>2.3 版本回退</h2><h3 id=\"2-3-1-仓库版本回退\"><a href=\"#2-3-1-仓库版本回退\" class=\"headerlink\" title=\"2.3.1 仓库版本回退\"></a>2.3.1 仓库版本回退</h3><p>Git既然能够跟踪文件的修改，自然就可以回溯，<code>.git</code>文件有保留每一次commit的信息，每一次commit都有一个唯一的commit id对应，它是经过SHA1计算出来的一个数字，用16进制表示，我们可以通过命令回退命令，回退到想要版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset &lt;mode&gt; &lt;你想回退到的版本的commit id的前几位&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在Git管理版本的时候，会有一个HEAD指针，指向最近的一次commit，每次的commit会练成一条链，回退的过程实际是将HEAD指针指向之前的节点<br><img src=\"/2018/08/15/Getting-Started-with-Git/git_reset.png\" width=\"400\" height=\"200\"></p>\n<p>reset有三种mode：soft, mixed(默认), hard，可以看到无论是哪个模式，HEAD的位置都肯定是会改变的，所以reset的另外一个作用就是撤销commit。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">mode</th>\n<th style=\"text-align:center\">HEAD指针的位置</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">soft</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">不变</td>\n<td style=\"text-align:center\">不变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mixed</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">不变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hard</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>一种更加简单的方式替换commit id的是用HEAD指针，上一个版本就是<code>HEAD^</code>，上上个版本就是<code>HEAD^^</code>，依次往后可以写成<code>HEAD~n</code>。</p>\n<h3 id=\"2-3-2-工作区修改撤销\"><a href=\"#2-3-2-工作区修改撤销\" class=\"headerlink\" title=\"2.3.2 工作区修改撤销\"></a>2.3.2 工作区修改撤销</h3><p>当你在工作区乱改一通，也忘了自己改了什么地方，那么你可以用本地版本库的内容直接替换工作区，丢弃工作区的所有改变，用以下的命令可以使得file回到最近一次commit或者stage时的状态(注意，stage也是可以的，有些人可能提交到暂存区后，又乱改一通，这条命令将暂存区的版本替换工作区)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-3-暂存区版本回退\"><a href=\"#2-3-3-暂存区版本回退\" class=\"headerlink\" title=\"2.3.3 暂存区版本回退\"></a>2.3.3 暂存区版本回退</h3><p>当我们在commit之前发现文件有问题，不能commit，但是修改的文件已经添加到了暂存区了，可以用以下的命令将暂存区的修改撤销(unstage)，重新放回工作区。<code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区，用HEAD的时候，表示最新的版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下：</p>\n<ol>\n<li>撤销工作区修改，可以直接用本地版本库来替换</li>\n<li>不小心stage到暂存区，可以用reset命令撤销，撤销后暂存区该文件恢复原状，但是工作区依旧时修改了的。但是我个人觉得，既然工作区你瞎改了一些东西，并且add到暂存区，那么只需要把修改的内容改回去，再重新add到暂存区，就能恢复原状了。</li>\n<li>不小心还commit到版本库了，也可以用reset命令，结合hard mode，将工作区、暂存区全部恢复之前的版本。</li>\n</ol>\n<h2 id=\"2-4-创建版本库\"><a href=\"#2-4-创建版本库\" class=\"headerlink\" title=\"2.4 创建版本库\"></a>2.4 创建版本库</h2><p>首先，版本库有两种类型：</p>\n<ul>\n<li>本地版本库(local)，寄托在本地的机器，一般是个人电脑，为个人所用。</li>\n<li>远端版本库(remote)，托管在远端的一个服务器上，被多个用户所使用。Github就是全球最大的托管Git版本库的服务器，从名字就可以知道。</li>\n</ul>\n<p>本地版本库的创建有两种方法：</p>\n<ul>\n<li>git init, 在本地初始化一个版本库。</li>\n<li>git clone, 从远端克隆一个仓库到本地。</li>\n</ul>\n<p>当我们创建完一个本地版本库后，在本地的目录下就会多一个<code>.git</code>的文件夹，它就是版本库，里面就是管理整个目录的内容。</p>\n<h2 id=\"2-5-版本库的同步\"><a href=\"#2-5-版本库的同步\" class=\"headerlink\" title=\"2.5 版本库的同步\"></a>2.5 版本库的同步</h2><p>远端仓库的创建非常简单，只需要在Github上创建即可，但是远端仓库创建之后，仓库内是空的，它只能通过本地版本库的同步来实现初始化。<br>远端仓库使得我们可以和其它用户一起合作，只需要保证远端的版本库永远是最新的版本即可，因此，本地和远端版本库之间就需要频繁地进行同步，主要通过三个动作来完成：push, pull, merge。<br>同步之前，我们需要绑定本地版本库到远端仓库，才能进行以后的同步操作。远端仓库默认叫做origin，当然也可以叫其它名字。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;remote repo addr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-1-Git-push\"><a href=\"#2-5-1-Git-push\" class=\"headerlink\" title=\"2.5.1 Git push\"></a>2.5.1 Git push</h3><p>当我们想将本地版本库更新到远端仓库的时候，我们可以将其push到远端的仓库，这样就能使得远端仓库跟本地保持同步。<br><img src=\"/2018/08/15/Getting-Started-with-Git/push.png\" width=\"600\" height=\"300\"></p>\n<h3 id=\"2-5-2-Git-pull\"><a href=\"#2-5-2-Git-pull\" class=\"headerlink\" title=\"2.5.2 Git pull\"></a>2.5.2 Git pull</h3><p>当你的队友将他的本地仓库push到你们共同的远端仓库，你需要对自己本地的仓库进行更新，跟你队友的仓库保持一致，这时候我们就需要将远端仓库pull到自己的本地仓库。<br><img src=\"/2018/08/15/Getting-Started-with-Git/pull.png\" width=\"600\" height=\"300\"></p>\n<h3 id=\"2-5-3-Git-merge\"><a href=\"#2-5-3-Git-merge\" class=\"headerlink\" title=\"2.5.3 Git merge\"></a>2.5.3 Git merge</h3><p>无论是上传到远端仓库还是从远端仓库下载，远端仓库永远是最新版本，拥有最高优先级的。当我们想push我们的本地仓库到远程仓库的时候，不幸你的本地库的版本不是最新版本(即你在修改自己的本地版本的同时，有人更新了远程仓库)，这时候push会被拒绝，因为远程仓库的有些更新并不在你的本地仓库。这时候我们需要将远端仓库先pull下来，并和本地仓库进行合并(merge)。<br>merge就是指两个仓库(或者一个仓库的两个分支)进行合并的过程，在合并的过程，Git会自动地将另外一个仓库(分支)的改变更新到当前的仓库(分支)。<br>但是，合并的两个仓库(分支)在某些文件可能都共同地修改了同个地方，这时候就出现了所谓的conflit，Git并不会自动地帮你选择一个版本，而是将这个选择的权利交给了我们，Git会帮我们将conflit的地方标记出来，我们需要手动地进行修改，才能最后完成合并过程。</p>\n<p>下面对比一下pull和fetch</p>\n<ul>\n<li>fetch：fetch是将远程仓库的某条分支的内容拉到本地，但是fetch后是看不到变化，而是在本地新开了一个分支，该分支的指针是<code>FETCH_HEAD</code>，checkout到该分支后可以查看远程分支的最新内容。然后切换到master分支，执行merge，选中<code>FETCH_HEAD</code>，合并后如果出现冲突则解决冲突，最后commit。</li>\n<li>pull：pull相当于fetch和merge，自动将远程仓库更新到本地仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin master(将远程仓库的master分支拉到本地当前分支)</span><br><span class=\"line\">$ git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"3-分支管理和协作\"><a href=\"#3-分支管理和协作\" class=\"headerlink\" title=\"3. 分支管理和协作\"></a>3. 分支管理和协作</h1><p>分支使得Git变得更加的强大，使得团队协作更加的方便。任何一个Git仓库，都会默认有一个master的分支，无论是本地仓库还是远程仓库，这个分支是在创建Git仓库的时候就会默认创建的。之前提到HEAD指针是指向最近一次commit的，但严格来讲，HEAD指针是指向master指针，master指针才是指向最近一次commit，所以可以理解为HEAD指针是指向当前的分支。<br>如果这样来看的话，一条分支就好比链表，每一次commit就往链表尾部插入新的仓库snapshot。一个仓库可以有好几条分支，当新开一条分支的时候，原有的链表尾部就会开始分叉，同时会有另外一个新的指针指向新的分叉，当我们切换分支的时候，HEAD指针就会指向对应分支的指针。<br><img src=\"/2018/08/15/Getting-Started-with-Git/branch.png\" width=\"500\" height=\"250\"></p>\n<h2 id=\"3-1-创建、切换分支\"><a href=\"#3-1-创建、切换分支\" class=\"headerlink\" title=\"3.1 创建、切换分支\"></a>3.1 创建、切换分支</h2><p>Git创建分支和切换分支都很快，因为无非就是创建一个指针，和改变HEAD指针的指向而已。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建branch：git branch &lt;branch_name&gt;</span><br><span class=\"line\">切换branch：git checkout &lt;branch_name&gt;</span><br><span class=\"line\">创建并切换branch：git checkout -b &lt;branch_name&gt;</span><br><span class=\"line\">查看branch list：git branch</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-分支合并\"><a href=\"#3-2-分支合并\" class=\"headerlink\" title=\"3.2 分支合并\"></a>3.2 分支合并</h2><p>在多人协作的时候，基本上都是每个人都在自己的分支上工作，完成自己的工作之后再把自己的代码合并到master分支上。<br>之前提到，两条分支的merge可能会导致conflit，冲突的原因是两个<strong>已经提交的分支</strong>的相同文件相同位置的不同操作进行了合并。</p>\n<p><strong>注意</strong><br>要避免冲突，就是最好每次修改文件之前，先merge别的分支(或者pull远程仓库)，这样就能保证自己是在别人最新版本的基础上修改的，自己修改完后去合并到别人分支(push到远程仓库)都不会产生冲突。<br>这种情况就好比下图，第三个节点是最新版本，然后在dev分支上修改，修改完成后commit，再切换回master分支，然后跟dev分支进行merge，这时候这种merge叫做fast forward，因为是直接将master的指针指向了第四个节点，相当于直接覆盖。<br><img src=\"/2018/08/15/Getting-Started-with-Git/ff_merge.png\" width=\"500\" height=\"250\"></p>\n<p>以下的情况会导致冲突，假如我在dev分支修改了a文件的第二行代码，并且提交了。然后我切换到master分支，假如我不知道dev分支改了什么，我在master分支也改了a文件的第二行代码，并且提交了。然后我在这个时候想把dev分支的修改一起merge到master分支上，冲突发生了，因为两个版本都修改了同一行代码，Git会将冲突的位置，用以下的方式告知我们，并要求我们人工进行修改。如果不解决冲突时没法提交或者切换分支的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(Current Change)</span><br><span class=\"line\">other code</span><br><span class=\"line\">========</span><br><span class=\"line\">your code</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; your branch name(Incoming Change)</span><br></pre></td></tr></table></figure></p>\n<p>但是假如我在master分支改的时a文件的第三行代码，并且提交了，这时候再去将dev分支merge进来，不会有冲突，而是会自动合并，即使我在修改第三行代码前并没有先将dev的修改merge进来。但是还是建议先merge再做修改。</p>\n<h2 id=\"3-3-与远端仓库的同步\"><a href=\"#3-3-与远端仓库的同步\" class=\"headerlink\" title=\"3.3 与远端仓库的同步\"></a>3.3 与远端仓库的同步</h2><p>像之前所说，无论是本地仓库还是远端的仓库，都可以存在不同的分支，还是那句话，在修改代码前，先将远端仓库pull下来，方便以后push的时候，避免产生冲突。并且需要注意，本地仓库是从哪条分支pull下来的，最好就push回哪条分支，不然push不上去。<br>如果本地仓库和远端仓库都只有一条分支，那么情况就简单很多，因为不需要明确地指明哪条分支到哪条分支。</p>\n<ul>\n<li><p>pull：如果本地和远端都只有一条分支，直接git pull就好，如果想pull到当前分支，那么本地分支名可以省略。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull [远程仓库名字，一般默认origin] [远端分支名]:[本地分支名]</span><br><span class=\"line\">eg: git pull origin master:master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fetch：fetch不需要写本地分支名，因为它还没有merge，只是把远端分支拉到本地并保存到<code>FETCH_HEAD</code>而已。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [远程仓库名字] [远端分支名]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push：建议写全。</p>\n<ul>\n<li>最常见到的是<code>git push origin master</code>，远程分支被省略，它表示将本地分支推送到与其存在追踪关系的远程分支(通常两者同名)，因为远端仓库肯定存在master分支，因此省略也没有问题。如果该远程分支不存在，则会被新建。</li>\n<li>其它形式如<code>git push origin</code>，表示将当前分支push到远端与当前分支存在追踪关系的分支。</li>\n<li><code>git push</code>，如果本地和远端都只有一条分支，那么全都可以省略。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [远程仓库名字] [本地分支名]:[远端分支名]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-4-Stash\"><a href=\"#3-4-Stash\" class=\"headerlink\" title=\"3.4 Stash\"></a>3.4 Stash</h2><p>Stash是一个工作状态保存栈，用于保存/恢复工作区的临时状态。<br><img src=\"/2018/08/15/Getting-Started-with-Git/stash.png\" width=\"500\" height=\"250\"></p>\n<p>那么什么时候才需要将工作区的状态暂时保存起来呢？说到暂时，那么肯定就是修改只进行了一半，还没到commit或者stage的地步。比如我在master上进行了一些修改，但是还没有commit(加到暂存区也不行)，现在我需要切换到dev分支进行其它的修改。Git会reject你的分支切换(另一种reject分支切换的情况是出现conflit，conflit没解决之前，不允许切换分支)，并且告诉你要不将修改commit，要不将它放到stash里面，才可以切换分支。这就是stash出现的目的，暂时存储工作区的状态。<br>将工作区临时保存起来可以用<code>git stash</code>命令，实际保存的是工作区的一个snapshot，将工作区stash之后，工作区变回干净状态(从git status可以看出)。因此可以多次stash，相当于将不同的几个snapshot保存起来，stash的地方是一个栈，遵循后进先出。<br><code>git stash list</code>可以查看栈里面的snapshot。如果要恢复工作区可以有两种方法：</p>\n<ul>\n<li><code>git stash pop</code>：将栈顶元素pop出来，恢复工作区的同时把stash的内容删掉。</li>\n<li><code>git stash apply stash@{n}</code> &amp; <code>git stash drop stash@{n}</code>：从stash list选出需要恢复的snapshot，snapshot的命名就是<code>stash@{n}</code>。</li>\n</ul>\n<p><br></p>\n<h1 id=\"4-GitHub之pull-request\"><a href=\"#4-GitHub之pull-request\" class=\"headerlink\" title=\"4. GitHub之pull request\"></a>4. GitHub之pull request</h1><p>当我们在进行团队任务的时候，每个人都会在本地拥有自己的一条分支，同理，在远端也会有一条与之对应的分支，如feature分支、bug fix分支等，当我们在本地完成自己的任务，然后push到远端自己分支之后，我们准备将它merge到master分支(master分支永远是最新的版本)，首先我们不可能直接将自己本地的分支push到远端的master，因为万一出错了就会很麻烦，因此我们只会push到自己的分支，那么怎样能够更新远端的master分支呢？<br>这就是pull request要做的事了，字面上理解pull request是指请求合并代码，或者请求对方pull一下自己的代码。pull request可以发生在一个仓库的不同分支，也可以发生在两个不同的仓库，但是这两个不同的仓库必须存在fork的关系，fork是指将别人的仓库copy到自己的仓库。</p>\n<p>假设你想为一些开源项目做一下贡献</p>\n<ol>\n<li>将这个项目fork到自己的GitHub，并将它clone到本地(注意是自己GitHub上的那个仓库)</li>\n<li>创建新分支，进行代码修改</li>\n<li>push到自己GitHub上对应的分支</li>\n<li>发起pull request，pull request里有base和compare，base就是别人的代码，compare是指自己修改后的代码，在这里base要选择开源项目仓库的master分支，compare选自己仓库的那条分支。</li>\n<li>对方进行代码审核，如果通过了，就会进行代码合并。<br><br><img src=\"/2018/08/15/Getting-Started-with-Git/pr.jpg\" width=\"500\" height=\"250\">\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>Git可以说是每一个开发者必备的工具，而Github更是全世界最活跃的网站之一，无论你是将Github看成是一个项目代码的仓库，还是在公司跟同事合作，掌握Git都会让你受益匪浅，个人推荐用Git Bash，不要依赖Github Desktop，虽然方便，但是沉下心来理解Git的基本概念和操作，也是每个开发者值得做和应该做的一件事。</p>\n<p><br></p>\n<h1 id=\"6-参考资料\"><a href=\"#6-参考资料\" class=\"headerlink\" title=\"6. 参考资料\"></a>6. 参考资料</h1><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程</a></li>\n<li><a href=\"https://backlog.com/git-tutorial/\" target=\"_blank\" rel=\"noopener\">backlog git tutorial</a></li>\n<li><a href=\"https://git-scm.com/docs/\" target=\"_blank\" rel=\"noopener\">Git官网</a>，但是太难懂了，我暂时也没看懂&gt;_&lt;</li>\n</ol>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<img src=\"/2018/08/15/Getting-Started-with-Git/header.jpg\" width=\"500\" height=\"250\">\n<blockquote>\n<p>Git是一个分布式的版本控制软件，不需要服务器端软件，就可以运作版本控制，使得代码的发布和交流机器方便。Git的速度很快，这对于Linux内核的项目来说很重要，且Git拥有出色的合并追踪(merge tracking)能力，能够记录修改的代码。</p>\n</blockquote>","more":"<p><br></p>\n<h1 id=\"1-安装配置Git\"><a href=\"#1-安装配置Git\" class=\"headerlink\" title=\"1. 安装配置Git\"></a>1. 安装配置Git</h1><p>Linux下安装Git非常的简单，只需要简单的一条命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure></p>\n<p>配置本地Git的用户名和邮箱与Github的一致<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h1 id=\"2-Git基本概念\"><a href=\"#2-Git基本概念\" class=\"headerlink\" title=\"2. Git基本概念\"></a>2. Git基本概念</h1><h2 id=\"2-1-What-is-git\"><a href=\"#2-1-What-is-git\" class=\"headerlink\" title=\"2.1 What is git?\"></a>2.1 What is git?</h2><p>git是一个管理代码的版本控制系统(Version Control System, VCS)，它能跟踪每一个文件的变化，如果你修改了某个文件，VCS能够记录并且保存这些变化，这使得你可以撤销任何的修改，回溯到任何一个历史版本。<br><strong>注意</strong><br>所有的版本控制系统都只能跟踪文本文件的改动，如TXT文件、网页文件、程序代码等；而对于图片、视频这种二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只能知道图片从100KB改成120KB，但是到底改了什么，无法知道。不幸的是，Microsoft的Word文件也是二进制格式的，因此Git也没法跟踪Word文件的改动。</p>\n<h2 id=\"2-2-Git-workflow\"><a href=\"#2-2-Git-workflow\" class=\"headerlink\" title=\"2.2 Git workflow\"></a>2.2 Git workflow</h2><p>在一个Git项目里面，由三个主要的组成元素：</p>\n<ul>\n<li>版本库(repository)：简称repo，它记录了你项目的所有变化和修改，保存了所有的commit，commit是指在某个时间点，项目所有文件的一个snapshot，可以理解为一次提交，将最新的版本提交到版本库，交由版本库进行保存。</li>\n<li>暂存区(index or staging area)：它是工作区和版本库之间的一个bridge，可以理解为一个中转站。暂存区的文件能够被commit，index is where commits are prepared。</li>\n<li>工作区(working tree)：就是我们本地工作的目录，我们能够修改文件、增添删除文件的目录。</li>\n</ul>\n<p>三者可以理解为一个层级关系，版本库是在层级最高的位置，工作区最低，我们在工作区工作，进行文件修改，我们每完成一次修改，我们希望保存到版本库，并且告诉版本库这次修改了什么，好让版本库能够记录下来。<br>下面就是Git的基本工作流程：</p>\n<ol>\n<li>在工作区修改文件。</li>\n<li>将工作区所有修改过的文件add(stage)到暂存区，准备commit。</li>\n<li>commit到版本库。</li>\n</ol>\n<img src=\"/2018/08/15/Getting-Started-with-Git/git_workflow.png\" width=\"600\" height=\"300\">\n<p>一个文件的四个状态，可以通过git status命令看得到这些词。</p>\n<ul>\n<li>Untracked: 当一个文件新创建，在版本库里面没有它，所以无法追踪。</li>\n<li>Modified：一个文件在工作区被修改了，但是还没到暂存区。</li>\n<li>Staged：修改的文件被stage到暂存区。</li>\n<li>Committed：修改的文件在暂存区commit到版本库。</li>\n</ul>\n<img src=\"/2018/08/15/Getting-Started-with-Git/git_four_states.png\" width=\"600\" height=\"300\">\n<p>Git项目的三个组成元素，各自代表一个版本，我们可以查看两两之间的差别：</p>\n<ul>\n<li>git diff: 查看工作区和暂存区的差别。</li>\n<li>git diff —cached: 查看暂存区和版本库的差别。</li>\n<li>git diff HEAD: 查看工作区和版本库的差别。</li>\n</ul>\n<h2 id=\"2-3-版本回退\"><a href=\"#2-3-版本回退\" class=\"headerlink\" title=\"2.3 版本回退\"></a>2.3 版本回退</h2><h3 id=\"2-3-1-仓库版本回退\"><a href=\"#2-3-1-仓库版本回退\" class=\"headerlink\" title=\"2.3.1 仓库版本回退\"></a>2.3.1 仓库版本回退</h3><p>Git既然能够跟踪文件的修改，自然就可以回溯，<code>.git</code>文件有保留每一次commit的信息，每一次commit都有一个唯一的commit id对应，它是经过SHA1计算出来的一个数字，用16进制表示，我们可以通过命令回退命令，回退到想要版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset &lt;mode&gt; &lt;你想回退到的版本的commit id的前几位&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在Git管理版本的时候，会有一个HEAD指针，指向最近的一次commit，每次的commit会练成一条链，回退的过程实际是将HEAD指针指向之前的节点<br><img src=\"/2018/08/15/Getting-Started-with-Git/git_reset.png\" width=\"400\" height=\"200\"></p>\n<p>reset有三种mode：soft, mixed(默认), hard，可以看到无论是哪个模式，HEAD的位置都肯定是会改变的，所以reset的另外一个作用就是撤销commit。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">mode</th>\n<th style=\"text-align:center\">HEAD指针的位置</th>\n<th style=\"text-align:center\">暂存区</th>\n<th style=\"text-align:center\">工作区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">soft</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">不变</td>\n<td style=\"text-align:center\">不变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mixed</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">不变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hard</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n<td style=\"text-align:center\">改变</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>一种更加简单的方式替换commit id的是用HEAD指针，上一个版本就是<code>HEAD^</code>，上上个版本就是<code>HEAD^^</code>，依次往后可以写成<code>HEAD~n</code>。</p>\n<h3 id=\"2-3-2-工作区修改撤销\"><a href=\"#2-3-2-工作区修改撤销\" class=\"headerlink\" title=\"2.3.2 工作区修改撤销\"></a>2.3.2 工作区修改撤销</h3><p>当你在工作区乱改一通，也忘了自己改了什么地方，那么你可以用本地版本库的内容直接替换工作区，丢弃工作区的所有改变，用以下的命令可以使得file回到最近一次commit或者stage时的状态(注意，stage也是可以的，有些人可能提交到暂存区后，又乱改一通，这条命令将暂存区的版本替换工作区)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-3-暂存区版本回退\"><a href=\"#2-3-3-暂存区版本回退\" class=\"headerlink\" title=\"2.3.3 暂存区版本回退\"></a>2.3.3 暂存区版本回退</h3><p>当我们在commit之前发现文件有问题，不能commit，但是修改的文件已经添加到了暂存区了，可以用以下的命令将暂存区的修改撤销(unstage)，重新放回工作区。<code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区，用HEAD的时候，表示最新的版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p>\n<p>总结一下：</p>\n<ol>\n<li>撤销工作区修改，可以直接用本地版本库来替换</li>\n<li>不小心stage到暂存区，可以用reset命令撤销，撤销后暂存区该文件恢复原状，但是工作区依旧时修改了的。但是我个人觉得，既然工作区你瞎改了一些东西，并且add到暂存区，那么只需要把修改的内容改回去，再重新add到暂存区，就能恢复原状了。</li>\n<li>不小心还commit到版本库了，也可以用reset命令，结合hard mode，将工作区、暂存区全部恢复之前的版本。</li>\n</ol>\n<h2 id=\"2-4-创建版本库\"><a href=\"#2-4-创建版本库\" class=\"headerlink\" title=\"2.4 创建版本库\"></a>2.4 创建版本库</h2><p>首先，版本库有两种类型：</p>\n<ul>\n<li>本地版本库(local)，寄托在本地的机器，一般是个人电脑，为个人所用。</li>\n<li>远端版本库(remote)，托管在远端的一个服务器上，被多个用户所使用。Github就是全球最大的托管Git版本库的服务器，从名字就可以知道。</li>\n</ul>\n<p>本地版本库的创建有两种方法：</p>\n<ul>\n<li>git init, 在本地初始化一个版本库。</li>\n<li>git clone, 从远端克隆一个仓库到本地。</li>\n</ul>\n<p>当我们创建完一个本地版本库后，在本地的目录下就会多一个<code>.git</code>的文件夹，它就是版本库，里面就是管理整个目录的内容。</p>\n<h2 id=\"2-5-版本库的同步\"><a href=\"#2-5-版本库的同步\" class=\"headerlink\" title=\"2.5 版本库的同步\"></a>2.5 版本库的同步</h2><p>远端仓库的创建非常简单，只需要在Github上创建即可，但是远端仓库创建之后，仓库内是空的，它只能通过本地版本库的同步来实现初始化。<br>远端仓库使得我们可以和其它用户一起合作，只需要保证远端的版本库永远是最新的版本即可，因此，本地和远端版本库之间就需要频繁地进行同步，主要通过三个动作来完成：push, pull, merge。<br>同步之前，我们需要绑定本地版本库到远端仓库，才能进行以后的同步操作。远端仓库默认叫做origin，当然也可以叫其它名字。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;remote repo addr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-1-Git-push\"><a href=\"#2-5-1-Git-push\" class=\"headerlink\" title=\"2.5.1 Git push\"></a>2.5.1 Git push</h3><p>当我们想将本地版本库更新到远端仓库的时候，我们可以将其push到远端的仓库，这样就能使得远端仓库跟本地保持同步。<br><img src=\"/2018/08/15/Getting-Started-with-Git/push.png\" width=\"600\" height=\"300\"></p>\n<h3 id=\"2-5-2-Git-pull\"><a href=\"#2-5-2-Git-pull\" class=\"headerlink\" title=\"2.5.2 Git pull\"></a>2.5.2 Git pull</h3><p>当你的队友将他的本地仓库push到你们共同的远端仓库，你需要对自己本地的仓库进行更新，跟你队友的仓库保持一致，这时候我们就需要将远端仓库pull到自己的本地仓库。<br><img src=\"/2018/08/15/Getting-Started-with-Git/pull.png\" width=\"600\" height=\"300\"></p>\n<h3 id=\"2-5-3-Git-merge\"><a href=\"#2-5-3-Git-merge\" class=\"headerlink\" title=\"2.5.3 Git merge\"></a>2.5.3 Git merge</h3><p>无论是上传到远端仓库还是从远端仓库下载，远端仓库永远是最新版本，拥有最高优先级的。当我们想push我们的本地仓库到远程仓库的时候，不幸你的本地库的版本不是最新版本(即你在修改自己的本地版本的同时，有人更新了远程仓库)，这时候push会被拒绝，因为远程仓库的有些更新并不在你的本地仓库。这时候我们需要将远端仓库先pull下来，并和本地仓库进行合并(merge)。<br>merge就是指两个仓库(或者一个仓库的两个分支)进行合并的过程，在合并的过程，Git会自动地将另外一个仓库(分支)的改变更新到当前的仓库(分支)。<br>但是，合并的两个仓库(分支)在某些文件可能都共同地修改了同个地方，这时候就出现了所谓的conflit，Git并不会自动地帮你选择一个版本，而是将这个选择的权利交给了我们，Git会帮我们将conflit的地方标记出来，我们需要手动地进行修改，才能最后完成合并过程。</p>\n<p>下面对比一下pull和fetch</p>\n<ul>\n<li>fetch：fetch是将远程仓库的某条分支的内容拉到本地，但是fetch后是看不到变化，而是在本地新开了一个分支，该分支的指针是<code>FETCH_HEAD</code>，checkout到该分支后可以查看远程分支的最新内容。然后切换到master分支，执行merge，选中<code>FETCH_HEAD</code>，合并后如果出现冲突则解决冲突，最后commit。</li>\n<li>pull：pull相当于fetch和merge，自动将远程仓库更新到本地仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin master(将远程仓库的master分支拉到本地当前分支)</span><br><span class=\"line\">$ git merge FETCH_HEAD</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"3-分支管理和协作\"><a href=\"#3-分支管理和协作\" class=\"headerlink\" title=\"3. 分支管理和协作\"></a>3. 分支管理和协作</h1><p>分支使得Git变得更加的强大，使得团队协作更加的方便。任何一个Git仓库，都会默认有一个master的分支，无论是本地仓库还是远程仓库，这个分支是在创建Git仓库的时候就会默认创建的。之前提到HEAD指针是指向最近一次commit的，但严格来讲，HEAD指针是指向master指针，master指针才是指向最近一次commit，所以可以理解为HEAD指针是指向当前的分支。<br>如果这样来看的话，一条分支就好比链表，每一次commit就往链表尾部插入新的仓库snapshot。一个仓库可以有好几条分支，当新开一条分支的时候，原有的链表尾部就会开始分叉，同时会有另外一个新的指针指向新的分叉，当我们切换分支的时候，HEAD指针就会指向对应分支的指针。<br><img src=\"/2018/08/15/Getting-Started-with-Git/branch.png\" width=\"500\" height=\"250\"></p>\n<h2 id=\"3-1-创建、切换分支\"><a href=\"#3-1-创建、切换分支\" class=\"headerlink\" title=\"3.1 创建、切换分支\"></a>3.1 创建、切换分支</h2><p>Git创建分支和切换分支都很快，因为无非就是创建一个指针，和改变HEAD指针的指向而已。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建branch：git branch &lt;branch_name&gt;</span><br><span class=\"line\">切换branch：git checkout &lt;branch_name&gt;</span><br><span class=\"line\">创建并切换branch：git checkout -b &lt;branch_name&gt;</span><br><span class=\"line\">查看branch list：git branch</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-分支合并\"><a href=\"#3-2-分支合并\" class=\"headerlink\" title=\"3.2 分支合并\"></a>3.2 分支合并</h2><p>在多人协作的时候，基本上都是每个人都在自己的分支上工作，完成自己的工作之后再把自己的代码合并到master分支上。<br>之前提到，两条分支的merge可能会导致conflit，冲突的原因是两个<strong>已经提交的分支</strong>的相同文件相同位置的不同操作进行了合并。</p>\n<p><strong>注意</strong><br>要避免冲突，就是最好每次修改文件之前，先merge别的分支(或者pull远程仓库)，这样就能保证自己是在别人最新版本的基础上修改的，自己修改完后去合并到别人分支(push到远程仓库)都不会产生冲突。<br>这种情况就好比下图，第三个节点是最新版本，然后在dev分支上修改，修改完成后commit，再切换回master分支，然后跟dev分支进行merge，这时候这种merge叫做fast forward，因为是直接将master的指针指向了第四个节点，相当于直接覆盖。<br><img src=\"/2018/08/15/Getting-Started-with-Git/ff_merge.png\" width=\"500\" height=\"250\"></p>\n<p>以下的情况会导致冲突，假如我在dev分支修改了a文件的第二行代码，并且提交了。然后我切换到master分支，假如我不知道dev分支改了什么，我在master分支也改了a文件的第二行代码，并且提交了。然后我在这个时候想把dev分支的修改一起merge到master分支上，冲突发生了，因为两个版本都修改了同一行代码，Git会将冲突的位置，用以下的方式告知我们，并要求我们人工进行修改。如果不解决冲突时没法提交或者切换分支的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(Current Change)</span><br><span class=\"line\">other code</span><br><span class=\"line\">========</span><br><span class=\"line\">your code</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; your branch name(Incoming Change)</span><br></pre></td></tr></table></figure></p>\n<p>但是假如我在master分支改的时a文件的第三行代码，并且提交了，这时候再去将dev分支merge进来，不会有冲突，而是会自动合并，即使我在修改第三行代码前并没有先将dev的修改merge进来。但是还是建议先merge再做修改。</p>\n<h2 id=\"3-3-与远端仓库的同步\"><a href=\"#3-3-与远端仓库的同步\" class=\"headerlink\" title=\"3.3 与远端仓库的同步\"></a>3.3 与远端仓库的同步</h2><p>像之前所说，无论是本地仓库还是远端的仓库，都可以存在不同的分支，还是那句话，在修改代码前，先将远端仓库pull下来，方便以后push的时候，避免产生冲突。并且需要注意，本地仓库是从哪条分支pull下来的，最好就push回哪条分支，不然push不上去。<br>如果本地仓库和远端仓库都只有一条分支，那么情况就简单很多，因为不需要明确地指明哪条分支到哪条分支。</p>\n<ul>\n<li><p>pull：如果本地和远端都只有一条分支，直接git pull就好，如果想pull到当前分支，那么本地分支名可以省略。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull [远程仓库名字，一般默认origin] [远端分支名]:[本地分支名]</span><br><span class=\"line\">eg: git pull origin master:master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fetch：fetch不需要写本地分支名，因为它还没有merge，只是把远端分支拉到本地并保存到<code>FETCH_HEAD</code>而已。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [远程仓库名字] [远端分支名]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push：建议写全。</p>\n<ul>\n<li>最常见到的是<code>git push origin master</code>，远程分支被省略，它表示将本地分支推送到与其存在追踪关系的远程分支(通常两者同名)，因为远端仓库肯定存在master分支，因此省略也没有问题。如果该远程分支不存在，则会被新建。</li>\n<li>其它形式如<code>git push origin</code>，表示将当前分支push到远端与当前分支存在追踪关系的分支。</li>\n<li><code>git push</code>，如果本地和远端都只有一条分支，那么全都可以省略。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push [远程仓库名字] [本地分支名]:[远端分支名]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-4-Stash\"><a href=\"#3-4-Stash\" class=\"headerlink\" title=\"3.4 Stash\"></a>3.4 Stash</h2><p>Stash是一个工作状态保存栈，用于保存/恢复工作区的临时状态。<br><img src=\"/2018/08/15/Getting-Started-with-Git/stash.png\" width=\"500\" height=\"250\"></p>\n<p>那么什么时候才需要将工作区的状态暂时保存起来呢？说到暂时，那么肯定就是修改只进行了一半，还没到commit或者stage的地步。比如我在master上进行了一些修改，但是还没有commit(加到暂存区也不行)，现在我需要切换到dev分支进行其它的修改。Git会reject你的分支切换(另一种reject分支切换的情况是出现conflit，conflit没解决之前，不允许切换分支)，并且告诉你要不将修改commit，要不将它放到stash里面，才可以切换分支。这就是stash出现的目的，暂时存储工作区的状态。<br>将工作区临时保存起来可以用<code>git stash</code>命令，实际保存的是工作区的一个snapshot，将工作区stash之后，工作区变回干净状态(从git status可以看出)。因此可以多次stash，相当于将不同的几个snapshot保存起来，stash的地方是一个栈，遵循后进先出。<br><code>git stash list</code>可以查看栈里面的snapshot。如果要恢复工作区可以有两种方法：</p>\n<ul>\n<li><code>git stash pop</code>：将栈顶元素pop出来，恢复工作区的同时把stash的内容删掉。</li>\n<li><code>git stash apply stash@{n}</code> &amp; <code>git stash drop stash@{n}</code>：从stash list选出需要恢复的snapshot，snapshot的命名就是<code>stash@{n}</code>。</li>\n</ul>\n<p><br></p>\n<h1 id=\"4-GitHub之pull-request\"><a href=\"#4-GitHub之pull-request\" class=\"headerlink\" title=\"4. GitHub之pull request\"></a>4. GitHub之pull request</h1><p>当我们在进行团队任务的时候，每个人都会在本地拥有自己的一条分支，同理，在远端也会有一条与之对应的分支，如feature分支、bug fix分支等，当我们在本地完成自己的任务，然后push到远端自己分支之后，我们准备将它merge到master分支(master分支永远是最新的版本)，首先我们不可能直接将自己本地的分支push到远端的master，因为万一出错了就会很麻烦，因此我们只会push到自己的分支，那么怎样能够更新远端的master分支呢？<br>这就是pull request要做的事了，字面上理解pull request是指请求合并代码，或者请求对方pull一下自己的代码。pull request可以发生在一个仓库的不同分支，也可以发生在两个不同的仓库，但是这两个不同的仓库必须存在fork的关系，fork是指将别人的仓库copy到自己的仓库。</p>\n<p>假设你想为一些开源项目做一下贡献</p>\n<ol>\n<li>将这个项目fork到自己的GitHub，并将它clone到本地(注意是自己GitHub上的那个仓库)</li>\n<li>创建新分支，进行代码修改</li>\n<li>push到自己GitHub上对应的分支</li>\n<li>发起pull request，pull request里有base和compare，base就是别人的代码，compare是指自己修改后的代码，在这里base要选择开源项目仓库的master分支，compare选自己仓库的那条分支。</li>\n<li>对方进行代码审核，如果通过了，就会进行代码合并。<br><br><img src=\"/2018/08/15/Getting-Started-with-Git/pr.jpg\" width=\"500\" height=\"250\">\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>Git可以说是每一个开发者必备的工具，而Github更是全世界最活跃的网站之一，无论你是将Github看成是一个项目代码的仓库，还是在公司跟同事合作，掌握Git都会让你受益匪浅，个人推荐用Git Bash，不要依赖Github Desktop，虽然方便，但是沉下心来理解Git的基本概念和操作，也是每个开发者值得做和应该做的一件事。</p>\n<p><br></p>\n<h1 id=\"6-参考资料\"><a href=\"#6-参考资料\" class=\"headerlink\" title=\"6. 参考资料\"></a>6. 参考资料</h1><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程</a></li>\n<li><a href=\"https://backlog.com/git-tutorial/\" target=\"_blank\" rel=\"noopener\">backlog git tutorial</a></li>\n<li><a href=\"https://git-scm.com/docs/\" target=\"_blank\" rel=\"noopener\">Git官网</a>，但是太难懂了，我暂时也没看懂&gt;_&lt;</li>\n</ol>\n<p><br></p>"},{"title":"【概率论与数理统计】——事件与概率","date":"2018-08-27T07:21:09.000Z","mathjax":true,"_content":"\n> 课程名称：概率论与数理统计\n> 开设学校：中科大\n> 课程平台：icourse\n> 第一章：事件与概率，讲述概率论的基本概念\n\n<!-- more -->\n\n# 一、随机试验和随机事件\n\n- 随机试验：随机现象的实现和对它某特征的观测\n  - 随机试验的要求：结果至少有两个；每次只得到其中一种结果，且之前不能够预知；在相同条件下能重复试验。\n- 基本事件：随机试验中的每个单一结果。\n- 随机事件：简称事件，在随机试验中我们所关心的可能出现的各种结果，它由一个或若干个基本事件组成。\n- 样本空间：随机试验中所有基本事件所构成的集合，用 $\\Omega$ 或 $S$ 表示\n  - 样本空间中的基本事件是有限的，可能是可数或者不可数\n  - 必然事件($\\Omega$)：在试验中一定会发生的事件 \n  - 不可能事件($\\Phi$)：在实验中不可能发生的事件\n\n# 二、事件的运算\n\n事件与集合一一对应，事件是集合（集合元素是基本事件），基本事件是空间中的点；事件的运算转成集合的运算\n\n- 子事件\n- 事件的和 $A\\bigcup B$\n- 事件的积 $A\\bigcap B$\n- 对立事件(余事件) $\\overline{A}$\n- 事件A和事件B的差 $A-B$\n- $De Morgan$ 对偶法则\n\n# 三、概率的定义及性质\n\n- 概率的定义1：随机事件发生可能性大小的数学表征，其值在0 - 1之间，换句话说，概率是事件的函数。从集合到实数的一个映射。\n- 概率的定义2：古典概型。\n  - 古典概型的两个基本条件\n    - 有限性：随机试验的结果只有有限个（n个）\n    - 等可能性：每个基本事件发生的可能性相同\n  - 概率的计算，若事件A包含m个基本事件，则定义A的概率为$\\frac{m}{n}$\n- 概率的定义3：统计定义（频率派）\n  - 古典概型的两个条件往往不能满足。\n  - 独立重复做n次随机试验，n足够大，用事件A发生的频率作为其概率\n- 概率的定义4：主观概率（Bayer派）\n  - 人们常谈论种种事件出现机会的大小，如某人有80%的可能性办成某事。而另一人则可能认为仅有50%的可能性。 即我们常常会拿一个数字去估计这类事件发生的可能性，而心目中并不把它与频率挂钩。\n  - 但是当前用频率来定义概率的频率派仍是数理统计的主流。焦点是频率派认为概率是客观存在，不可能因人而异。\n- 概率的定义5：公理化定义\n  - 仅对概率运算规定一些简单的基本法则\n    - 设A是随机事件，则 $0 \\leq P(A) \\leq 1$\n    - 必然事件的概率为1\n    - 若事件AB不相容，则 $P(A+B) = P(A) + P(B)$\n    - 若事件AB相容，则 $P(A+B) = P(A) + P(B) - P(AB)$\n- 古典概型的计算要点：\n  - 选择合适的样本空间\n  - 运用排列组合\n\n\n\n# 四、条件概率\n\n- 定义：在一次试验中，在某事件B发生的条件下，事件A发生的概率\n- 经典问题：卡片问题，有三张卡片，第一张两面都是黑色，第二张两面都是白色，第三张一黑一白。现在随机抽一张牌，这张牌黑色向上，问黑色向下的概率是多少？答案是2/3，白色向下的概率是1/3\n- 计算：$P(A \\mid B) = \\frac{P(AB)}{P(B)}$ \n  - 从下面的图可以看出，B发生下A发生的概率是指AB这部分占B的比例。条件概率和无条件概率的区别在于，事件A的样本空间发生了变化。\n  - {% asset_img condition_proba.png %}\n  - 推出：$P(AB) = P(A\\mid B) * P(B)$\n  - 乘法公式： $$P(A_1A_2A_3 ... A_n) = P(A_1) * P(A_2\\mid A_1) * P(A_3\\mid A_1A_2) * ... * P(A_n\\mid A_1A_2...A_{n-1})$$\n  - 例题1：一个电话，忘了最后一位，求三次之内打通电话的概率\n    - 设A是事件三次之内打通电话，A的对立事件是前三次都没有打通电话，令$A_i$为第 $i$ 次打通电话，则$$P(A) = 1- P(\\overline{A_1}) * P(\\overline{A_2} \\mid \\overline{A_1}) *P(\\overline{A_3} \\mid \\overline{A_1A_2})  = 1 - \\frac{9}{10} * \\frac{8}{9} * \\frac{7}{8} = 0.3$$\n  - 例题2：有a个红球，b个黑球，问第k次抽到红球的概率\n    - 解法1：将问题转变成，有 $a+b$ 个格子，往里面放球，求第 $k$ 个格子是红球的概率，样本空间为 $a+b$ 个格子中球的摆放情况，总情况个数 $(a+b)!$，第 $k$ 个格子为红球的情况：可以往第 $k$ 个格子放一个红球，剩下 $a+b-1$ 个格子的情况为 $(a+b-1)!$ ，因此概率为 $\\frac{(a+b-1)!}{(a+b)!} = \\frac{a}{a+b}$ \n    - 解法2：先简化问题，假设只有1个红球，$b$ 个黑球，求问第 $k$ 次抽到红球的概率，第 $k$ 次抽到红球，意味着前面 $k-1$ 次抽到的都是黑球，利用上面的乘法公式，设 $A_i$为第 $i$ 次抽到黑球，$A$ 为第 $k$ 次抽到红球，则$$P(A) = P(A_1) * P(A_2 \\mid A_1) * P(A_3 \\mid A_1A_2) * ... * P(\\overline{A_k} \\mid A_1A_2...A_{k-1})\n    = \\frac{b}{b+1} *\\frac{b-1}{b} * \\frac{b-2}{b-1}$$ $$* ... * \\frac{1}{b-k+1} = \\frac{1}{b+1}$$，所以跟 $k$ 无关。\n      现在问题升级为 $a$ 个红球，$b$ 个黑球，我们可以将问题转成第 $k$ 次抽到红球一号或者红球二号或者红球三号或红球 $a$ 号的概率，显然不同红球之间是相互独立，因此整体概率等于各自概率之和，上面已经算过1个红球的情况，因此相加后概率为 $\\frac{a}{a+b}$\n\n\n\n# 五、全概率公式\n\n- partition 定义：分割，或者完备事件群，假设样本空间为 $S$，$B_1 + B_2 + ... + B_n = S$，且 $B_i$之间不相容，那么称 ${B_1, B_2, ... , B_n}$ 为 $S$ 的一个分割。\n- 一个自然的分割是事件 $B$ 和事件 $\\overline{B}$。\n- 全概率公式：$S$ 的一个分割为 ${B_1, B_2, ... , B_n}$，某个事件为 $A$，$P(A) = \\sum P(A\\mid B_i) * P(B_i)$\n  - 推导过程\n    - $P(A) = P(AS) = P(A\\sum B_i ) = P(AB_1 \\bigcup AB_2 \\bigcup ... \\bigcup AB_n)$\n    - $P(A) = \\sum_1^n P(AB_i)$\n    - $P(A) = \\sum_1^n P(A \\mid B_i) * P(B_i)$\n- 注意这个不是全概率公式，但是结论确实很显然，$P(A\\mid B) + P(\\overline{A} \\mid B) = 1$\n\n\n\n# 六、贝叶斯公式\n\n- 贝叶斯公式就是**因果关系互换**\n- 设${B_1, B_2, ... , B_n}$是样本空间的一个分割，$A$ 为 $\\Omega$ 中的一个事件，则\n    $$P(B_i \\mid A) = \\frac{P(A \\mid B_i) * P(B_i)}{\\sum_1^n P(A \\mid B_i) * P(B_i)}$$ \n- 由公式可以知道，分母就是事件 $A$ 的概率，而分子和等式左边的条件概率中的条件正好反过来，所以我们知道在因果关系互换时必须用贝叶斯公式。\n\n\n\n# 七、事件的独立性\n\n- 为了计算两个事件同时发生的概率，可以运用乘法定理，$P(AB) = P(A \\mid B)P(B)$，什么情况下$P(AB) = P(A)P(B)$？即 $A$ 和 $B$ 同时发生的概率等于两个事件单独发生的概率乘积\n- 因此事件独立的定义为：如果$P(AB) = P(A)P(B)$，事件 $A$ 和 $B$ 相互独立。即$A$ 的发生与 $B$ 没有任何关系\n- $P(B) = P(B \\mid A)$意味着，无条件概率等于条件概率，意味着得到 $A$ 这个消息，对 $B$ 这个事件并没有任何作用\n- $AB$ 独立的话，$AB$ 的对立事件之间也是相互独立的\n  - 假设 $A_1, A_2, ..., A_n$ 是随机试验的 $n$ 个事件，他们之间相互独立，以 $B$ 表示 $A$ 或 $\\overline{A}$ 之一，那么下列 $2^n$ 个等式都会成立\n     $$P(B_1B_2...B_n) = P(B_1)P(B_2)...P(B_n)$$\n- 注意独立和不相容是两个完全不同的概念\n  - 不相容是指两个事件没有公共部分，独立肯定是相容的，因为独立的定义就是求两个事件的公共部分\n- 例题：A、B、C三个人打飞机，分别打中飞机的概率为0.4，0.5，0.7，飞机命中一炮，两炮，三炮被击落的概率为0.2、0.6、1。求飞机被击落的概率。\n  - 很直观的想法是用全概率公式，飞机被击中0123炮共4种情况，用全概率公式之前，先确定这四个情况是否是样本空间的一个分割，这显然是的，然后带入全概率公式\n  - 设事件 $X$ 为飞机被击落，事件 $B_i$ 为飞机被击中 $i$ 炮\n  - $$P(X) = P(X\\mid B_0) * P(B_0) + P(X \\mid B_1) * P(B_1) + P(X \\mid B_2) * P(B_2) + P(X \\mid B_3) * P(B_3)$$\n  - $P(X \\mid B_0) * P(B_0) = 0$，第一项忽略\n  - 求$P(B_1)$，注意$P(B_1) \\neq P(A+B+C)$，后者表示的是至少打中一炮，所以\n    - $P(B_1) = P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C)$\n    - 首先ABC三人分别打中与否是相互独立的，因此他们的对立事件也是，\n      - 所以 $$P(A\\overline{B}\\overline{C}) = P(A) * P(\\overline{B}) * P(\\overline{C})$$ \n    - 其次$A\\overline{B}\\overline{C}$  和 $\\overline{A}B\\overline{C}$两个之间是不相容的，为什么？因为出现事件 $A$ 和事件 $\\overline{A}$，所以肯定没有公共部分，所以不相容的话，概率相加\n      - $P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C) = P(A\\overline{B}\\overline{C}) + P(\\overline{A}B\\overline{C}) + P(\\overline{A}\\overline{B}C)$\n  - 求 $P(B_2)$ 一样的道理\n\n<br>","source":"_posts/【概率论与数理统计】——事件与概率.md","raw":"---\ntitle: 【概率论与数理统计】——事件与概率\ndate: 2018-08-27 15:21:09\nmathjax: true\ntags:\n- 概率论\n---\n\n> 课程名称：概率论与数理统计\n> 开设学校：中科大\n> 课程平台：icourse\n> 第一章：事件与概率，讲述概率论的基本概念\n\n<!-- more -->\n\n# 一、随机试验和随机事件\n\n- 随机试验：随机现象的实现和对它某特征的观测\n  - 随机试验的要求：结果至少有两个；每次只得到其中一种结果，且之前不能够预知；在相同条件下能重复试验。\n- 基本事件：随机试验中的每个单一结果。\n- 随机事件：简称事件，在随机试验中我们所关心的可能出现的各种结果，它由一个或若干个基本事件组成。\n- 样本空间：随机试验中所有基本事件所构成的集合，用 $\\Omega$ 或 $S$ 表示\n  - 样本空间中的基本事件是有限的，可能是可数或者不可数\n  - 必然事件($\\Omega$)：在试验中一定会发生的事件 \n  - 不可能事件($\\Phi$)：在实验中不可能发生的事件\n\n# 二、事件的运算\n\n事件与集合一一对应，事件是集合（集合元素是基本事件），基本事件是空间中的点；事件的运算转成集合的运算\n\n- 子事件\n- 事件的和 $A\\bigcup B$\n- 事件的积 $A\\bigcap B$\n- 对立事件(余事件) $\\overline{A}$\n- 事件A和事件B的差 $A-B$\n- $De Morgan$ 对偶法则\n\n# 三、概率的定义及性质\n\n- 概率的定义1：随机事件发生可能性大小的数学表征，其值在0 - 1之间，换句话说，概率是事件的函数。从集合到实数的一个映射。\n- 概率的定义2：古典概型。\n  - 古典概型的两个基本条件\n    - 有限性：随机试验的结果只有有限个（n个）\n    - 等可能性：每个基本事件发生的可能性相同\n  - 概率的计算，若事件A包含m个基本事件，则定义A的概率为$\\frac{m}{n}$\n- 概率的定义3：统计定义（频率派）\n  - 古典概型的两个条件往往不能满足。\n  - 独立重复做n次随机试验，n足够大，用事件A发生的频率作为其概率\n- 概率的定义4：主观概率（Bayer派）\n  - 人们常谈论种种事件出现机会的大小，如某人有80%的可能性办成某事。而另一人则可能认为仅有50%的可能性。 即我们常常会拿一个数字去估计这类事件发生的可能性，而心目中并不把它与频率挂钩。\n  - 但是当前用频率来定义概率的频率派仍是数理统计的主流。焦点是频率派认为概率是客观存在，不可能因人而异。\n- 概率的定义5：公理化定义\n  - 仅对概率运算规定一些简单的基本法则\n    - 设A是随机事件，则 $0 \\leq P(A) \\leq 1$\n    - 必然事件的概率为1\n    - 若事件AB不相容，则 $P(A+B) = P(A) + P(B)$\n    - 若事件AB相容，则 $P(A+B) = P(A) + P(B) - P(AB)$\n- 古典概型的计算要点：\n  - 选择合适的样本空间\n  - 运用排列组合\n\n\n\n# 四、条件概率\n\n- 定义：在一次试验中，在某事件B发生的条件下，事件A发生的概率\n- 经典问题：卡片问题，有三张卡片，第一张两面都是黑色，第二张两面都是白色，第三张一黑一白。现在随机抽一张牌，这张牌黑色向上，问黑色向下的概率是多少？答案是2/3，白色向下的概率是1/3\n- 计算：$P(A \\mid B) = \\frac{P(AB)}{P(B)}$ \n  - 从下面的图可以看出，B发生下A发生的概率是指AB这部分占B的比例。条件概率和无条件概率的区别在于，事件A的样本空间发生了变化。\n  - {% asset_img condition_proba.png %}\n  - 推出：$P(AB) = P(A\\mid B) * P(B)$\n  - 乘法公式： $$P(A_1A_2A_3 ... A_n) = P(A_1) * P(A_2\\mid A_1) * P(A_3\\mid A_1A_2) * ... * P(A_n\\mid A_1A_2...A_{n-1})$$\n  - 例题1：一个电话，忘了最后一位，求三次之内打通电话的概率\n    - 设A是事件三次之内打通电话，A的对立事件是前三次都没有打通电话，令$A_i$为第 $i$ 次打通电话，则$$P(A) = 1- P(\\overline{A_1}) * P(\\overline{A_2} \\mid \\overline{A_1}) *P(\\overline{A_3} \\mid \\overline{A_1A_2})  = 1 - \\frac{9}{10} * \\frac{8}{9} * \\frac{7}{8} = 0.3$$\n  - 例题2：有a个红球，b个黑球，问第k次抽到红球的概率\n    - 解法1：将问题转变成，有 $a+b$ 个格子，往里面放球，求第 $k$ 个格子是红球的概率，样本空间为 $a+b$ 个格子中球的摆放情况，总情况个数 $(a+b)!$，第 $k$ 个格子为红球的情况：可以往第 $k$ 个格子放一个红球，剩下 $a+b-1$ 个格子的情况为 $(a+b-1)!$ ，因此概率为 $\\frac{(a+b-1)!}{(a+b)!} = \\frac{a}{a+b}$ \n    - 解法2：先简化问题，假设只有1个红球，$b$ 个黑球，求问第 $k$ 次抽到红球的概率，第 $k$ 次抽到红球，意味着前面 $k-1$ 次抽到的都是黑球，利用上面的乘法公式，设 $A_i$为第 $i$ 次抽到黑球，$A$ 为第 $k$ 次抽到红球，则$$P(A) = P(A_1) * P(A_2 \\mid A_1) * P(A_3 \\mid A_1A_2) * ... * P(\\overline{A_k} \\mid A_1A_2...A_{k-1})\n    = \\frac{b}{b+1} *\\frac{b-1}{b} * \\frac{b-2}{b-1}$$ $$* ... * \\frac{1}{b-k+1} = \\frac{1}{b+1}$$，所以跟 $k$ 无关。\n      现在问题升级为 $a$ 个红球，$b$ 个黑球，我们可以将问题转成第 $k$ 次抽到红球一号或者红球二号或者红球三号或红球 $a$ 号的概率，显然不同红球之间是相互独立，因此整体概率等于各自概率之和，上面已经算过1个红球的情况，因此相加后概率为 $\\frac{a}{a+b}$\n\n\n\n# 五、全概率公式\n\n- partition 定义：分割，或者完备事件群，假设样本空间为 $S$，$B_1 + B_2 + ... + B_n = S$，且 $B_i$之间不相容，那么称 ${B_1, B_2, ... , B_n}$ 为 $S$ 的一个分割。\n- 一个自然的分割是事件 $B$ 和事件 $\\overline{B}$。\n- 全概率公式：$S$ 的一个分割为 ${B_1, B_2, ... , B_n}$，某个事件为 $A$，$P(A) = \\sum P(A\\mid B_i) * P(B_i)$\n  - 推导过程\n    - $P(A) = P(AS) = P(A\\sum B_i ) = P(AB_1 \\bigcup AB_2 \\bigcup ... \\bigcup AB_n)$\n    - $P(A) = \\sum_1^n P(AB_i)$\n    - $P(A) = \\sum_1^n P(A \\mid B_i) * P(B_i)$\n- 注意这个不是全概率公式，但是结论确实很显然，$P(A\\mid B) + P(\\overline{A} \\mid B) = 1$\n\n\n\n# 六、贝叶斯公式\n\n- 贝叶斯公式就是**因果关系互换**\n- 设${B_1, B_2, ... , B_n}$是样本空间的一个分割，$A$ 为 $\\Omega$ 中的一个事件，则\n    $$P(B_i \\mid A) = \\frac{P(A \\mid B_i) * P(B_i)}{\\sum_1^n P(A \\mid B_i) * P(B_i)}$$ \n- 由公式可以知道，分母就是事件 $A$ 的概率，而分子和等式左边的条件概率中的条件正好反过来，所以我们知道在因果关系互换时必须用贝叶斯公式。\n\n\n\n# 七、事件的独立性\n\n- 为了计算两个事件同时发生的概率，可以运用乘法定理，$P(AB) = P(A \\mid B)P(B)$，什么情况下$P(AB) = P(A)P(B)$？即 $A$ 和 $B$ 同时发生的概率等于两个事件单独发生的概率乘积\n- 因此事件独立的定义为：如果$P(AB) = P(A)P(B)$，事件 $A$ 和 $B$ 相互独立。即$A$ 的发生与 $B$ 没有任何关系\n- $P(B) = P(B \\mid A)$意味着，无条件概率等于条件概率，意味着得到 $A$ 这个消息，对 $B$ 这个事件并没有任何作用\n- $AB$ 独立的话，$AB$ 的对立事件之间也是相互独立的\n  - 假设 $A_1, A_2, ..., A_n$ 是随机试验的 $n$ 个事件，他们之间相互独立，以 $B$ 表示 $A$ 或 $\\overline{A}$ 之一，那么下列 $2^n$ 个等式都会成立\n     $$P(B_1B_2...B_n) = P(B_1)P(B_2)...P(B_n)$$\n- 注意独立和不相容是两个完全不同的概念\n  - 不相容是指两个事件没有公共部分，独立肯定是相容的，因为独立的定义就是求两个事件的公共部分\n- 例题：A、B、C三个人打飞机，分别打中飞机的概率为0.4，0.5，0.7，飞机命中一炮，两炮，三炮被击落的概率为0.2、0.6、1。求飞机被击落的概率。\n  - 很直观的想法是用全概率公式，飞机被击中0123炮共4种情况，用全概率公式之前，先确定这四个情况是否是样本空间的一个分割，这显然是的，然后带入全概率公式\n  - 设事件 $X$ 为飞机被击落，事件 $B_i$ 为飞机被击中 $i$ 炮\n  - $$P(X) = P(X\\mid B_0) * P(B_0) + P(X \\mid B_1) * P(B_1) + P(X \\mid B_2) * P(B_2) + P(X \\mid B_3) * P(B_3)$$\n  - $P(X \\mid B_0) * P(B_0) = 0$，第一项忽略\n  - 求$P(B_1)$，注意$P(B_1) \\neq P(A+B+C)$，后者表示的是至少打中一炮，所以\n    - $P(B_1) = P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C)$\n    - 首先ABC三人分别打中与否是相互独立的，因此他们的对立事件也是，\n      - 所以 $$P(A\\overline{B}\\overline{C}) = P(A) * P(\\overline{B}) * P(\\overline{C})$$ \n    - 其次$A\\overline{B}\\overline{C}$  和 $\\overline{A}B\\overline{C}$两个之间是不相容的，为什么？因为出现事件 $A$ 和事件 $\\overline{A}$，所以肯定没有公共部分，所以不相容的话，概率相加\n      - $P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C) = P(A\\overline{B}\\overline{C}) + P(\\overline{A}B\\overline{C}) + P(\\overline{A}\\overline{B}C)$\n  - 求 $P(B_2)$ 一样的道理\n\n<br>","slug":"【概率论与数理统计】——事件与概率","published":1,"updated":"2018-10-10T02:40:32.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gbw0001akw2jm22tqjd","content":"<blockquote>\n<p>课程名称：概率论与数理统计<br>开设学校：中科大<br>课程平台：icourse<br>第一章：事件与概率，讲述概率论的基本概念</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"一、随机试验和随机事件\"><a href=\"#一、随机试验和随机事件\" class=\"headerlink\" title=\"一、随机试验和随机事件\"></a>一、随机试验和随机事件</h1><ul>\n<li>随机试验：随机现象的实现和对它某特征的观测<ul>\n<li>随机试验的要求：结果至少有两个；每次只得到其中一种结果，且之前不能够预知；在相同条件下能重复试验。</li>\n</ul>\n</li>\n<li>基本事件：随机试验中的每个单一结果。</li>\n<li>随机事件：简称事件，在随机试验中我们所关心的可能出现的各种结果，它由一个或若干个基本事件组成。</li>\n<li>样本空间：随机试验中所有基本事件所构成的集合，用 $\\Omega$ 或 $S$ 表示<ul>\n<li>样本空间中的基本事件是有限的，可能是可数或者不可数</li>\n<li>必然事件($\\Omega$)：在试验中一定会发生的事件 </li>\n<li>不可能事件($\\Phi$)：在实验中不可能发生的事件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、事件的运算\"><a href=\"#二、事件的运算\" class=\"headerlink\" title=\"二、事件的运算\"></a>二、事件的运算</h1><p>事件与集合一一对应，事件是集合（集合元素是基本事件），基本事件是空间中的点；事件的运算转成集合的运算</p>\n<ul>\n<li>子事件</li>\n<li>事件的和 $A\\bigcup B$</li>\n<li>事件的积 $A\\bigcap B$</li>\n<li>对立事件(余事件) $\\overline{A}$</li>\n<li>事件A和事件B的差 $A-B$</li>\n<li>$De Morgan$ 对偶法则</li>\n</ul>\n<h1 id=\"三、概率的定义及性质\"><a href=\"#三、概率的定义及性质\" class=\"headerlink\" title=\"三、概率的定义及性质\"></a>三、概率的定义及性质</h1><ul>\n<li>概率的定义1：随机事件发生可能性大小的数学表征，其值在0 - 1之间，换句话说，概率是事件的函数。从集合到实数的一个映射。</li>\n<li>概率的定义2：古典概型。<ul>\n<li>古典概型的两个基本条件<ul>\n<li>有限性：随机试验的结果只有有限个（n个）</li>\n<li>等可能性：每个基本事件发生的可能性相同</li>\n</ul>\n</li>\n<li>概率的计算，若事件A包含m个基本事件，则定义A的概率为$\\frac{m}{n}$</li>\n</ul>\n</li>\n<li>概率的定义3：统计定义（频率派）<ul>\n<li>古典概型的两个条件往往不能满足。</li>\n<li>独立重复做n次随机试验，n足够大，用事件A发生的频率作为其概率</li>\n</ul>\n</li>\n<li>概率的定义4：主观概率（Bayer派）<ul>\n<li>人们常谈论种种事件出现机会的大小，如某人有80%的可能性办成某事。而另一人则可能认为仅有50%的可能性。 即我们常常会拿一个数字去估计这类事件发生的可能性，而心目中并不把它与频率挂钩。</li>\n<li>但是当前用频率来定义概率的频率派仍是数理统计的主流。焦点是频率派认为概率是客观存在，不可能因人而异。</li>\n</ul>\n</li>\n<li>概率的定义5：公理化定义<ul>\n<li>仅对概率运算规定一些简单的基本法则<ul>\n<li>设A是随机事件，则 $0 \\leq P(A) \\leq 1$</li>\n<li>必然事件的概率为1</li>\n<li>若事件AB不相容，则 $P(A+B) = P(A) + P(B)$</li>\n<li>若事件AB相容，则 $P(A+B) = P(A) + P(B) - P(AB)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>古典概型的计算要点：<ul>\n<li>选择合适的样本空间</li>\n<li>运用排列组合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"四、条件概率\"><a href=\"#四、条件概率\" class=\"headerlink\" title=\"四、条件概率\"></a>四、条件概率</h1><ul>\n<li>定义：在一次试验中，在某事件B发生的条件下，事件A发生的概率</li>\n<li>经典问题：卡片问题，有三张卡片，第一张两面都是黑色，第二张两面都是白色，第三张一黑一白。现在随机抽一张牌，这张牌黑色向上，问黑色向下的概率是多少？答案是2/3，白色向下的概率是1/3</li>\n<li>计算：$P(A \\mid B) = \\frac{P(AB)}{P(B)}$ <ul>\n<li>从下面的图可以看出，B发生下A发生的概率是指AB这部分占B的比例。条件概率和无条件概率的区别在于，事件A的样本空间发生了变化。</li>\n<li><img src=\"/2018/08/27/【概率论与数理统计】——事件与概率/condition_proba.png\"></li>\n<li>推出：$P(AB) = P(A\\mid B) * P(B)$</li>\n<li>乘法公式： <script type=\"math/tex\">P(A_1A_2A_3 ... A_n) = P(A_1) * P(A_2\\mid A_1) * P(A_3\\mid A_1A_2) * ... * P(A_n\\mid A_1A_2...A_{n-1})</script></li>\n<li>例题1：一个电话，忘了最后一位，求三次之内打通电话的概率<ul>\n<li>设A是事件三次之内打通电话，A的对立事件是前三次都没有打通电话，令$A_i$为第 $i$ 次打通电话，则<script type=\"math/tex\">P(A) = 1- P(\\overline{A_1}) * P(\\overline{A_2} \\mid \\overline{A_1}) *P(\\overline{A_3} \\mid \\overline{A_1A_2})  = 1 - \\frac{9}{10} * \\frac{8}{9} * \\frac{7}{8} = 0.3</script></li>\n</ul>\n</li>\n<li>例题2：有a个红球，b个黑球，问第k次抽到红球的概率<ul>\n<li>解法1：将问题转变成，有 $a+b$ 个格子，往里面放球，求第 $k$ 个格子是红球的概率，样本空间为 $a+b$ 个格子中球的摆放情况，总情况个数 $(a+b)!$，第 $k$ 个格子为红球的情况：可以往第 $k$ 个格子放一个红球，剩下 $a+b-1$ 个格子的情况为 $(a+b-1)!$ ，因此概率为 $\\frac{(a+b-1)!}{(a+b)!} = \\frac{a}{a+b}$ </li>\n<li>解法2：先简化问题，假设只有1个红球，$b$ 个黑球，求问第 $k$ 次抽到红球的概率，第 $k$ 次抽到红球，意味着前面 $k-1$ 次抽到的都是黑球，利用上面的乘法公式，设 $A_i$为第 $i$ 次抽到黑球，$A$ 为第 $k$ 次抽到红球，则<script type=\"math/tex\">P(A) = P(A_1) * P(A_2 \\mid A_1) * P(A_3 \\mid A_1A_2) * ... * P(\\overline{A_k} \\mid A_1A_2...A_{k-1})\n= \\frac{b}{b+1} *\\frac{b-1}{b} * \\frac{b-2}{b-1}</script> <script type=\"math/tex\">* ... * \\frac{1}{b-k+1} = \\frac{1}{b+1}</script>，所以跟 $k$ 无关。<br>现在问题升级为 $a$ 个红球，$b$ 个黑球，我们可以将问题转成第 $k$ 次抽到红球一号或者红球二号或者红球三号或红球 $a$ 号的概率，显然不同红球之间是相互独立，因此整体概率等于各自概率之和，上面已经算过1个红球的情况，因此相加后概率为 $\\frac{a}{a+b}$</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"五、全概率公式\"><a href=\"#五、全概率公式\" class=\"headerlink\" title=\"五、全概率公式\"></a>五、全概率公式</h1><ul>\n<li>partition 定义：分割，或者完备事件群，假设样本空间为 $S$，$B_1 + B_2 + … + B_n = S$，且 $B_i$之间不相容，那么称 ${B_1, B_2, … , B_n}$ 为 $S$ 的一个分割。</li>\n<li>一个自然的分割是事件 $B$ 和事件 $\\overline{B}$。</li>\n<li>全概率公式：$S$ 的一个分割为 ${B_1, B_2, … , B_n}$，某个事件为 $A$，$P(A) = \\sum P(A\\mid B_i) * P(B_i)$<ul>\n<li>推导过程<ul>\n<li>$P(A) = P(AS) = P(A\\sum B_i ) = P(AB_1 \\bigcup AB_2 \\bigcup … \\bigcup AB_n)$</li>\n<li>$P(A) = \\sum_1^n P(AB_i)$</li>\n<li>$P(A) = \\sum_1^n P(A \\mid B_i) * P(B_i)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意这个不是全概率公式，但是结论确实很显然，$P(A\\mid B) + P(\\overline{A} \\mid B) = 1$</li>\n</ul>\n<h1 id=\"六、贝叶斯公式\"><a href=\"#六、贝叶斯公式\" class=\"headerlink\" title=\"六、贝叶斯公式\"></a>六、贝叶斯公式</h1><ul>\n<li>贝叶斯公式就是<strong>因果关系互换</strong></li>\n<li>设${B_1, B_2, … , B_n}$是样本空间的一个分割，$A$ 为 $\\Omega$ 中的一个事件，则<script type=\"math/tex; mode=display\">P(B_i \\mid A) = \\frac{P(A \\mid B_i) * P(B_i)}{\\sum_1^n P(A \\mid B_i) * P(B_i)}</script></li>\n<li>由公式可以知道，分母就是事件 $A$ 的概率，而分子和等式左边的条件概率中的条件正好反过来，所以我们知道在因果关系互换时必须用贝叶斯公式。</li>\n</ul>\n<h1 id=\"七、事件的独立性\"><a href=\"#七、事件的独立性\" class=\"headerlink\" title=\"七、事件的独立性\"></a>七、事件的独立性</h1><ul>\n<li>为了计算两个事件同时发生的概率，可以运用乘法定理，$P(AB) = P(A \\mid B)P(B)$，什么情况下$P(AB) = P(A)P(B)$？即 $A$ 和 $B$ 同时发生的概率等于两个事件单独发生的概率乘积</li>\n<li>因此事件独立的定义为：如果$P(AB) = P(A)P(B)$，事件 $A$ 和 $B$ 相互独立。即$A$ 的发生与 $B$ 没有任何关系</li>\n<li>$P(B) = P(B \\mid A)$意味着，无条件概率等于条件概率，意味着得到 $A$ 这个消息，对 $B$ 这个事件并没有任何作用</li>\n<li>$AB$ 独立的话，$AB$ 的对立事件之间也是相互独立的<ul>\n<li>假设 $A_1, A_2, …, A_n$ 是随机试验的 $n$ 个事件，他们之间相互独立，以 $B$ 表示 $A$ 或 $\\overline{A}$ 之一，那么下列 $2^n$ 个等式都会成立<script type=\"math/tex; mode=display\">P(B_1B_2...B_n) = P(B_1)P(B_2)...P(B_n)</script></li>\n</ul>\n</li>\n<li>注意独立和不相容是两个完全不同的概念<ul>\n<li>不相容是指两个事件没有公共部分，独立肯定是相容的，因为独立的定义就是求两个事件的公共部分</li>\n</ul>\n</li>\n<li>例题：A、B、C三个人打飞机，分别打中飞机的概率为0.4，0.5，0.7，飞机命中一炮，两炮，三炮被击落的概率为0.2、0.6、1。求飞机被击落的概率。<ul>\n<li>很直观的想法是用全概率公式，飞机被击中0123炮共4种情况，用全概率公式之前，先确定这四个情况是否是样本空间的一个分割，这显然是的，然后带入全概率公式</li>\n<li>设事件 $X$ 为飞机被击落，事件 $B_i$ 为飞机被击中 $i$ 炮</li>\n<li><script type=\"math/tex; mode=display\">P(X) = P(X\\mid B_0) * P(B_0) + P(X \\mid B_1) * P(B_1) + P(X \\mid B_2) * P(B_2) + P(X \\mid B_3) * P(B_3)</script></li>\n<li>$P(X \\mid B_0) * P(B_0) = 0$，第一项忽略</li>\n<li>求$P(B_1)$，注意$P(B_1) \\neq P(A+B+C)$，后者表示的是至少打中一炮，所以<ul>\n<li>$P(B_1) = P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C)$</li>\n<li>首先ABC三人分别打中与否是相互独立的，因此他们的对立事件也是，<ul>\n<li>所以 <script type=\"math/tex\">P(A\\overline{B}\\overline{C}) = P(A) * P(\\overline{B}) * P(\\overline{C})</script> </li>\n</ul>\n</li>\n<li>其次$A\\overline{B}\\overline{C}$  和 $\\overline{A}B\\overline{C}$两个之间是不相容的，为什么？因为出现事件 $A$ 和事件 $\\overline{A}$，所以肯定没有公共部分，所以不相容的话，概率相加<ul>\n<li>$P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C) = P(A\\overline{B}\\overline{C}) + P(\\overline{A}B\\overline{C}) + P(\\overline{A}\\overline{B}C)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>求 $P(B_2)$ 一样的道理</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>课程名称：概率论与数理统计<br>开设学校：中科大<br>课程平台：icourse<br>第一章：事件与概率，讲述概率论的基本概念</p>\n</blockquote>","more":"<h1 id=\"一、随机试验和随机事件\"><a href=\"#一、随机试验和随机事件\" class=\"headerlink\" title=\"一、随机试验和随机事件\"></a>一、随机试验和随机事件</h1><ul>\n<li>随机试验：随机现象的实现和对它某特征的观测<ul>\n<li>随机试验的要求：结果至少有两个；每次只得到其中一种结果，且之前不能够预知；在相同条件下能重复试验。</li>\n</ul>\n</li>\n<li>基本事件：随机试验中的每个单一结果。</li>\n<li>随机事件：简称事件，在随机试验中我们所关心的可能出现的各种结果，它由一个或若干个基本事件组成。</li>\n<li>样本空间：随机试验中所有基本事件所构成的集合，用 $\\Omega$ 或 $S$ 表示<ul>\n<li>样本空间中的基本事件是有限的，可能是可数或者不可数</li>\n<li>必然事件($\\Omega$)：在试验中一定会发生的事件 </li>\n<li>不可能事件($\\Phi$)：在实验中不可能发生的事件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、事件的运算\"><a href=\"#二、事件的运算\" class=\"headerlink\" title=\"二、事件的运算\"></a>二、事件的运算</h1><p>事件与集合一一对应，事件是集合（集合元素是基本事件），基本事件是空间中的点；事件的运算转成集合的运算</p>\n<ul>\n<li>子事件</li>\n<li>事件的和 $A\\bigcup B$</li>\n<li>事件的积 $A\\bigcap B$</li>\n<li>对立事件(余事件) $\\overline{A}$</li>\n<li>事件A和事件B的差 $A-B$</li>\n<li>$De Morgan$ 对偶法则</li>\n</ul>\n<h1 id=\"三、概率的定义及性质\"><a href=\"#三、概率的定义及性质\" class=\"headerlink\" title=\"三、概率的定义及性质\"></a>三、概率的定义及性质</h1><ul>\n<li>概率的定义1：随机事件发生可能性大小的数学表征，其值在0 - 1之间，换句话说，概率是事件的函数。从集合到实数的一个映射。</li>\n<li>概率的定义2：古典概型。<ul>\n<li>古典概型的两个基本条件<ul>\n<li>有限性：随机试验的结果只有有限个（n个）</li>\n<li>等可能性：每个基本事件发生的可能性相同</li>\n</ul>\n</li>\n<li>概率的计算，若事件A包含m个基本事件，则定义A的概率为$\\frac{m}{n}$</li>\n</ul>\n</li>\n<li>概率的定义3：统计定义（频率派）<ul>\n<li>古典概型的两个条件往往不能满足。</li>\n<li>独立重复做n次随机试验，n足够大，用事件A发生的频率作为其概率</li>\n</ul>\n</li>\n<li>概率的定义4：主观概率（Bayer派）<ul>\n<li>人们常谈论种种事件出现机会的大小，如某人有80%的可能性办成某事。而另一人则可能认为仅有50%的可能性。 即我们常常会拿一个数字去估计这类事件发生的可能性，而心目中并不把它与频率挂钩。</li>\n<li>但是当前用频率来定义概率的频率派仍是数理统计的主流。焦点是频率派认为概率是客观存在，不可能因人而异。</li>\n</ul>\n</li>\n<li>概率的定义5：公理化定义<ul>\n<li>仅对概率运算规定一些简单的基本法则<ul>\n<li>设A是随机事件，则 $0 \\leq P(A) \\leq 1$</li>\n<li>必然事件的概率为1</li>\n<li>若事件AB不相容，则 $P(A+B) = P(A) + P(B)$</li>\n<li>若事件AB相容，则 $P(A+B) = P(A) + P(B) - P(AB)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>古典概型的计算要点：<ul>\n<li>选择合适的样本空间</li>\n<li>运用排列组合</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"四、条件概率\"><a href=\"#四、条件概率\" class=\"headerlink\" title=\"四、条件概率\"></a>四、条件概率</h1><ul>\n<li>定义：在一次试验中，在某事件B发生的条件下，事件A发生的概率</li>\n<li>经典问题：卡片问题，有三张卡片，第一张两面都是黑色，第二张两面都是白色，第三张一黑一白。现在随机抽一张牌，这张牌黑色向上，问黑色向下的概率是多少？答案是2/3，白色向下的概率是1/3</li>\n<li>计算：$P(A \\mid B) = \\frac{P(AB)}{P(B)}$ <ul>\n<li>从下面的图可以看出，B发生下A发生的概率是指AB这部分占B的比例。条件概率和无条件概率的区别在于，事件A的样本空间发生了变化。</li>\n<li><img src=\"/2018/08/27/【概率论与数理统计】——事件与概率/condition_proba.png\"></li>\n<li>推出：$P(AB) = P(A\\mid B) * P(B)$</li>\n<li>乘法公式： <script type=\"math/tex\">P(A_1A_2A_3 ... A_n) = P(A_1) * P(A_2\\mid A_1) * P(A_3\\mid A_1A_2) * ... * P(A_n\\mid A_1A_2...A_{n-1})</script></li>\n<li>例题1：一个电话，忘了最后一位，求三次之内打通电话的概率<ul>\n<li>设A是事件三次之内打通电话，A的对立事件是前三次都没有打通电话，令$A_i$为第 $i$ 次打通电话，则<script type=\"math/tex\">P(A) = 1- P(\\overline{A_1}) * P(\\overline{A_2} \\mid \\overline{A_1}) *P(\\overline{A_3} \\mid \\overline{A_1A_2})  = 1 - \\frac{9}{10} * \\frac{8}{9} * \\frac{7}{8} = 0.3</script></li>\n</ul>\n</li>\n<li>例题2：有a个红球，b个黑球，问第k次抽到红球的概率<ul>\n<li>解法1：将问题转变成，有 $a+b$ 个格子，往里面放球，求第 $k$ 个格子是红球的概率，样本空间为 $a+b$ 个格子中球的摆放情况，总情况个数 $(a+b)!$，第 $k$ 个格子为红球的情况：可以往第 $k$ 个格子放一个红球，剩下 $a+b-1$ 个格子的情况为 $(a+b-1)!$ ，因此概率为 $\\frac{(a+b-1)!}{(a+b)!} = \\frac{a}{a+b}$ </li>\n<li>解法2：先简化问题，假设只有1个红球，$b$ 个黑球，求问第 $k$ 次抽到红球的概率，第 $k$ 次抽到红球，意味着前面 $k-1$ 次抽到的都是黑球，利用上面的乘法公式，设 $A_i$为第 $i$ 次抽到黑球，$A$ 为第 $k$ 次抽到红球，则<script type=\"math/tex\">P(A) = P(A_1) * P(A_2 \\mid A_1) * P(A_3 \\mid A_1A_2) * ... * P(\\overline{A_k} \\mid A_1A_2...A_{k-1})\n= \\frac{b}{b+1} *\\frac{b-1}{b} * \\frac{b-2}{b-1}</script> <script type=\"math/tex\">* ... * \\frac{1}{b-k+1} = \\frac{1}{b+1}</script>，所以跟 $k$ 无关。<br>现在问题升级为 $a$ 个红球，$b$ 个黑球，我们可以将问题转成第 $k$ 次抽到红球一号或者红球二号或者红球三号或红球 $a$ 号的概率，显然不同红球之间是相互独立，因此整体概率等于各自概率之和，上面已经算过1个红球的情况，因此相加后概率为 $\\frac{a}{a+b}$</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"五、全概率公式\"><a href=\"#五、全概率公式\" class=\"headerlink\" title=\"五、全概率公式\"></a>五、全概率公式</h1><ul>\n<li>partition 定义：分割，或者完备事件群，假设样本空间为 $S$，$B_1 + B_2 + … + B_n = S$，且 $B_i$之间不相容，那么称 ${B_1, B_2, … , B_n}$ 为 $S$ 的一个分割。</li>\n<li>一个自然的分割是事件 $B$ 和事件 $\\overline{B}$。</li>\n<li>全概率公式：$S$ 的一个分割为 ${B_1, B_2, … , B_n}$，某个事件为 $A$，$P(A) = \\sum P(A\\mid B_i) * P(B_i)$<ul>\n<li>推导过程<ul>\n<li>$P(A) = P(AS) = P(A\\sum B_i ) = P(AB_1 \\bigcup AB_2 \\bigcup … \\bigcup AB_n)$</li>\n<li>$P(A) = \\sum_1^n P(AB_i)$</li>\n<li>$P(A) = \\sum_1^n P(A \\mid B_i) * P(B_i)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意这个不是全概率公式，但是结论确实很显然，$P(A\\mid B) + P(\\overline{A} \\mid B) = 1$</li>\n</ul>\n<h1 id=\"六、贝叶斯公式\"><a href=\"#六、贝叶斯公式\" class=\"headerlink\" title=\"六、贝叶斯公式\"></a>六、贝叶斯公式</h1><ul>\n<li>贝叶斯公式就是<strong>因果关系互换</strong></li>\n<li>设${B_1, B_2, … , B_n}$是样本空间的一个分割，$A$ 为 $\\Omega$ 中的一个事件，则<script type=\"math/tex; mode=display\">P(B_i \\mid A) = \\frac{P(A \\mid B_i) * P(B_i)}{\\sum_1^n P(A \\mid B_i) * P(B_i)}</script></li>\n<li>由公式可以知道，分母就是事件 $A$ 的概率，而分子和等式左边的条件概率中的条件正好反过来，所以我们知道在因果关系互换时必须用贝叶斯公式。</li>\n</ul>\n<h1 id=\"七、事件的独立性\"><a href=\"#七、事件的独立性\" class=\"headerlink\" title=\"七、事件的独立性\"></a>七、事件的独立性</h1><ul>\n<li>为了计算两个事件同时发生的概率，可以运用乘法定理，$P(AB) = P(A \\mid B)P(B)$，什么情况下$P(AB) = P(A)P(B)$？即 $A$ 和 $B$ 同时发生的概率等于两个事件单独发生的概率乘积</li>\n<li>因此事件独立的定义为：如果$P(AB) = P(A)P(B)$，事件 $A$ 和 $B$ 相互独立。即$A$ 的发生与 $B$ 没有任何关系</li>\n<li>$P(B) = P(B \\mid A)$意味着，无条件概率等于条件概率，意味着得到 $A$ 这个消息，对 $B$ 这个事件并没有任何作用</li>\n<li>$AB$ 独立的话，$AB$ 的对立事件之间也是相互独立的<ul>\n<li>假设 $A_1, A_2, …, A_n$ 是随机试验的 $n$ 个事件，他们之间相互独立，以 $B$ 表示 $A$ 或 $\\overline{A}$ 之一，那么下列 $2^n$ 个等式都会成立<script type=\"math/tex; mode=display\">P(B_1B_2...B_n) = P(B_1)P(B_2)...P(B_n)</script></li>\n</ul>\n</li>\n<li>注意独立和不相容是两个完全不同的概念<ul>\n<li>不相容是指两个事件没有公共部分，独立肯定是相容的，因为独立的定义就是求两个事件的公共部分</li>\n</ul>\n</li>\n<li>例题：A、B、C三个人打飞机，分别打中飞机的概率为0.4，0.5，0.7，飞机命中一炮，两炮，三炮被击落的概率为0.2、0.6、1。求飞机被击落的概率。<ul>\n<li>很直观的想法是用全概率公式，飞机被击中0123炮共4种情况，用全概率公式之前，先确定这四个情况是否是样本空间的一个分割，这显然是的，然后带入全概率公式</li>\n<li>设事件 $X$ 为飞机被击落，事件 $B_i$ 为飞机被击中 $i$ 炮</li>\n<li><script type=\"math/tex; mode=display\">P(X) = P(X\\mid B_0) * P(B_0) + P(X \\mid B_1) * P(B_1) + P(X \\mid B_2) * P(B_2) + P(X \\mid B_3) * P(B_3)</script></li>\n<li>$P(X \\mid B_0) * P(B_0) = 0$，第一项忽略</li>\n<li>求$P(B_1)$，注意$P(B_1) \\neq P(A+B+C)$，后者表示的是至少打中一炮，所以<ul>\n<li>$P(B_1) = P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C)$</li>\n<li>首先ABC三人分别打中与否是相互独立的，因此他们的对立事件也是，<ul>\n<li>所以 <script type=\"math/tex\">P(A\\overline{B}\\overline{C}) = P(A) * P(\\overline{B}) * P(\\overline{C})</script> </li>\n</ul>\n</li>\n<li>其次$A\\overline{B}\\overline{C}$  和 $\\overline{A}B\\overline{C}$两个之间是不相容的，为什么？因为出现事件 $A$ 和事件 $\\overline{A}$，所以肯定没有公共部分，所以不相容的话，概率相加<ul>\n<li>$P(A\\overline{B}\\overline{C} \\bigcup\\overline{A}B\\overline{C} \\bigcup\\overline{A}\\overline{B}C) = P(A\\overline{B}\\overline{C}) + P(\\overline{A}B\\overline{C}) + P(\\overline{A}\\overline{B}C)$</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>求 $P(B_2)$ 一样的道理</li>\n</ul>\n</li>\n</ul>\n<p><br></p>"},{"title":"【概率论与数理统计】————随机变量及其分布","date":"2018-09-04T13:25:03.000Z","mathjax":true,"_content":"\n> 课程名称：概率论与数理统计\n> 开设学校：中科大\n> 课程平台：icourse\n> 第二章：随机变量及其分布，讲述离散型和连续型随机变量的概念，离散随机变量分布律，常见的离散随机变量的概率分布；随机变量的分布函数和概率密度函数\n\n<!-- more -->\n\n\n\n# 1. 随机变量的概念\n\n之前我们研究的概率，是基于样本空间下的一个随机试验，研究其发生的概率，若我们要研究一连串的随机试验及其它发生的概率，往往这一连串的事件之间有联系，我们就可以引入随机变量，用一个数字或者一个区间来表示这一连串的随机事件，如 $X$ 表示抛 5 次硬币正面向上的次数，那么我们就可以用 $X=3$ 来表示 5 次有 3 次正面向上这一个随机事件；\n\n所以，随机变量就是一个数与一个事件的对应关系，相当于是一个随机变量的一个取值对应一个随机事件，随机变量的引入就是为了更加简洁地表示一个随机事件，不需要用一大串的文字描述。但是随机变量的引入更多是为了研究一连串相关的事件，而不只是随机变量某一取值时刻下的事件，往往是研究随机变量不同取值下的不同随机事件之间的联系。\n<br>\n# 2. 如何研究随机变量\n由于随机变量是表示一连串的事件，首先我们得确定随机变量可以取哪些值，即确定有哪些随机事件。其次我们需要研究随机变量取不同值下所表示的随机事件发生的概率。\n\n之前说到，我们用一个数字或者一个区间来表示一个随机事件，这里面就包含了两种随机变量：离散型随机变量和连续性随机变量，前者随机变量的取值是可数的或者有限的，后者不可数。\n<br>\n# 3. 离散随机变量的分布\n当随机变量取不同取值的时候，所表示的随机事件的概率会不同，对于离散型的随机变量，我们可以用表格的形式，列出不同取值下的概率，这就是随机变量的概率分布，即不同取值下所表示的随机事件的概率值，可以统一用以下的式子来表示。此式子叫做分布律\n\n $$P(X = x_k) = p_k，k = 1,2,...$$  \n\n\n且满足\n\n1. $p_k \\ge 0，k = 1,2,...$\n2. $\\sum_1^{+\\infty}p_k = 1$ \n\n或者用表格来表示\n\n|  $X$  | $x_1$ | $x_2$ | $x_3$ | $...$ |\n| :---: | :---: | :---: | :---: | ----- |\n| $p_k$ | $p_1$ | $p_2$ | $p_3$ | ...   |\n\n\n## 3.1 离散均匀分布\n- 分布律：$ P(X = x_k) = \\frac{1}{n}$， $k = 1,2,...,n $\n- 其实就是我们之前所说的古典概型，古典概型满足两个特性，有限性和等可能性，实际上描述的就是离散均匀分布，随机变量的每个取值对应一个基本事件，每一个基本事件的概率都是一样。\n\n## 3.2 二项分布\n- 在一次试验中事件 $A$ 发生的概率为 $p$ ，把这种试验重复做 $n$ 次，若把 $X$ 记为 $n$ 次试验中事件 $A$ 发生的次数，$X$ 可以取 $0-n$，$P(X = k) = C_n^k p^k (1-p)^{n-k}$ ，称 $X$ 服从二项分布，记为 $X \\sim B(n, p)$   $~$ \n{% asset_img 二项分布.png %}\n\n- 伯努利试验：一次试验中可能的结果为 $A$ 和 $A$ 的对立事件，重复做这样的试验\n\n- 若 $n=1$，则变为 $0-1$ 分布，或叫两点分布或伯努利分布，$X$ 只取0，1两个值，$P(X = 1) = p$, $P(X = 0) = 1 - p$，$X = 1$表示 $A$ 发生，$X = 0$ 表示 $A$ 不发生。两点分布是最简单的一种分布，任何一个只有两种可能结果的随机现象，如明天是否下雨，都属于两点分布\n\n- 任何概率分布都应该满足 $P(X = x_k) \\ge 0$,   $ \\sum_1^n P(X = x_k) = 1 $，二项分布也满足，二项式定理展开就可以证明\n\n  - $\\sum_1^n P(X = x_k) = \\sum_1^n C_n^{k} p^k(1-p)^{n-k} = (p + 1-p)^n = 1$\n\n- 求解 $P(X = x_k)$取最大值的 $k$ 值\n  - 令 $b_k = P(X = x_k)  = C_n^k p^k(1-p)^{n-k} = \\frac{n!}{k!(n-k)!}p^k(1-p)^{n-k}$ \n  - 最大值应该满足 $\\frac{b_k}{b_{k-1}} \\ge 1$ 且 $\\frac{b_{k}}{b_{k+1}} \\ge 1$\n  - 解得 $p(n+1)-1 \\le k \\le p(n+1)$  \n  - 若 $p(n+1)$ 为整数，则最大值时k有两个值\n\n- 例题：若100个人射飞机，射中飞机的概率为0.02，假设 $X$ 为射中飞机的人数，那么 $X \\sim B(100, 0.02)$ ，100个人本来是相互独立地射飞机，但是可以看成100次重复的随机试验，所以满足二项分布\n\n\n## 3.3 泊松分布\n- 分布律：$P(X = x_k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}$ \n- 描述稀有事件发生的概率，交通路口发生事故的次数满足泊松分布\n- 随机变量取值为：$[ 0, +\\infty)$ \n- 泊松分布可以作为二项分布的一种近似\n  - $X \\sim B(n, p)$，$n$ 很大，$p$ 很小，$np$ 较小，$P(X = k) = C_n^k p^k (1-p)^{n-k}\\approx e^{-\\lambda} \\frac{\\lambda^k}{k!}$, $\\lambda = np$ \n    - $P(X = k) = C_n^k p^k (1-p)^{n-k} = \\frac{n(n-1)...(n-k+1)}{k!}p^k(1-p)^{n-k}$  \n    - 因为 $p$ 很小，根据泰勒展开，$1 - p \\approx e^{-p}$ ，所以 $(1-p)^{n-k} \\approx e^{-p(n-k)}$ \n    - 由于泊松分布一般描述稀有事件，即 $k$ 较小，由因为 $n$ 很大，所以 $n - k \\approx n$ ，$e^{-p(n-k)} \\approx e^{-pn} = e^{-\\lambda}$ \n    -  同样因为 $k$ 较小，$n$ 很大，$\\frac{n(n-1)...(n-k+1)}{k!} p^k \\approx \\frac{(np)^k}{k!} = \\frac{\\lambda^k}{k!}$   \n  - 二项分布不好算，可以用泊松分布近似计算，从上面的推导可以看出 $k$ 不能很大\n  - $n$ 很大，$np$ 很小，准确点说 $n >30$，$np < 5$ 即可\n  {% asset_img 泊松分布.png %}\n\n\n\n二项分布当n等于1时，可以转成两点分布；当n很大，p很小的时候，可以转成泊松分布。\n\n<br>\n\n# 4. 分布函数和密度函数\n\n## 4.1 分布函数\n\n上面提到的都是离散型随机变量的概率分布 $P(X =x_k) = p_k,  k = 0,1,2,...$ ，离散型随机变量的取值是有限的或者是可数的，离散型变量的一个取值对应一个随机事件，而对于连续型变量，通常用一段区间来表示一个随机事件，如 $P(a < X \\le b)$，这个概率又可以表示为 $P(X \\le b) - P(X \\le a)$。\n\n- 定义：$P(X \\le x) = F(x)$，$-\\infty < x < +\\infty$。随机变量 $X$ 的分布函数\n\n- 分布函数直观来说就是表示随机变量取值小于某个值的概率，它具有以下几个性质\n  - 分布函数是非递减的，且 $lim_{x\\to -\\infty} F(x) =0$ ，$lim_{x\\to +\\infty} F(x) =1$，从分布函数的定义就可以看出。\n  - 离散型随机变量的分布函数不连续，因为离散变量的取值是有限的，因此分布函数会呈现出阶梯状，且是右连续的\n    - $F(x) = P(X \\le x)=\\sum_{x_{k} \\le x} P(X = x_k) $ \n  - 连续型随机变量的分布函数是连续且递增的，有了分布函数，某个区间的概率值就很容易计算，$P(a < X \\le b) = F(b) - F(a)$，\n{% asset_img 分布函数.png %}\n\n\n\n- 注意区分以下分布律和分布函数，分布律是描述离散随机变量遵循的分布，简单来说就是取不同值的概率；而分布函数是随机变量小于某个值的概率\n\n\n\n## 4.2 密度函数\n\n随机变量的分布函数 $F(x)$ 是描述随机变量取值小于某个值下的概率的函数，而随机变量的密度函数 $f(x)$ 满足以下几个条件，注意并不是所有的随机变量或者分布函数都有对应的密度函数，但是所有的随机变量都有分布函数\n\n1. $f(x)$ 是非负的\n2. $\\int_{-\\infty}^{+\\infty} f(x)dx=1$ \n3.  $F(x) = \\int_{-\\infty}^{x}f(t)dt$  \n\n从上面的定义可以看出，密度函数 $f(x)$ 是分布函数 $F(x)$ 的微分，而 $F(x)$ 是 $f(x)$ 的积分，所以计算以下概率可以转变成求密度函数的积分，注意无论是分布函数还是密度函数，还是分布律，他们都是服务于算概率的\n\n$$P(a < X \\le b) = F(b) - F(a) = \\int_a^b f(x)dx$$\n\n上面定义的第二点，也很容易理解，$\\int_{-\\infty}^{+\\infty} f(x)dx=F(+\\infty)-F(-\\infty)=1-0=1$  \n\n对于连续型随机变量 $P(X = a) = 0$，因为 $P(X = a) = lim_{h\\to 0} \\int_{a-h}^{a}f(x)dx=0$ \n\n分布函数连续不一定是连续型随机变量的分布函数，连续不一定可微，只有密度函数存在，才能说是连续随机变量\n\n## 4.3 总结一下\n\n对于离散型的随机变量，只可以取有限个或者可数个值，我们可以用分布律去描述它，$P(X = x_k) = p_k$   \n\n对于连续型的随机变量，我们用一个区间去表示一个随机事件，但由于区间涉及两个边界值，我们引入分布函数 $F(x)$ 描述随机变量取值小于某个值的概率，进而引入密度函数 $f(x)$，然后概率值就可以转化为求密度函数的积分值\n\n但是对于离散型随机变量，我们也可以研究它的分布函数，但是它没有概率密度函数，因为它的分布函数不可微\n\n\n\n\n<br>\n# 5. 连续随机变量的分布\n\n对于离散随机变量，我们可以用分布律来描述，对于连续型随机变量，我们可以用分布函数或密度函数来描述，分布律、分布函数、密度函数都是为了算概率而存在的\n\n## 5.1 均匀分布\n\n- 若一个随机变量的密度函数为以下的形式，则该随机变量服从均匀分布，$X \\sim U(a,b)$ \n\n  $$f(x)= \\left\\{\\begin{array}{cc} \n  \\frac{1}{b-a}, & a \\le x \\le b\\\\ \n  0, & other\\ values \n  \\end{array}\\right.$$  \n\n- 均匀分布可以用示性函数 $I$ 来表示，$f(x) = \\frac{1}{b-a}I_{a\\le x\\le b}(x)$ \n\n## 5.2 指数分布\n\n- 指数分布的随机变量，密度函数满足 $f(x) =\\lambda e^{-\\lambda x} I_{x \\ge 0}(x)$，$\\lambda > 0$，$X \\sim exp(\\lambda)$  \n\n  $$f(x)= \\left\\{\\begin{array}{cc} \n  \\lambda e^{-\\lambda x}, & x \\ge 0\\\\ \n  0, & x < 0 \n  \\end{array}\\right.$$ \n\n- $\\lambda$ 越大，密度函数下降得越快\n{% asset_img 指数分布.png %}\n\n- 指数分布最大的特点是无后效性，通常用来描述元件的寿命，即寿命是无老化的，假如我知道一个元件已经用了 $s$ 个小时，想知道原件能用 $s + t$ 个小时的概率，它就等于原件用 $t$ 个小时的概率\n  - $P(X > s+t \\mid X>s) = P(X >t)$  \n  - 证明：\n    - 令事件 $A$ 为 $X > s+t$，事件 $B$ 为 $X > s$，则 $P(A \\mid B) = \\frac{P(AB)}{P(B)}$  \n    - 可以看出 $B \\subset A$，所以 $P(AB) = P(A)$ \n    - $P(A) = \\int_{s+t}^{+\\infty} \\lambda e^{-\\lambda x}dx$ \n    - 令 $\\lambda x=u$，则 $P(A) = \\int_{\\lambda(s+t)}^{+\\infty} e^{-u}du = -e^{-u} \\mid_{\\lambda(s+t)}^{+\\infty} = e^{-\\lambda(s+t)}$  \n    - 同理，$P(B)=e^{-\\lambda s}$  \n    - 因此，$P(A \\mid B) = \\frac{P(A)}{P(B)} = e^{-\\lambda t} = P(X > t)$  \n\n\n\n## 5.3 正态分布\n\n- 密度函数满足 $f(x) = \\frac{1}{\\sqrt{2\\pi} \\sigma} exp(-\\frac{(x-\\mu)^2}{2\\sigma^2})$，$-\\infty < x < +\\infty$，记为 $X \\sim N(\\mu, \\sigma^2)$    \n- 密度函数的曲线有以下性质\n  - 对称函数，对称轴为 $x = \\mu$，对称轴左边单调递增，对称轴右边单调递减，极值落在 $x = \\mu$ 上，为$\\frac{1}{\\sqrt{2\\pi} \\sigma}$\n  - $\\sigma$ 的大小决定了密度函数的陡峭程度\n- 当 $\\mu = 0$，$\\sigma = 1$ 的时候，称为标准正态分布，密度函数记为 $\\phi(x)$，分布函数记为 $\\Phi(x)$ \n  - 分布函数 $\\Phi(x)$ 是密度函数 $\\phi(x)$ 的积分，$\\Phi(x) = \\int_{-\\infty}^x \\phi(t)dt$ \n  - $\\Phi(x) = 1 - \\Phi(-x)$，可以从密度函数 $\\phi(x)$ 算面积很容易证出。\n- 一般的正态分布 $X \\sim N(\\mu, \\sigma^2)$ 都可以转成标准正态分布 $X \\sim N(0, 1)$，其分布函数 $F(x) = \\Phi(\\frac{x-\\mu}{\\sigma})$ ，然后通过查标准正态分布表格来算出概率。\n\n\n<br>\n# 6. 多维随机变量\n\n多维随机变量也称随机向量，跟一维随机变量一样，多维随机变量就是多个随机事件的并集，或者说是多个事件的联合概率，像一维随机变量，我们同样关注多维随机向量的分布。\n\n## 6.1 二维离散型随机向量的分布\n\n$P(X=x_i, Y=y_j)=p_{i,j}$ \n\n 同样应该满足密度分布的基本条件\n\n1. $p_{i,j}>0$\n2. $\\sum\\sum p_{ij}=1$ \n\n## 6.2 二维连续型随机向量的分布\n\n类似一维随机变量，我们用分布函数来描述它的概率分布，$F(x,y)$ 称为随机向量 $(X,Y)$ 的联合分布函数。\n\n$F(x, y)=P(X \\le x, Y \\le y)$ \n\n将二维随机变量 $(X,Y)​$ 看成是平面上随机点的坐标，那么，分布函数 $F(x,y)​$ 在点 $(x,y)​$ 处的函数值就是下图无穷矩形域内的面积占整个平面的概率。\n{% asset_img 二维随机变量.png %}\n\n$F(x,y)$ 有如下性质：\n\n1. 给定 $y$，$F(x,y)$ 是 $x$ 的非减函数；给定 $x$, $F(x,y)$ 是 $y$ 的非减函数\n2. $\\lim_{x \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{y \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{x \\rightarrow +\\infty, y \\rightarrow +\\infty} F(x,y)=1$ \n3. $P(a<X \\le b, c < Y \\le d) = F(b,d) - F(a,d) - F(b,c) + F(a,c)$     \n4. $P(X \\le x_i) = P(X \\le x_i, Y \\le +\\infty) = F(x_i, +\\infty)$ \n5. $F(x,y)$ 分别是关于 $x$ 和 $y$ 右连续\n\n同样从分布函数引出概率密度函数，若对分布函数 $F(x,y)$，存在 $f(x,y) \\ge 0$，使得对任一 $(x,y) \\in R^2$，有 $F(x,y)=\\int_{-\\infty}^{x} \\int_{-\\infty}^{y} f(u,v)dudv$，则称 $F(x,y)$ 为连续型联合分布函数，$f(x,y)$ 为联合密度函数。 $f(x,y)$ 同样具有以下性质：\n\n1. $f(x,y) \\ge 0$  \n2. $\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ \n3. $\\frac{\\partial F(x,y)}{\\partial x \\partial y} = f(x,y)$ \n\n几何上，$z=f(x,y)$ 表示空间的一个曲面，$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ 表示介于 $f(x,y)$ 与 $xOy$  平面之间的空间区域的面积。\n{% asset_img 二维正态.png %}\n\n\n<br>\n# 7. 边缘分布(marginal distribution)\n\n- 定义：已知 $(X,Y)$ 的联合分布函数为 $F(x,y)$，则 $X$ 的分布 $F_1(x)$ 和 $Y$ 的分布 $F_2(y)$ 称为 $F(x,y)$ 的边缘分布\n  - $F_1(x)=P(X \\le x)=P(X \\le x, Y \\le +\\infty)=F(x, +\\infty)$ \n  - $F_2(y)=P(Y \\le y)=P(Y \\le y, X \\le +\\infty) = F(+\\infty, y)$ \n\n- 二维离散型随机变量的边缘分布\n  - 二维离散随机变量的分布一般以联表的形式表示\n  - 固定某个 $x_i$，$P(X=x_i) = \\sum_{j=1}^{m}p_{ij}$，联表每一行的求和就是随机变量 $X$ 的边缘分布，可记为 $p_{i\\bullet}$ \n  - 固定某个 $y_i$ ，$P(Y=y_j) = \\sum_{i=1}^{n}p_{ij}$ ，联表每一列的求和就是随机变量 $Y$ 的边缘分布，可记为 $p_{\\bullet j}$ \n\n- 二维连续型随机变量的边缘分布\n  - 二维连续随机变量的分布一般以概率密度函数的形式表示\n  - 从联合密度函数，求 $X$ 的密度函数，就需要将随机变量 $Y$ 从积分中去掉，$f_X(u) = \\int_{-\\infty}^{+\\infty}f(u,v)dv$ \n    - $F_X(x) = F(x, +\\infty)=\\int_{-\\infty}^x[\\int_{-\\infty}^{+\\infty}f(x,y)dy]dx=\\int_{-\\infty}^{x}f_X(x)dx$ \n  - 同理，求 $Y$ 的密度函数，，$f_Y(v) = \\int_{-\\infty}^{+\\infty}f(u,v)du$    \n\n- 二维正态分布的边缘分布就是一维正态分布\n\n- 注意：联合分布可以推出边缘分布，但是边缘分布不能推出联合分布，例子：一维正态分布推不出二维正态分布，二维正态分布还有一个参数 $\\rho$\n\n<br>\n# 8. 条件分布\n\n假设有两个随机变量 $X,Y$，在给定 $Y$ 取某个或某些值的条件下，$X$ 的概率分布就叫做 $Y = y_j$ 条件下 $X$ 的条件分布律。\n\n## 8.1 离散型随机变量的条件分布\n\n- 定义：设 $(X,Y)$ 为二维离散型随机变量，若对固定的 $j$ ，称 $P(X=x_i \\mid Y=y_j) = \\frac{p_{ij}}{p_{\\bullet j}}$ 为 $Y = y_j$ 条件下的 $X$ 的条件分布律；同理，对固定的 $i$ ，称 $P(Y=y_j \\mid X=x_i) = \\frac{p_{ij}}{p_{i\\bullet}}$  为 $X = x_i$ 条件下的 $Y$ 的条件分布律；\n- 条件分布是一种概率分布，它具有概率分布的一切性质，正如条件概率是一种概率，具有概率的一切性质一样。\n  - $P(X=x_i \\mid Y=y_j) \\ge 0$\n  - $\\sum_{i=1}^{\\infty} P(X=x_i \\mid Y=y_j) =1$ \n- 离散型随机变量的条件分布，就是在联合分布的联表的某一行或者某一列的分布。\n- 由条件分布和边缘分布，可以根据乘法公式，求得联合分布\n  - $P(X=x_i, Y=y_j) = P(X=x_i)P(Y=y_j \\mid X= x_i)$ \n\n## 8.2 连续型随机变量的条件分布\n\n- 定义：设 $X$ 和 $Y$ 的联合概率密度为 $f(x,y)$，$(X,Y)$ 关于 $Y$ 的边缘概率密度为 $f_Y(y)$，若对于固定的 $y$，$f_Y(y) >0$，则称 $\\frac{f(x,y)}{f_Y(y)}$ 为在 $Y = y$ 的条件下 $X$ 的条件概率密度，记为 $f_{X \\mid Y}(x \\mid y) = \\frac{f(x,y)}{f_Y(y)}$，同理，$f_{Y \\mid X}(y \\mid x) = \\frac{f(x,y)}{f_X(x)}$ \n\n- 由条件密度和边缘密度，可以得到联合密度\n  - $f(x,y)=f_X(x)f_{Y \\mid X}(y \\mid x)$ \n- 例题：从 [0,1] 中随机取一个数 $X$， 则 $X \\sim U(0,1)$，当 $X=x$ 时，再从 $(0,x)$ 中随机取一个数 $Y$，求 $Y$ 的分布。\n  - 题目给定 $X$ 的分布，以及在 $X = x$ 下 $Y$ 的条件分布，自然可以算出 $(X,Y)$ 的联合分布，再从联合分布就可以算出 $Y$ 的边缘分布\n  - $f_X(x)=I_{(0,1)}(x)$，$f_{Y \\mid X}(y \\mid x) = \\frac{1}{x}I_{(0,x)}(y)$ \n  - 联合分布：$f(x,y) = I_{(0,1)}(x) \\frac{1}{x}I_{(0,x)}(y)$ \n  - 边缘分布：$f_Y(y)=\\int f(x.y)dx$，算这种积分最重要的就是搞清楚，谁变谁不变，以及积分的上下限是多少，显然被积的是 $x$，所以 $x$ 是变量，$y$ 是常数，所以我们固定某一个 $y$，可以得出 $x$ 的范围是 $[y,1]$，因此 $f_Y(y)=-ln(y)$ ，最后限定 $y$ 的范围是 $(0,1)$ \n\n\n\n**有了联合分布，边缘分布和条件分布都能求**\n<br>\n# 9. 随机变量的独立性\n\n- 回忆两个随机事件独立的定义是：$P(AB)= P(A)P(B)$\n- 随机变量之间的独立好比，两个或多个随机变量的任意取值所代表的随机事件都相互独立\n  - 离散型随机变量：$P(X = x_i, Y = Y_j) = P(X = x_i)P(Y = y_j)$ \n  - 连续型随机变量独立即联合分布等于边缘分布的乘积，$F(x,y) = F_X(x)F_Y(y)$；或联合密度等于边缘密度的乘积，$f(x,y)=f_X(x)f_Y(y)$ \n-  两个随机变量 $(X,Y)$ 相互独立就是指 $X$ 有关的任何事件发生与否都与 $Y$ 有关的任意时间发生与否无关。\n- 随机变量的独立是随机事件独立的延申，从两个事件的独立，延申至一系列事件的独立。\n- 如果多个随机变量相互独立，且分布一致，称为独立同分布，简称 independent identical distribution(iid).\n\n\n<br>\n# 10. 随机变量的函数的概率分布\n\n- 随机变量函数：已知随机变量 $X$ 的分布，另一个随机变量 $Y$ 满足 $Y = g(X)$，这就是随机变量的函数，我们可以从自变量(随机变量 $X$ )的分布求出随机变量 $Y$ 的分布\n  - 连续型：$F(y) = P(Y \\le y) = \\int_{g(x)\\le y} f(x)dx$ \n  - 离散型：$P(Y = y_j) = \\sum_{g(x_i)=y_j}P(X = x_i)$ \n- 推广至随机向量的函数：已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z = g(X, Y)$，求 $Z$ 的分布\n  - 连续型： $F(Z) = P(Z \\le z)= \\int\\int_{g(x,y) \\le z}f(x,y)dxdy$ \n  - 离散型：$P(Z = z_q) = \\sum_{g(x_i,y_j) = z_q}P(X = x_i, Y = y_j)$，若 $X$ 和 $Y$ 独立，那么后面的概率可以拆成两个单独概率想乘。\n- 推广至随机向量的多个函数： 已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z_1 = g_1(X, Y)$，另一个随机变量 $Z_2 = g_2(X, Y)$，求 $(Z_1, Z_2)$ 的联合分布\n  - $F(Z_1, Z_2) = P(Z_1 \\le z_1, Z_2 \\le z_2) = \\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy$  \n  - 设 $u = g_1(x,y)$，$v = g_2(x,y)$，若反函数存在，即 $x = \\phi(u, v)$，$y = \\psi(u,v)$， \n  - $\\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy = \\int\\int_{u \\le z_1, v \\le z_2} f(\\phi(u,v), \\psi(u,v)) \\frac{dxdy}{dudv}dudv$ \n    - $\\frac{dxdy}{dudv} = |J|$，为 $(x,y)$ 关于 $(u,v)$ 的 Jacobi行列式\n    - $J = \\left|\\begin{array}{cccc}  \\frac{\\partial x}{\\partial u} &    \\frac{\\partial x}{\\partial v} \\\\\n     \\frac{\\partial y}{\\partial u} &    \\frac{\\partial y}{\\partial v}\\\\ \n      \\end{array}\\right|  $     \n  - 所以 $(Z_1,Z_2)$ 的分布函数等于 $F(Z_1, Z_2) = \\int_{-\\infty}^{z_1}\\int_{-\\infty}^{v_1} f(\\phi(u,v), \\psi(u,v)) |J|dudv$，\n  - 同理，$(Z_1,Z_2)$ 的密度函数为 $ f(\\phi(u,v), \\psi(u,v)) |J|$ \n- 例题：在直角坐标平面随机选取一点，分别以随机变量 $X$ 和 $Y$ 表示其横纵坐标，可以认为 $X$ 和 $Y$ 相互独立，且都服从正态分布 $N(0,1)$，求极坐标 $(R, t)$ 的分布 \n  - 题意是已知 $X$ 和 $Y$ 的分布，求 $(R,t)$ 的联合分布\n  - 反函数很容易得：$x = Rcost$，$y = Rsint$，$R \\in [0, +\\infty]$，$t \\in [0, 2 \\pi)$ \n  - $J = \\left|\\begin{array}{cccc} \\frac{\\partial x}{\\partial R} &    \\frac{\\partial x}{\\partial t} \\\\\n   \\frac{\\partial y}{\\partial R} &    \\frac{\\partial y}{\\partial t}\\\\ \n    \\end{array}\\right| = \\left|\\begin{array}{cccc} cost &    -Rsint \\\\\n   sint &   Rcost\\\\ \n    \\end{array}\\right| = R$\n     \n  - $(X,Y)$ 的联合密度为其边缘密度的乘积($X$ 和 $Y$ 相互独立)，$f(x,y) = \\frac{1}{2\\pi}exp(-\\frac{x^2+y^2}{2})$ \n  - $f(R,t) =  f(Rcost, Rsint) |J| = \\frac{1}{2\\pi}Rexp(-\\frac{R^2}{2})$，$R > 0$，$t \\in [0, 2 \\pi)$ \n  - $f(R,t) = f_1(R)f_2(t)$，其中 $f_1(R) = Rexp(-\\frac{R^2}{2})I_{R>0}(R)$，$f_2(t) = \\frac{1}{2\\pi}I_{[0,2\\pi)}(t)$，由于f(R,t) 可以写成两个密度函数的乘积，所以 $R$ 和 $t$ 相互独立，且 $t$ 服从 $[0,2\\pi)$ 的均匀分布 \n\n- 注意：两个服从正态分布的随机变量的和也服从正态分布，$X \\sim N(\\mu_1, \\sigma_1^2)$，$Y \\sim N(\\mu_2, \\sigma_2^2)$，且 $X$ 和 $Y$ 相互独立，则 $X + Y  \\sim N(\\mu_1 +\\mu_2, \\sigma_1^2 + \\sigma_2^2)$ \n\n- 设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $M = max(X,Y)$ 的分布\n\n  - $F_M(z) = P(max(X,Y) \\le z) = P(X \\le z, Y \\le z) = P(X \\le z)P(Y \\le z) = F_X(z)F_Y(z)$  \n  - 密度函数：$f_M(z) = \\frac{\\partial F_M(z)}{\\partial z} = f_X(z)F_Y(z) + F_X(z)f_Y(z)$ \n  - 推广至n个随机变量的最大值也是同样的道理，最大值小于 $z$，即每个随机变量都小于 $z$\n\n-  设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $N = min(X,Y)$ 的分布\n\n  - $N$ 等于 $X$ 和 $Y$ 的最小值，$N \\le z$，即 $X$ 和 $Y$ 的任意一个小于 $z$，求它的对立事件，即 $X$ 和 $Y$ 都大于 $z$\n\n  - $F_N(z) = P(N \\le z) = 1-P(N > z) = 1- P(X > z, Y > z) = 1 - P(X > z)P(Y > z) $ \n\n    $= 1 - (1-F_X(z))(1-F_Y(z))$  \n\n  - 密度函数：$f_N(z) = \\frac{\\partial F_N(z)}{\\partial z} = -f_X(z)(1-F_Y(z)) + (1-F_X(z))f_Y(z)$  \n\n 关键就是改变积分的区域，通过随机变量函数，约定积分区域\n\n\n<br>\n# 11. 统计三大分布\n\n$\\Gamma(x)=\\int_0^\\infty e^{-t}t^{x-1}dt$，$x > 0$\n\n性质：\n\n1. $\\Gamma(x+1) = x\\Gamma(x)$，$\\Gamma(1)=1$，$\\Gamma(n+1) = n!$ \n2. $\\Gamma(\\frac{1}{2}) = \\sqrt{\\pi}$ \n\n## 11.1 卡方分布(chi-squared distribution)\n\n- 定义：设 $X_1, X_2, ..., X_n$ 独立同分布，均服从标准正态分布，$\\chi^2 = \\sum_1^nX_i^2$，则称 $\\chi^2$ 是自由度为 $n$ 的卡方分布，记为 $\\chi_n^2$，自由度是指能够自由变换的自变量的个数，如果受到一个约束，自由度就要减一，依次类推。\n\n- 卡方分布的密度函数为\n\n  - $f_n(x) = \\frac{x^{\\frac{x-2}{2}}e^{-\\frac{x}{2}}}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}$ \n\n  - 当 $n=1$，$f_1(x) = \\frac{x^{-\\frac{1}{2}}e^{-\\frac{1}{2}}}{2^{\\frac{1}{2}} \\sqrt{\\pi}}$，为单调递减函数；当 $n=2$，$f_2(x) = e^{-x}$，同为单调递减，当 $n \\ge 3$，曲线有单峰，从 $0$ 开始单调上升，再单调下降趋向于0；由于是密度函数，其积分值为1。\n{% asset_img 卡方分布.png %}\n\n  - 若 $X \\sim \\chi_n^2$，记 $p(X > c) = \\alpha$，则 $c = \\chi_n^2(\\alpha)$ 称为卡方分布的上侧分位数，给定 $\\alpha$，可以通过查卡方分布表格，求出 $c$。\n{% asset_img 卡方分布alpha.png %}\n\n## 11.2 t 分布\n\n- 又称 student‘s distribution\n\n- 定义：设 $X \\sim N(0,1)$，$Y \\sim \\chi_n^2$，且 $X$ 和 $Y$ 相互独立，令 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$，则称 $T$ 的分布为自由度为 $n$ 的t分布，记为 $T \\sim t_n$。\n\n- 概率密度函数为\n\n  - $t_n(x) = \\frac{\\Gamma(\\frac{n+1}{x})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{x^2}{n})^{-\\frac{n+1}{2}}$ \n{% asset_img t分布.png 500 250 %}\n\n  - 与标准正态分布的关系\n\n    - t分布的密度函数与标准正态分布的密度很相似，都是关于y轴对称，偶函数\n    - t分布密度函数的峰值要低于标准正态的峰值，但尾部要比正态要高，这很正常，因为密度函数积分都要等于1，中间高度低了，两边的高度就要上升\n    - 当 $n$ 趋于无穷的时候，$t_n$ 会趋于标准正态。\n\n  - 若 $T \\sim t_n$，$P(|T| > c) = \\alpha$，则 $c = t_n(\\alpha / 2)$ 称为t分布的双侧 $\\alpha$ 分位数\n{% asset_img t分布alpha.png %}\n\n## 11.3 F 分布\n\n- 定义：$X \\sim \\chi_n^2$， $Y \\sim \\chi_m^2$，$X$ 和 $Y$ 相互独立，令 $Z = \\frac{X/n}{Y/m}$，则称 $Z$ 为自由度是 $n$ 和 $m$ 的 $F$ 分布，记为 $F \\sim F_{n,m}$ \n\n- $t$ 分布的平方为一个自由度为1和n的F分布，$t_n^2 = \\frac{X^2}{Y/n}$，$X$ 为标准正态，$X^2$ 为自由度为1的卡方分布\n\n- 同样有上测 $\\alpha$ 分位数的概念\n{% asset_img F分布.png %}\n\n- 性质：$F_{m,n}(1-\\alpha) = \\frac{1}{F_{n,m}(\\alpha)}$ \n<br>\n# 12. 总结\n这一章将随机事件过渡为随机变量，进而描述一系列随机事件发生的概率，也就是所谓的随机变量的分布，很多第一章提到的概念，如条件概率，在这一章都会以分布的形式出现，都是描述一系列的概率值，牢记，无论是分布函数还是密度函数，还是积分，它们都是为算概率服务的，最终目的都是算概率。\n\n<br>","source":"_posts/【概率论与数理统计】——随机变量及其分布.md","raw":"---\ntitle: 【概率论与数理统计】————随机变量及其分布\ndate: 2018-09-04 21:25:03\nmathjax: true\ntags:\n- 概率论\n---\n\n> 课程名称：概率论与数理统计\n> 开设学校：中科大\n> 课程平台：icourse\n> 第二章：随机变量及其分布，讲述离散型和连续型随机变量的概念，离散随机变量分布律，常见的离散随机变量的概率分布；随机变量的分布函数和概率密度函数\n\n<!-- more -->\n\n\n\n# 1. 随机变量的概念\n\n之前我们研究的概率，是基于样本空间下的一个随机试验，研究其发生的概率，若我们要研究一连串的随机试验及其它发生的概率，往往这一连串的事件之间有联系，我们就可以引入随机变量，用一个数字或者一个区间来表示这一连串的随机事件，如 $X$ 表示抛 5 次硬币正面向上的次数，那么我们就可以用 $X=3$ 来表示 5 次有 3 次正面向上这一个随机事件；\n\n所以，随机变量就是一个数与一个事件的对应关系，相当于是一个随机变量的一个取值对应一个随机事件，随机变量的引入就是为了更加简洁地表示一个随机事件，不需要用一大串的文字描述。但是随机变量的引入更多是为了研究一连串相关的事件，而不只是随机变量某一取值时刻下的事件，往往是研究随机变量不同取值下的不同随机事件之间的联系。\n<br>\n# 2. 如何研究随机变量\n由于随机变量是表示一连串的事件，首先我们得确定随机变量可以取哪些值，即确定有哪些随机事件。其次我们需要研究随机变量取不同值下所表示的随机事件发生的概率。\n\n之前说到，我们用一个数字或者一个区间来表示一个随机事件，这里面就包含了两种随机变量：离散型随机变量和连续性随机变量，前者随机变量的取值是可数的或者有限的，后者不可数。\n<br>\n# 3. 离散随机变量的分布\n当随机变量取不同取值的时候，所表示的随机事件的概率会不同，对于离散型的随机变量，我们可以用表格的形式，列出不同取值下的概率，这就是随机变量的概率分布，即不同取值下所表示的随机事件的概率值，可以统一用以下的式子来表示。此式子叫做分布律\n\n $$P(X = x_k) = p_k，k = 1,2,...$$  \n\n\n且满足\n\n1. $p_k \\ge 0，k = 1,2,...$\n2. $\\sum_1^{+\\infty}p_k = 1$ \n\n或者用表格来表示\n\n|  $X$  | $x_1$ | $x_2$ | $x_3$ | $...$ |\n| :---: | :---: | :---: | :---: | ----- |\n| $p_k$ | $p_1$ | $p_2$ | $p_3$ | ...   |\n\n\n## 3.1 离散均匀分布\n- 分布律：$ P(X = x_k) = \\frac{1}{n}$， $k = 1,2,...,n $\n- 其实就是我们之前所说的古典概型，古典概型满足两个特性，有限性和等可能性，实际上描述的就是离散均匀分布，随机变量的每个取值对应一个基本事件，每一个基本事件的概率都是一样。\n\n## 3.2 二项分布\n- 在一次试验中事件 $A$ 发生的概率为 $p$ ，把这种试验重复做 $n$ 次，若把 $X$ 记为 $n$ 次试验中事件 $A$ 发生的次数，$X$ 可以取 $0-n$，$P(X = k) = C_n^k p^k (1-p)^{n-k}$ ，称 $X$ 服从二项分布，记为 $X \\sim B(n, p)$   $~$ \n{% asset_img 二项分布.png %}\n\n- 伯努利试验：一次试验中可能的结果为 $A$ 和 $A$ 的对立事件，重复做这样的试验\n\n- 若 $n=1$，则变为 $0-1$ 分布，或叫两点分布或伯努利分布，$X$ 只取0，1两个值，$P(X = 1) = p$, $P(X = 0) = 1 - p$，$X = 1$表示 $A$ 发生，$X = 0$ 表示 $A$ 不发生。两点分布是最简单的一种分布，任何一个只有两种可能结果的随机现象，如明天是否下雨，都属于两点分布\n\n- 任何概率分布都应该满足 $P(X = x_k) \\ge 0$,   $ \\sum_1^n P(X = x_k) = 1 $，二项分布也满足，二项式定理展开就可以证明\n\n  - $\\sum_1^n P(X = x_k) = \\sum_1^n C_n^{k} p^k(1-p)^{n-k} = (p + 1-p)^n = 1$\n\n- 求解 $P(X = x_k)$取最大值的 $k$ 值\n  - 令 $b_k = P(X = x_k)  = C_n^k p^k(1-p)^{n-k} = \\frac{n!}{k!(n-k)!}p^k(1-p)^{n-k}$ \n  - 最大值应该满足 $\\frac{b_k}{b_{k-1}} \\ge 1$ 且 $\\frac{b_{k}}{b_{k+1}} \\ge 1$\n  - 解得 $p(n+1)-1 \\le k \\le p(n+1)$  \n  - 若 $p(n+1)$ 为整数，则最大值时k有两个值\n\n- 例题：若100个人射飞机，射中飞机的概率为0.02，假设 $X$ 为射中飞机的人数，那么 $X \\sim B(100, 0.02)$ ，100个人本来是相互独立地射飞机，但是可以看成100次重复的随机试验，所以满足二项分布\n\n\n## 3.3 泊松分布\n- 分布律：$P(X = x_k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}$ \n- 描述稀有事件发生的概率，交通路口发生事故的次数满足泊松分布\n- 随机变量取值为：$[ 0, +\\infty)$ \n- 泊松分布可以作为二项分布的一种近似\n  - $X \\sim B(n, p)$，$n$ 很大，$p$ 很小，$np$ 较小，$P(X = k) = C_n^k p^k (1-p)^{n-k}\\approx e^{-\\lambda} \\frac{\\lambda^k}{k!}$, $\\lambda = np$ \n    - $P(X = k) = C_n^k p^k (1-p)^{n-k} = \\frac{n(n-1)...(n-k+1)}{k!}p^k(1-p)^{n-k}$  \n    - 因为 $p$ 很小，根据泰勒展开，$1 - p \\approx e^{-p}$ ，所以 $(1-p)^{n-k} \\approx e^{-p(n-k)}$ \n    - 由于泊松分布一般描述稀有事件，即 $k$ 较小，由因为 $n$ 很大，所以 $n - k \\approx n$ ，$e^{-p(n-k)} \\approx e^{-pn} = e^{-\\lambda}$ \n    -  同样因为 $k$ 较小，$n$ 很大，$\\frac{n(n-1)...(n-k+1)}{k!} p^k \\approx \\frac{(np)^k}{k!} = \\frac{\\lambda^k}{k!}$   \n  - 二项分布不好算，可以用泊松分布近似计算，从上面的推导可以看出 $k$ 不能很大\n  - $n$ 很大，$np$ 很小，准确点说 $n >30$，$np < 5$ 即可\n  {% asset_img 泊松分布.png %}\n\n\n\n二项分布当n等于1时，可以转成两点分布；当n很大，p很小的时候，可以转成泊松分布。\n\n<br>\n\n# 4. 分布函数和密度函数\n\n## 4.1 分布函数\n\n上面提到的都是离散型随机变量的概率分布 $P(X =x_k) = p_k,  k = 0,1,2,...$ ，离散型随机变量的取值是有限的或者是可数的，离散型变量的一个取值对应一个随机事件，而对于连续型变量，通常用一段区间来表示一个随机事件，如 $P(a < X \\le b)$，这个概率又可以表示为 $P(X \\le b) - P(X \\le a)$。\n\n- 定义：$P(X \\le x) = F(x)$，$-\\infty < x < +\\infty$。随机变量 $X$ 的分布函数\n\n- 分布函数直观来说就是表示随机变量取值小于某个值的概率，它具有以下几个性质\n  - 分布函数是非递减的，且 $lim_{x\\to -\\infty} F(x) =0$ ，$lim_{x\\to +\\infty} F(x) =1$，从分布函数的定义就可以看出。\n  - 离散型随机变量的分布函数不连续，因为离散变量的取值是有限的，因此分布函数会呈现出阶梯状，且是右连续的\n    - $F(x) = P(X \\le x)=\\sum_{x_{k} \\le x} P(X = x_k) $ \n  - 连续型随机变量的分布函数是连续且递增的，有了分布函数，某个区间的概率值就很容易计算，$P(a < X \\le b) = F(b) - F(a)$，\n{% asset_img 分布函数.png %}\n\n\n\n- 注意区分以下分布律和分布函数，分布律是描述离散随机变量遵循的分布，简单来说就是取不同值的概率；而分布函数是随机变量小于某个值的概率\n\n\n\n## 4.2 密度函数\n\n随机变量的分布函数 $F(x)$ 是描述随机变量取值小于某个值下的概率的函数，而随机变量的密度函数 $f(x)$ 满足以下几个条件，注意并不是所有的随机变量或者分布函数都有对应的密度函数，但是所有的随机变量都有分布函数\n\n1. $f(x)$ 是非负的\n2. $\\int_{-\\infty}^{+\\infty} f(x)dx=1$ \n3.  $F(x) = \\int_{-\\infty}^{x}f(t)dt$  \n\n从上面的定义可以看出，密度函数 $f(x)$ 是分布函数 $F(x)$ 的微分，而 $F(x)$ 是 $f(x)$ 的积分，所以计算以下概率可以转变成求密度函数的积分，注意无论是分布函数还是密度函数，还是分布律，他们都是服务于算概率的\n\n$$P(a < X \\le b) = F(b) - F(a) = \\int_a^b f(x)dx$$\n\n上面定义的第二点，也很容易理解，$\\int_{-\\infty}^{+\\infty} f(x)dx=F(+\\infty)-F(-\\infty)=1-0=1$  \n\n对于连续型随机变量 $P(X = a) = 0$，因为 $P(X = a) = lim_{h\\to 0} \\int_{a-h}^{a}f(x)dx=0$ \n\n分布函数连续不一定是连续型随机变量的分布函数，连续不一定可微，只有密度函数存在，才能说是连续随机变量\n\n## 4.3 总结一下\n\n对于离散型的随机变量，只可以取有限个或者可数个值，我们可以用分布律去描述它，$P(X = x_k) = p_k$   \n\n对于连续型的随机变量，我们用一个区间去表示一个随机事件，但由于区间涉及两个边界值，我们引入分布函数 $F(x)$ 描述随机变量取值小于某个值的概率，进而引入密度函数 $f(x)$，然后概率值就可以转化为求密度函数的积分值\n\n但是对于离散型随机变量，我们也可以研究它的分布函数，但是它没有概率密度函数，因为它的分布函数不可微\n\n\n\n\n<br>\n# 5. 连续随机变量的分布\n\n对于离散随机变量，我们可以用分布律来描述，对于连续型随机变量，我们可以用分布函数或密度函数来描述，分布律、分布函数、密度函数都是为了算概率而存在的\n\n## 5.1 均匀分布\n\n- 若一个随机变量的密度函数为以下的形式，则该随机变量服从均匀分布，$X \\sim U(a,b)$ \n\n  $$f(x)= \\left\\{\\begin{array}{cc} \n  \\frac{1}{b-a}, & a \\le x \\le b\\\\ \n  0, & other\\ values \n  \\end{array}\\right.$$  \n\n- 均匀分布可以用示性函数 $I$ 来表示，$f(x) = \\frac{1}{b-a}I_{a\\le x\\le b}(x)$ \n\n## 5.2 指数分布\n\n- 指数分布的随机变量，密度函数满足 $f(x) =\\lambda e^{-\\lambda x} I_{x \\ge 0}(x)$，$\\lambda > 0$，$X \\sim exp(\\lambda)$  \n\n  $$f(x)= \\left\\{\\begin{array}{cc} \n  \\lambda e^{-\\lambda x}, & x \\ge 0\\\\ \n  0, & x < 0 \n  \\end{array}\\right.$$ \n\n- $\\lambda$ 越大，密度函数下降得越快\n{% asset_img 指数分布.png %}\n\n- 指数分布最大的特点是无后效性，通常用来描述元件的寿命，即寿命是无老化的，假如我知道一个元件已经用了 $s$ 个小时，想知道原件能用 $s + t$ 个小时的概率，它就等于原件用 $t$ 个小时的概率\n  - $P(X > s+t \\mid X>s) = P(X >t)$  \n  - 证明：\n    - 令事件 $A$ 为 $X > s+t$，事件 $B$ 为 $X > s$，则 $P(A \\mid B) = \\frac{P(AB)}{P(B)}$  \n    - 可以看出 $B \\subset A$，所以 $P(AB) = P(A)$ \n    - $P(A) = \\int_{s+t}^{+\\infty} \\lambda e^{-\\lambda x}dx$ \n    - 令 $\\lambda x=u$，则 $P(A) = \\int_{\\lambda(s+t)}^{+\\infty} e^{-u}du = -e^{-u} \\mid_{\\lambda(s+t)}^{+\\infty} = e^{-\\lambda(s+t)}$  \n    - 同理，$P(B)=e^{-\\lambda s}$  \n    - 因此，$P(A \\mid B) = \\frac{P(A)}{P(B)} = e^{-\\lambda t} = P(X > t)$  \n\n\n\n## 5.3 正态分布\n\n- 密度函数满足 $f(x) = \\frac{1}{\\sqrt{2\\pi} \\sigma} exp(-\\frac{(x-\\mu)^2}{2\\sigma^2})$，$-\\infty < x < +\\infty$，记为 $X \\sim N(\\mu, \\sigma^2)$    \n- 密度函数的曲线有以下性质\n  - 对称函数，对称轴为 $x = \\mu$，对称轴左边单调递增，对称轴右边单调递减，极值落在 $x = \\mu$ 上，为$\\frac{1}{\\sqrt{2\\pi} \\sigma}$\n  - $\\sigma$ 的大小决定了密度函数的陡峭程度\n- 当 $\\mu = 0$，$\\sigma = 1$ 的时候，称为标准正态分布，密度函数记为 $\\phi(x)$，分布函数记为 $\\Phi(x)$ \n  - 分布函数 $\\Phi(x)$ 是密度函数 $\\phi(x)$ 的积分，$\\Phi(x) = \\int_{-\\infty}^x \\phi(t)dt$ \n  - $\\Phi(x) = 1 - \\Phi(-x)$，可以从密度函数 $\\phi(x)$ 算面积很容易证出。\n- 一般的正态分布 $X \\sim N(\\mu, \\sigma^2)$ 都可以转成标准正态分布 $X \\sim N(0, 1)$，其分布函数 $F(x) = \\Phi(\\frac{x-\\mu}{\\sigma})$ ，然后通过查标准正态分布表格来算出概率。\n\n\n<br>\n# 6. 多维随机变量\n\n多维随机变量也称随机向量，跟一维随机变量一样，多维随机变量就是多个随机事件的并集，或者说是多个事件的联合概率，像一维随机变量，我们同样关注多维随机向量的分布。\n\n## 6.1 二维离散型随机向量的分布\n\n$P(X=x_i, Y=y_j)=p_{i,j}$ \n\n 同样应该满足密度分布的基本条件\n\n1. $p_{i,j}>0$\n2. $\\sum\\sum p_{ij}=1$ \n\n## 6.2 二维连续型随机向量的分布\n\n类似一维随机变量，我们用分布函数来描述它的概率分布，$F(x,y)$ 称为随机向量 $(X,Y)$ 的联合分布函数。\n\n$F(x, y)=P(X \\le x, Y \\le y)$ \n\n将二维随机变量 $(X,Y)​$ 看成是平面上随机点的坐标，那么，分布函数 $F(x,y)​$ 在点 $(x,y)​$ 处的函数值就是下图无穷矩形域内的面积占整个平面的概率。\n{% asset_img 二维随机变量.png %}\n\n$F(x,y)$ 有如下性质：\n\n1. 给定 $y$，$F(x,y)$ 是 $x$ 的非减函数；给定 $x$, $F(x,y)$ 是 $y$ 的非减函数\n2. $\\lim_{x \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{y \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{x \\rightarrow +\\infty, y \\rightarrow +\\infty} F(x,y)=1$ \n3. $P(a<X \\le b, c < Y \\le d) = F(b,d) - F(a,d) - F(b,c) + F(a,c)$     \n4. $P(X \\le x_i) = P(X \\le x_i, Y \\le +\\infty) = F(x_i, +\\infty)$ \n5. $F(x,y)$ 分别是关于 $x$ 和 $y$ 右连续\n\n同样从分布函数引出概率密度函数，若对分布函数 $F(x,y)$，存在 $f(x,y) \\ge 0$，使得对任一 $(x,y) \\in R^2$，有 $F(x,y)=\\int_{-\\infty}^{x} \\int_{-\\infty}^{y} f(u,v)dudv$，则称 $F(x,y)$ 为连续型联合分布函数，$f(x,y)$ 为联合密度函数。 $f(x,y)$ 同样具有以下性质：\n\n1. $f(x,y) \\ge 0$  \n2. $\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ \n3. $\\frac{\\partial F(x,y)}{\\partial x \\partial y} = f(x,y)$ \n\n几何上，$z=f(x,y)$ 表示空间的一个曲面，$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ 表示介于 $f(x,y)$ 与 $xOy$  平面之间的空间区域的面积。\n{% asset_img 二维正态.png %}\n\n\n<br>\n# 7. 边缘分布(marginal distribution)\n\n- 定义：已知 $(X,Y)$ 的联合分布函数为 $F(x,y)$，则 $X$ 的分布 $F_1(x)$ 和 $Y$ 的分布 $F_2(y)$ 称为 $F(x,y)$ 的边缘分布\n  - $F_1(x)=P(X \\le x)=P(X \\le x, Y \\le +\\infty)=F(x, +\\infty)$ \n  - $F_2(y)=P(Y \\le y)=P(Y \\le y, X \\le +\\infty) = F(+\\infty, y)$ \n\n- 二维离散型随机变量的边缘分布\n  - 二维离散随机变量的分布一般以联表的形式表示\n  - 固定某个 $x_i$，$P(X=x_i) = \\sum_{j=1}^{m}p_{ij}$，联表每一行的求和就是随机变量 $X$ 的边缘分布，可记为 $p_{i\\bullet}$ \n  - 固定某个 $y_i$ ，$P(Y=y_j) = \\sum_{i=1}^{n}p_{ij}$ ，联表每一列的求和就是随机变量 $Y$ 的边缘分布，可记为 $p_{\\bullet j}$ \n\n- 二维连续型随机变量的边缘分布\n  - 二维连续随机变量的分布一般以概率密度函数的形式表示\n  - 从联合密度函数，求 $X$ 的密度函数，就需要将随机变量 $Y$ 从积分中去掉，$f_X(u) = \\int_{-\\infty}^{+\\infty}f(u,v)dv$ \n    - $F_X(x) = F(x, +\\infty)=\\int_{-\\infty}^x[\\int_{-\\infty}^{+\\infty}f(x,y)dy]dx=\\int_{-\\infty}^{x}f_X(x)dx$ \n  - 同理，求 $Y$ 的密度函数，，$f_Y(v) = \\int_{-\\infty}^{+\\infty}f(u,v)du$    \n\n- 二维正态分布的边缘分布就是一维正态分布\n\n- 注意：联合分布可以推出边缘分布，但是边缘分布不能推出联合分布，例子：一维正态分布推不出二维正态分布，二维正态分布还有一个参数 $\\rho$\n\n<br>\n# 8. 条件分布\n\n假设有两个随机变量 $X,Y$，在给定 $Y$ 取某个或某些值的条件下，$X$ 的概率分布就叫做 $Y = y_j$ 条件下 $X$ 的条件分布律。\n\n## 8.1 离散型随机变量的条件分布\n\n- 定义：设 $(X,Y)$ 为二维离散型随机变量，若对固定的 $j$ ，称 $P(X=x_i \\mid Y=y_j) = \\frac{p_{ij}}{p_{\\bullet j}}$ 为 $Y = y_j$ 条件下的 $X$ 的条件分布律；同理，对固定的 $i$ ，称 $P(Y=y_j \\mid X=x_i) = \\frac{p_{ij}}{p_{i\\bullet}}$  为 $X = x_i$ 条件下的 $Y$ 的条件分布律；\n- 条件分布是一种概率分布，它具有概率分布的一切性质，正如条件概率是一种概率，具有概率的一切性质一样。\n  - $P(X=x_i \\mid Y=y_j) \\ge 0$\n  - $\\sum_{i=1}^{\\infty} P(X=x_i \\mid Y=y_j) =1$ \n- 离散型随机变量的条件分布，就是在联合分布的联表的某一行或者某一列的分布。\n- 由条件分布和边缘分布，可以根据乘法公式，求得联合分布\n  - $P(X=x_i, Y=y_j) = P(X=x_i)P(Y=y_j \\mid X= x_i)$ \n\n## 8.2 连续型随机变量的条件分布\n\n- 定义：设 $X$ 和 $Y$ 的联合概率密度为 $f(x,y)$，$(X,Y)$ 关于 $Y$ 的边缘概率密度为 $f_Y(y)$，若对于固定的 $y$，$f_Y(y) >0$，则称 $\\frac{f(x,y)}{f_Y(y)}$ 为在 $Y = y$ 的条件下 $X$ 的条件概率密度，记为 $f_{X \\mid Y}(x \\mid y) = \\frac{f(x,y)}{f_Y(y)}$，同理，$f_{Y \\mid X}(y \\mid x) = \\frac{f(x,y)}{f_X(x)}$ \n\n- 由条件密度和边缘密度，可以得到联合密度\n  - $f(x,y)=f_X(x)f_{Y \\mid X}(y \\mid x)$ \n- 例题：从 [0,1] 中随机取一个数 $X$， 则 $X \\sim U(0,1)$，当 $X=x$ 时，再从 $(0,x)$ 中随机取一个数 $Y$，求 $Y$ 的分布。\n  - 题目给定 $X$ 的分布，以及在 $X = x$ 下 $Y$ 的条件分布，自然可以算出 $(X,Y)$ 的联合分布，再从联合分布就可以算出 $Y$ 的边缘分布\n  - $f_X(x)=I_{(0,1)}(x)$，$f_{Y \\mid X}(y \\mid x) = \\frac{1}{x}I_{(0,x)}(y)$ \n  - 联合分布：$f(x,y) = I_{(0,1)}(x) \\frac{1}{x}I_{(0,x)}(y)$ \n  - 边缘分布：$f_Y(y)=\\int f(x.y)dx$，算这种积分最重要的就是搞清楚，谁变谁不变，以及积分的上下限是多少，显然被积的是 $x$，所以 $x$ 是变量，$y$ 是常数，所以我们固定某一个 $y$，可以得出 $x$ 的范围是 $[y,1]$，因此 $f_Y(y)=-ln(y)$ ，最后限定 $y$ 的范围是 $(0,1)$ \n\n\n\n**有了联合分布，边缘分布和条件分布都能求**\n<br>\n# 9. 随机变量的独立性\n\n- 回忆两个随机事件独立的定义是：$P(AB)= P(A)P(B)$\n- 随机变量之间的独立好比，两个或多个随机变量的任意取值所代表的随机事件都相互独立\n  - 离散型随机变量：$P(X = x_i, Y = Y_j) = P(X = x_i)P(Y = y_j)$ \n  - 连续型随机变量独立即联合分布等于边缘分布的乘积，$F(x,y) = F_X(x)F_Y(y)$；或联合密度等于边缘密度的乘积，$f(x,y)=f_X(x)f_Y(y)$ \n-  两个随机变量 $(X,Y)$ 相互独立就是指 $X$ 有关的任何事件发生与否都与 $Y$ 有关的任意时间发生与否无关。\n- 随机变量的独立是随机事件独立的延申，从两个事件的独立，延申至一系列事件的独立。\n- 如果多个随机变量相互独立，且分布一致，称为独立同分布，简称 independent identical distribution(iid).\n\n\n<br>\n# 10. 随机变量的函数的概率分布\n\n- 随机变量函数：已知随机变量 $X$ 的分布，另一个随机变量 $Y$ 满足 $Y = g(X)$，这就是随机变量的函数，我们可以从自变量(随机变量 $X$ )的分布求出随机变量 $Y$ 的分布\n  - 连续型：$F(y) = P(Y \\le y) = \\int_{g(x)\\le y} f(x)dx$ \n  - 离散型：$P(Y = y_j) = \\sum_{g(x_i)=y_j}P(X = x_i)$ \n- 推广至随机向量的函数：已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z = g(X, Y)$，求 $Z$ 的分布\n  - 连续型： $F(Z) = P(Z \\le z)= \\int\\int_{g(x,y) \\le z}f(x,y)dxdy$ \n  - 离散型：$P(Z = z_q) = \\sum_{g(x_i,y_j) = z_q}P(X = x_i, Y = y_j)$，若 $X$ 和 $Y$ 独立，那么后面的概率可以拆成两个单独概率想乘。\n- 推广至随机向量的多个函数： 已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z_1 = g_1(X, Y)$，另一个随机变量 $Z_2 = g_2(X, Y)$，求 $(Z_1, Z_2)$ 的联合分布\n  - $F(Z_1, Z_2) = P(Z_1 \\le z_1, Z_2 \\le z_2) = \\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy$  \n  - 设 $u = g_1(x,y)$，$v = g_2(x,y)$，若反函数存在，即 $x = \\phi(u, v)$，$y = \\psi(u,v)$， \n  - $\\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy = \\int\\int_{u \\le z_1, v \\le z_2} f(\\phi(u,v), \\psi(u,v)) \\frac{dxdy}{dudv}dudv$ \n    - $\\frac{dxdy}{dudv} = |J|$，为 $(x,y)$ 关于 $(u,v)$ 的 Jacobi行列式\n    - $J = \\left|\\begin{array}{cccc}  \\frac{\\partial x}{\\partial u} &    \\frac{\\partial x}{\\partial v} \\\\\n     \\frac{\\partial y}{\\partial u} &    \\frac{\\partial y}{\\partial v}\\\\ \n      \\end{array}\\right|  $     \n  - 所以 $(Z_1,Z_2)$ 的分布函数等于 $F(Z_1, Z_2) = \\int_{-\\infty}^{z_1}\\int_{-\\infty}^{v_1} f(\\phi(u,v), \\psi(u,v)) |J|dudv$，\n  - 同理，$(Z_1,Z_2)$ 的密度函数为 $ f(\\phi(u,v), \\psi(u,v)) |J|$ \n- 例题：在直角坐标平面随机选取一点，分别以随机变量 $X$ 和 $Y$ 表示其横纵坐标，可以认为 $X$ 和 $Y$ 相互独立，且都服从正态分布 $N(0,1)$，求极坐标 $(R, t)$ 的分布 \n  - 题意是已知 $X$ 和 $Y$ 的分布，求 $(R,t)$ 的联合分布\n  - 反函数很容易得：$x = Rcost$，$y = Rsint$，$R \\in [0, +\\infty]$，$t \\in [0, 2 \\pi)$ \n  - $J = \\left|\\begin{array}{cccc} \\frac{\\partial x}{\\partial R} &    \\frac{\\partial x}{\\partial t} \\\\\n   \\frac{\\partial y}{\\partial R} &    \\frac{\\partial y}{\\partial t}\\\\ \n    \\end{array}\\right| = \\left|\\begin{array}{cccc} cost &    -Rsint \\\\\n   sint &   Rcost\\\\ \n    \\end{array}\\right| = R$\n     \n  - $(X,Y)$ 的联合密度为其边缘密度的乘积($X$ 和 $Y$ 相互独立)，$f(x,y) = \\frac{1}{2\\pi}exp(-\\frac{x^2+y^2}{2})$ \n  - $f(R,t) =  f(Rcost, Rsint) |J| = \\frac{1}{2\\pi}Rexp(-\\frac{R^2}{2})$，$R > 0$，$t \\in [0, 2 \\pi)$ \n  - $f(R,t) = f_1(R)f_2(t)$，其中 $f_1(R) = Rexp(-\\frac{R^2}{2})I_{R>0}(R)$，$f_2(t) = \\frac{1}{2\\pi}I_{[0,2\\pi)}(t)$，由于f(R,t) 可以写成两个密度函数的乘积，所以 $R$ 和 $t$ 相互独立，且 $t$ 服从 $[0,2\\pi)$ 的均匀分布 \n\n- 注意：两个服从正态分布的随机变量的和也服从正态分布，$X \\sim N(\\mu_1, \\sigma_1^2)$，$Y \\sim N(\\mu_2, \\sigma_2^2)$，且 $X$ 和 $Y$ 相互独立，则 $X + Y  \\sim N(\\mu_1 +\\mu_2, \\sigma_1^2 + \\sigma_2^2)$ \n\n- 设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $M = max(X,Y)$ 的分布\n\n  - $F_M(z) = P(max(X,Y) \\le z) = P(X \\le z, Y \\le z) = P(X \\le z)P(Y \\le z) = F_X(z)F_Y(z)$  \n  - 密度函数：$f_M(z) = \\frac{\\partial F_M(z)}{\\partial z} = f_X(z)F_Y(z) + F_X(z)f_Y(z)$ \n  - 推广至n个随机变量的最大值也是同样的道理，最大值小于 $z$，即每个随机变量都小于 $z$\n\n-  设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $N = min(X,Y)$ 的分布\n\n  - $N$ 等于 $X$ 和 $Y$ 的最小值，$N \\le z$，即 $X$ 和 $Y$ 的任意一个小于 $z$，求它的对立事件，即 $X$ 和 $Y$ 都大于 $z$\n\n  - $F_N(z) = P(N \\le z) = 1-P(N > z) = 1- P(X > z, Y > z) = 1 - P(X > z)P(Y > z) $ \n\n    $= 1 - (1-F_X(z))(1-F_Y(z))$  \n\n  - 密度函数：$f_N(z) = \\frac{\\partial F_N(z)}{\\partial z} = -f_X(z)(1-F_Y(z)) + (1-F_X(z))f_Y(z)$  \n\n 关键就是改变积分的区域，通过随机变量函数，约定积分区域\n\n\n<br>\n# 11. 统计三大分布\n\n$\\Gamma(x)=\\int_0^\\infty e^{-t}t^{x-1}dt$，$x > 0$\n\n性质：\n\n1. $\\Gamma(x+1) = x\\Gamma(x)$，$\\Gamma(1)=1$，$\\Gamma(n+1) = n!$ \n2. $\\Gamma(\\frac{1}{2}) = \\sqrt{\\pi}$ \n\n## 11.1 卡方分布(chi-squared distribution)\n\n- 定义：设 $X_1, X_2, ..., X_n$ 独立同分布，均服从标准正态分布，$\\chi^2 = \\sum_1^nX_i^2$，则称 $\\chi^2$ 是自由度为 $n$ 的卡方分布，记为 $\\chi_n^2$，自由度是指能够自由变换的自变量的个数，如果受到一个约束，自由度就要减一，依次类推。\n\n- 卡方分布的密度函数为\n\n  - $f_n(x) = \\frac{x^{\\frac{x-2}{2}}e^{-\\frac{x}{2}}}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}$ \n\n  - 当 $n=1$，$f_1(x) = \\frac{x^{-\\frac{1}{2}}e^{-\\frac{1}{2}}}{2^{\\frac{1}{2}} \\sqrt{\\pi}}$，为单调递减函数；当 $n=2$，$f_2(x) = e^{-x}$，同为单调递减，当 $n \\ge 3$，曲线有单峰，从 $0$ 开始单调上升，再单调下降趋向于0；由于是密度函数，其积分值为1。\n{% asset_img 卡方分布.png %}\n\n  - 若 $X \\sim \\chi_n^2$，记 $p(X > c) = \\alpha$，则 $c = \\chi_n^2(\\alpha)$ 称为卡方分布的上侧分位数，给定 $\\alpha$，可以通过查卡方分布表格，求出 $c$。\n{% asset_img 卡方分布alpha.png %}\n\n## 11.2 t 分布\n\n- 又称 student‘s distribution\n\n- 定义：设 $X \\sim N(0,1)$，$Y \\sim \\chi_n^2$，且 $X$ 和 $Y$ 相互独立，令 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$，则称 $T$ 的分布为自由度为 $n$ 的t分布，记为 $T \\sim t_n$。\n\n- 概率密度函数为\n\n  - $t_n(x) = \\frac{\\Gamma(\\frac{n+1}{x})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{x^2}{n})^{-\\frac{n+1}{2}}$ \n{% asset_img t分布.png 500 250 %}\n\n  - 与标准正态分布的关系\n\n    - t分布的密度函数与标准正态分布的密度很相似，都是关于y轴对称，偶函数\n    - t分布密度函数的峰值要低于标准正态的峰值，但尾部要比正态要高，这很正常，因为密度函数积分都要等于1，中间高度低了，两边的高度就要上升\n    - 当 $n$ 趋于无穷的时候，$t_n$ 会趋于标准正态。\n\n  - 若 $T \\sim t_n$，$P(|T| > c) = \\alpha$，则 $c = t_n(\\alpha / 2)$ 称为t分布的双侧 $\\alpha$ 分位数\n{% asset_img t分布alpha.png %}\n\n## 11.3 F 分布\n\n- 定义：$X \\sim \\chi_n^2$， $Y \\sim \\chi_m^2$，$X$ 和 $Y$ 相互独立，令 $Z = \\frac{X/n}{Y/m}$，则称 $Z$ 为自由度是 $n$ 和 $m$ 的 $F$ 分布，记为 $F \\sim F_{n,m}$ \n\n- $t$ 分布的平方为一个自由度为1和n的F分布，$t_n^2 = \\frac{X^2}{Y/n}$，$X$ 为标准正态，$X^2$ 为自由度为1的卡方分布\n\n- 同样有上测 $\\alpha$ 分位数的概念\n{% asset_img F分布.png %}\n\n- 性质：$F_{m,n}(1-\\alpha) = \\frac{1}{F_{n,m}(\\alpha)}$ \n<br>\n# 12. 总结\n这一章将随机事件过渡为随机变量，进而描述一系列随机事件发生的概率，也就是所谓的随机变量的分布，很多第一章提到的概念，如条件概率，在这一章都会以分布的形式出现，都是描述一系列的概率值，牢记，无论是分布函数还是密度函数，还是积分，它们都是为算概率服务的，最终目的都是算概率。\n\n<br>","slug":"【概率论与数理统计】——随机变量及其分布","published":1,"updated":"2018-10-10T04:02:46.126Z","_id":"cjn2m7gcd0003akw2sndeiqfs","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>课程名称：概率论与数理统计<br>开设学校：中科大<br>课程平台：icourse<br>第二章：随机变量及其分布，讲述离散型和连续型随机变量的概念，离散随机变量分布律，常见的离散随机变量的概率分布；随机变量的分布函数和概率密度函数</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"1-随机变量的概念\"><a href=\"#1-随机变量的概念\" class=\"headerlink\" title=\"1. 随机变量的概念\"></a>1. 随机变量的概念</h1><p>之前我们研究的概率，是基于样本空间下的一个随机试验，研究其发生的概率，若我们要研究一连串的随机试验及其它发生的概率，往往这一连串的事件之间有联系，我们就可以引入随机变量，用一个数字或者一个区间来表示这一连串的随机事件，如 $X$ 表示抛 5 次硬币正面向上的次数，那么我们就可以用 $X=3$ 来表示 5 次有 3 次正面向上这一个随机事件；</p>\n<p>所以，随机变量就是一个数与一个事件的对应关系，相当于是一个随机变量的一个取值对应一个随机事件，随机变量的引入就是为了更加简洁地表示一个随机事件，不需要用一大串的文字描述。但是随机变量的引入更多是为了研究一连串相关的事件，而不只是随机变量某一取值时刻下的事件，往往是研究随机变量不同取值下的不同随机事件之间的联系。<br><br></p>\n<h1 id=\"2-如何研究随机变量\"><a href=\"#2-如何研究随机变量\" class=\"headerlink\" title=\"2. 如何研究随机变量\"></a>2. 如何研究随机变量</h1><p>由于随机变量是表示一连串的事件，首先我们得确定随机变量可以取哪些值，即确定有哪些随机事件。其次我们需要研究随机变量取不同值下所表示的随机事件发生的概率。</p>\n<p>之前说到，我们用一个数字或者一个区间来表示一个随机事件，这里面就包含了两种随机变量：离散型随机变量和连续性随机变量，前者随机变量的取值是可数的或者有限的，后者不可数。<br><br></p>\n<h1 id=\"3-离散随机变量的分布\"><a href=\"#3-离散随机变量的分布\" class=\"headerlink\" title=\"3. 离散随机变量的分布\"></a>3. 离散随机变量的分布</h1><p>当随机变量取不同取值的时候，所表示的随机事件的概率会不同，对于离散型的随机变量，我们可以用表格的形式，列出不同取值下的概率，这就是随机变量的概率分布，即不同取值下所表示的随机事件的概率值，可以统一用以下的式子来表示。此式子叫做分布律</p>\n<script type=\"math/tex; mode=display\">P(X = x_k) = p_k，k = 1,2,...</script><p>且满足</p>\n<ol>\n<li>$p_k \\ge 0，k = 1,2,…$</li>\n<li>$\\sum_1^{+\\infty}p_k = 1$ </li>\n</ol>\n<p>或者用表格来表示</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">$X$</th>\n<th style=\"text-align:center\">$x_1$</th>\n<th style=\"text-align:center\">$x_2$</th>\n<th style=\"text-align:center\">$x_3$</th>\n<th>$…$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$p_k$</td>\n<td style=\"text-align:center\">$p_1$</td>\n<td style=\"text-align:center\">$p_2$</td>\n<td style=\"text-align:center\">$p_3$</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-1-离散均匀分布\"><a href=\"#3-1-离散均匀分布\" class=\"headerlink\" title=\"3.1 离散均匀分布\"></a>3.1 离散均匀分布</h2><ul>\n<li>分布律：$ P(X = x_k) = \\frac{1}{n}$， $k = 1,2,…,n $</li>\n<li>其实就是我们之前所说的古典概型，古典概型满足两个特性，有限性和等可能性，实际上描述的就是离散均匀分布，随机变量的每个取值对应一个基本事件，每一个基本事件的概率都是一样。</li>\n</ul>\n<h2 id=\"3-2-二项分布\"><a href=\"#3-2-二项分布\" class=\"headerlink\" title=\"3.2 二项分布\"></a>3.2 二项分布</h2><ul>\n<li><p>在一次试验中事件 $A$ 发生的概率为 $p$ ，把这种试验重复做 $n$ 次，若把 $X$ 记为 $n$ 次试验中事件 $A$ 发生的次数，$X$ 可以取 $0-n$，$P(X = k) = C_n^k p^k (1-p)^{n-k}$ ，称 $X$ 服从二项分布，记为 $X \\sim B(n, p)$   $~$ </p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二项分布.png\">\n</li>\n<li><p>伯努利试验：一次试验中可能的结果为 $A$ 和 $A$ 的对立事件，重复做这样的试验</p>\n</li>\n<li><p>若 $n=1$，则变为 $0-1$ 分布，或叫两点分布或伯努利分布，$X$ 只取0，1两个值，$P(X = 1) = p$, $P(X = 0) = 1 - p$，$X = 1$表示 $A$ 发生，$X = 0$ 表示 $A$ 不发生。两点分布是最简单的一种分布，任何一个只有两种可能结果的随机现象，如明天是否下雨，都属于两点分布</p>\n</li>\n<li><p>任何概率分布都应该满足 $P(X = x_k) \\ge 0$,   $ \\sum_1^n P(X = x_k) = 1 $，二项分布也满足，二项式定理展开就可以证明</p>\n<ul>\n<li>$\\sum_1^n P(X = x_k) = \\sum_1^n C_n^{k} p^k(1-p)^{n-k} = (p + 1-p)^n = 1$</li>\n</ul>\n</li>\n<li><p>求解 $P(X = x_k)$取最大值的 $k$ 值</p>\n<ul>\n<li>令 $b_k = P(X = x_k)  = C_n^k p^k(1-p)^{n-k} = \\frac{n!}{k!(n-k)!}p^k(1-p)^{n-k}$ </li>\n<li>最大值应该满足 $\\frac{b_k}{b_{k-1}} \\ge 1$ 且 $\\frac{b_{k}}{b_{k+1}} \\ge 1$</li>\n<li>解得 $p(n+1)-1 \\le k \\le p(n+1)$  </li>\n<li>若 $p(n+1)$ 为整数，则最大值时k有两个值</li>\n</ul>\n</li>\n<li><p>例题：若100个人射飞机，射中飞机的概率为0.02，假设 $X$ 为射中飞机的人数，那么 $X \\sim B(100, 0.02)$ ，100个人本来是相互独立地射飞机，但是可以看成100次重复的随机试验，所以满足二项分布</p>\n</li>\n</ul>\n<h2 id=\"3-3-泊松分布\"><a href=\"#3-3-泊松分布\" class=\"headerlink\" title=\"3.3 泊松分布\"></a>3.3 泊松分布</h2><ul>\n<li>分布律：$P(X = x_k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}$ </li>\n<li>描述稀有事件发生的概率，交通路口发生事故的次数满足泊松分布</li>\n<li>随机变量取值为：$[ 0, +\\infty)$ </li>\n<li>泊松分布可以作为二项分布的一种近似<ul>\n<li>$X \\sim B(n, p)$，$n$ 很大，$p$ 很小，$np$ 较小，$P(X = k) = C_n^k p^k (1-p)^{n-k}\\approx e^{-\\lambda} \\frac{\\lambda^k}{k!}$, $\\lambda = np$ <ul>\n<li>$P(X = k) = C_n^k p^k (1-p)^{n-k} = \\frac{n(n-1)…(n-k+1)}{k!}p^k(1-p)^{n-k}$  </li>\n<li>因为 $p$ 很小，根据泰勒展开，$1 - p \\approx e^{-p}$ ，所以 $(1-p)^{n-k} \\approx e^{-p(n-k)}$ </li>\n<li>由于泊松分布一般描述稀有事件，即 $k$ 较小，由因为 $n$ 很大，所以 $n - k \\approx n$ ，$e^{-p(n-k)} \\approx e^{-pn} = e^{-\\lambda}$ </li>\n<li>同样因为 $k$ 较小，$n$ 很大，$\\frac{n(n-1)…(n-k+1)}{k!} p^k \\approx \\frac{(np)^k}{k!} = \\frac{\\lambda^k}{k!}$   </li>\n</ul>\n</li>\n<li>二项分布不好算，可以用泊松分布近似计算，从上面的推导可以看出 $k$ 不能很大</li>\n<li>$n$ 很大，$np$ 很小，准确点说 $n &gt;30$，$np &lt; 5$ 即可<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/泊松分布.png\">\n</li>\n</ul>\n</li>\n</ul>\n<p>二项分布当n等于1时，可以转成两点分布；当n很大，p很小的时候，可以转成泊松分布。</p>\n<p><br></p>\n<h1 id=\"4-分布函数和密度函数\"><a href=\"#4-分布函数和密度函数\" class=\"headerlink\" title=\"4. 分布函数和密度函数\"></a>4. 分布函数和密度函数</h1><h2 id=\"4-1-分布函数\"><a href=\"#4-1-分布函数\" class=\"headerlink\" title=\"4.1 分布函数\"></a>4.1 分布函数</h2><p>上面提到的都是离散型随机变量的概率分布 $P(X =x_k) = p_k,  k = 0,1,2,…$ ，离散型随机变量的取值是有限的或者是可数的，离散型变量的一个取值对应一个随机事件，而对于连续型变量，通常用一段区间来表示一个随机事件，如 $P(a &lt; X \\le b)$，这个概率又可以表示为 $P(X \\le b) - P(X \\le a)$。</p>\n<ul>\n<li><p>定义：$P(X \\le x) = F(x)$，$-\\infty &lt; x &lt; +\\infty$。随机变量 $X$ 的分布函数</p>\n</li>\n<li><p>分布函数直观来说就是表示随机变量取值小于某个值的概率，它具有以下几个性质</p>\n<ul>\n<li>分布函数是非递减的，且 $lim_{x\\to -\\infty} F(x) =0$ ，$lim_{x\\to +\\infty} F(x) =1$，从分布函数的定义就可以看出。</li>\n<li>离散型随机变量的分布函数不连续，因为离散变量的取值是有限的，因此分布函数会呈现出阶梯状，且是右连续的<ul>\n<li>$F(x) = P(X \\le x)=\\sum_{x_{k} \\le x} P(X = x_k) $ </li>\n</ul>\n</li>\n<li>连续型随机变量的分布函数是连续且递增的，有了分布函数，某个区间的概率值就很容易计算，$P(a &lt; X \\le b) = F(b) - F(a)$，<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/分布函数.png\">\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>注意区分以下分布律和分布函数，分布律是描述离散随机变量遵循的分布，简单来说就是取不同值的概率；而分布函数是随机变量小于某个值的概率</li>\n</ul>\n<h2 id=\"4-2-密度函数\"><a href=\"#4-2-密度函数\" class=\"headerlink\" title=\"4.2 密度函数\"></a>4.2 密度函数</h2><p>随机变量的分布函数 $F(x)$ 是描述随机变量取值小于某个值下的概率的函数，而随机变量的密度函数 $f(x)$ 满足以下几个条件，注意并不是所有的随机变量或者分布函数都有对应的密度函数，但是所有的随机变量都有分布函数</p>\n<ol>\n<li>$f(x)$ 是非负的</li>\n<li>$\\int_{-\\infty}^{+\\infty} f(x)dx=1$ </li>\n<li>$F(x) = \\int_{-\\infty}^{x}f(t)dt$  </li>\n</ol>\n<p>从上面的定义可以看出，密度函数 $f(x)$ 是分布函数 $F(x)$ 的微分，而 $F(x)$ 是 $f(x)$ 的积分，所以计算以下概率可以转变成求密度函数的积分，注意无论是分布函数还是密度函数，还是分布律，他们都是服务于算概率的</p>\n<script type=\"math/tex; mode=display\">P(a < X \\le b) = F(b) - F(a) = \\int_a^b f(x)dx</script><p>上面定义的第二点，也很容易理解，$\\int_{-\\infty}^{+\\infty} f(x)dx=F(+\\infty)-F(-\\infty)=1-0=1$  </p>\n<p>对于连续型随机变量 $P(X = a) = 0$，因为 $P(X = a) = lim_{h\\to 0} \\int_{a-h}^{a}f(x)dx=0$ </p>\n<p>分布函数连续不一定是连续型随机变量的分布函数，连续不一定可微，只有密度函数存在，才能说是连续随机变量</p>\n<h2 id=\"4-3-总结一下\"><a href=\"#4-3-总结一下\" class=\"headerlink\" title=\"4.3 总结一下\"></a>4.3 总结一下</h2><p>对于离散型的随机变量，只可以取有限个或者可数个值，我们可以用分布律去描述它，$P(X = x_k) = p_k$   </p>\n<p>对于连续型的随机变量，我们用一个区间去表示一个随机事件，但由于区间涉及两个边界值，我们引入分布函数 $F(x)$ 描述随机变量取值小于某个值的概率，进而引入密度函数 $f(x)$，然后概率值就可以转化为求密度函数的积分值</p>\n<p>但是对于离散型随机变量，我们也可以研究它的分布函数，但是它没有概率密度函数，因为它的分布函数不可微</p>\n<p><br></p>\n<h1 id=\"5-连续随机变量的分布\"><a href=\"#5-连续随机变量的分布\" class=\"headerlink\" title=\"5. 连续随机变量的分布\"></a>5. 连续随机变量的分布</h1><p>对于离散随机变量，我们可以用分布律来描述，对于连续型随机变量，我们可以用分布函数或密度函数来描述，分布律、分布函数、密度函数都是为了算概率而存在的</p>\n<h2 id=\"5-1-均匀分布\"><a href=\"#5-1-均匀分布\" class=\"headerlink\" title=\"5.1 均匀分布\"></a>5.1 均匀分布</h2><ul>\n<li><p>若一个随机变量的密度函数为以下的形式，则该随机变量服从均匀分布，$X \\sim U(a,b)$ </p>\n<script type=\"math/tex; mode=display\">f(x)= \\left\\{\\begin{array}{cc} \n\\frac{1}{b-a}, & a \\le x \\le b\\\\ \n0, & other\\ values \n\\end{array}\\right.</script></li>\n<li><p>均匀分布可以用示性函数 $I$ 来表示，$f(x) = \\frac{1}{b-a}I_{a\\le x\\le b}(x)$ </p>\n</li>\n</ul>\n<h2 id=\"5-2-指数分布\"><a href=\"#5-2-指数分布\" class=\"headerlink\" title=\"5.2 指数分布\"></a>5.2 指数分布</h2><ul>\n<li><p>指数分布的随机变量，密度函数满足 $f(x) =\\lambda e^{-\\lambda x} I_{x \\ge 0}(x)$，$\\lambda &gt; 0$，$X \\sim exp(\\lambda)$  </p>\n<script type=\"math/tex; mode=display\">f(x)= \\left\\{\\begin{array}{cc} \n\\lambda e^{-\\lambda x}, & x \\ge 0\\\\ \n0, & x < 0 \n\\end{array}\\right.</script></li>\n<li><p>$\\lambda$ 越大，密度函数下降得越快</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/指数分布.png\">\n</li>\n<li><p>指数分布最大的特点是无后效性，通常用来描述元件的寿命，即寿命是无老化的，假如我知道一个元件已经用了 $s$ 个小时，想知道原件能用 $s + t$ 个小时的概率，它就等于原件用 $t$ 个小时的概率</p>\n<ul>\n<li>$P(X &gt; s+t \\mid X&gt;s) = P(X &gt;t)$  </li>\n<li>证明：<ul>\n<li>令事件 $A$ 为 $X &gt; s+t$，事件 $B$ 为 $X &gt; s$，则 $P(A \\mid B) = \\frac{P(AB)}{P(B)}$  </li>\n<li>可以看出 $B \\subset A$，所以 $P(AB) = P(A)$ </li>\n<li>$P(A) = \\int_{s+t}^{+\\infty} \\lambda e^{-\\lambda x}dx$ </li>\n<li>令 $\\lambda x=u$，则 $P(A) = \\int_{\\lambda(s+t)}^{+\\infty} e^{-u}du = -e^{-u} \\mid_{\\lambda(s+t)}^{+\\infty} = e^{-\\lambda(s+t)}$  </li>\n<li>同理，$P(B)=e^{-\\lambda s}$  </li>\n<li>因此，$P(A \\mid B) = \\frac{P(A)}{P(B)} = e^{-\\lambda t} = P(X &gt; t)$  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-3-正态分布\"><a href=\"#5-3-正态分布\" class=\"headerlink\" title=\"5.3 正态分布\"></a>5.3 正态分布</h2><ul>\n<li>密度函数满足 $f(x) = \\frac{1}{\\sqrt{2\\pi} \\sigma} exp(-\\frac{(x-\\mu)^2}{2\\sigma^2})$，$-\\infty &lt; x &lt; +\\infty$，记为 $X \\sim N(\\mu, \\sigma^2)$    </li>\n<li>密度函数的曲线有以下性质<ul>\n<li>对称函数，对称轴为 $x = \\mu$，对称轴左边单调递增，对称轴右边单调递减，极值落在 $x = \\mu$ 上，为$\\frac{1}{\\sqrt{2\\pi} \\sigma}$</li>\n<li>$\\sigma$ 的大小决定了密度函数的陡峭程度</li>\n</ul>\n</li>\n<li>当 $\\mu = 0$，$\\sigma = 1$ 的时候，称为标准正态分布，密度函数记为 $\\phi(x)$，分布函数记为 $\\Phi(x)$ <ul>\n<li>分布函数 $\\Phi(x)$ 是密度函数 $\\phi(x)$ 的积分，$\\Phi(x) = \\int_{-\\infty}^x \\phi(t)dt$ </li>\n<li>$\\Phi(x) = 1 - \\Phi(-x)$，可以从密度函数 $\\phi(x)$ 算面积很容易证出。</li>\n</ul>\n</li>\n<li>一般的正态分布 $X \\sim N(\\mu, \\sigma^2)$ 都可以转成标准正态分布 $X \\sim N(0, 1)$，其分布函数 $F(x) = \\Phi(\\frac{x-\\mu}{\\sigma})$ ，然后通过查标准正态分布表格来算出概率。</li>\n</ul>\n<p><br></p>\n<h1 id=\"6-多维随机变量\"><a href=\"#6-多维随机变量\" class=\"headerlink\" title=\"6. 多维随机变量\"></a>6. 多维随机变量</h1><p>多维随机变量也称随机向量，跟一维随机变量一样，多维随机变量就是多个随机事件的并集，或者说是多个事件的联合概率，像一维随机变量，我们同样关注多维随机向量的分布。</p>\n<h2 id=\"6-1-二维离散型随机向量的分布\"><a href=\"#6-1-二维离散型随机向量的分布\" class=\"headerlink\" title=\"6.1 二维离散型随机向量的分布\"></a>6.1 二维离散型随机向量的分布</h2><p>$P(X=x_i, Y=y_j)=p_{i,j}$ </p>\n<p> 同样应该满足密度分布的基本条件</p>\n<ol>\n<li>$p_{i,j}&gt;0$</li>\n<li>$\\sum\\sum p_{ij}=1$ </li>\n</ol>\n<h2 id=\"6-2-二维连续型随机向量的分布\"><a href=\"#6-2-二维连续型随机向量的分布\" class=\"headerlink\" title=\"6.2 二维连续型随机向量的分布\"></a>6.2 二维连续型随机向量的分布</h2><p>类似一维随机变量，我们用分布函数来描述它的概率分布，$F(x,y)$ 称为随机向量 $(X,Y)$ 的联合分布函数。</p>\n<p>$F(x, y)=P(X \\le x, Y \\le y)$ </p>\n<p>将二维随机变量 $(X,Y)​$ 看成是平面上随机点的坐标，那么，分布函数 $F(x,y)​$ 在点 $(x,y)​$ 处的函数值就是下图无穷矩形域内的面积占整个平面的概率。<br><img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二维随机变量.png\"></p>\n<p>$F(x,y)$ 有如下性质：</p>\n<ol>\n<li>给定 $y$，$F(x,y)$ 是 $x$ 的非减函数；给定 $x$, $F(x,y)$ 是 $y$ 的非减函数</li>\n<li>$\\lim_{x \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{y \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{x \\rightarrow +\\infty, y \\rightarrow +\\infty} F(x,y)=1$ </li>\n<li>$P(a&lt;X \\le b, c &lt; Y \\le d) = F(b,d) - F(a,d) - F(b,c) + F(a,c)$     </li>\n<li>$P(X \\le x_i) = P(X \\le x_i, Y \\le +\\infty) = F(x_i, +\\infty)$ </li>\n<li>$F(x,y)$ 分别是关于 $x$ 和 $y$ 右连续</li>\n</ol>\n<p>同样从分布函数引出概率密度函数，若对分布函数 $F(x,y)$，存在 $f(x,y) \\ge 0$，使得对任一 $(x,y) \\in R^2$，有 $F(x,y)=\\int_{-\\infty}^{x} \\int_{-\\infty}^{y} f(u,v)dudv$，则称 $F(x,y)$ 为连续型联合分布函数，$f(x,y)$ 为联合密度函数。 $f(x,y)$ 同样具有以下性质：</p>\n<ol>\n<li>$f(x,y) \\ge 0$  </li>\n<li>$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ </li>\n<li>$\\frac{\\partial F(x,y)}{\\partial x \\partial y} = f(x,y)$ </li>\n</ol>\n<p>几何上，$z=f(x,y)$ 表示空间的一个曲面，$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ 表示介于 $f(x,y)$ 与 $xOy$  平面之间的空间区域的面积。<br><img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二维正态.png\"></p>\n<p><br></p>\n<h1 id=\"7-边缘分布-marginal-distribution\"><a href=\"#7-边缘分布-marginal-distribution\" class=\"headerlink\" title=\"7. 边缘分布(marginal distribution)\"></a>7. 边缘分布(marginal distribution)</h1><ul>\n<li><p>定义：已知 $(X,Y)$ 的联合分布函数为 $F(x,y)$，则 $X$ 的分布 $F_1(x)$ 和 $Y$ 的分布 $F_2(y)$ 称为 $F(x,y)$ 的边缘分布</p>\n<ul>\n<li>$F_1(x)=P(X \\le x)=P(X \\le x, Y \\le +\\infty)=F(x, +\\infty)$ </li>\n<li>$F_2(y)=P(Y \\le y)=P(Y \\le y, X \\le +\\infty) = F(+\\infty, y)$ </li>\n</ul>\n</li>\n<li><p>二维离散型随机变量的边缘分布</p>\n<ul>\n<li>二维离散随机变量的分布一般以联表的形式表示</li>\n<li>固定某个 $x_i$，$P(X=x_i) = \\sum_{j=1}^{m}p_{ij}$，联表每一行的求和就是随机变量 $X$ 的边缘分布，可记为 $p_{i\\bullet}$ </li>\n<li>固定某个 $y_i$ ，$P(Y=y_j) = \\sum_{i=1}^{n}p_{ij}$ ，联表每一列的求和就是随机变量 $Y$ 的边缘分布，可记为 $p_{\\bullet j}$ </li>\n</ul>\n</li>\n<li><p>二维连续型随机变量的边缘分布</p>\n<ul>\n<li>二维连续随机变量的分布一般以概率密度函数的形式表示</li>\n<li>从联合密度函数，求 $X$ 的密度函数，就需要将随机变量 $Y$ 从积分中去掉，$f_X(u) = \\int_{-\\infty}^{+\\infty}f(u,v)dv$ <ul>\n<li>$F_X(x) = F(x, +\\infty)=\\int_{-\\infty}^x[\\int_{-\\infty}^{+\\infty}f(x,y)dy]dx=\\int_{-\\infty}^{x}f_X(x)dx$ </li>\n</ul>\n</li>\n<li>同理，求 $Y$ 的密度函数，，$f_Y(v) = \\int_{-\\infty}^{+\\infty}f(u,v)du$    </li>\n</ul>\n</li>\n<li><p>二维正态分布的边缘分布就是一维正态分布</p>\n</li>\n<li><p>注意：联合分布可以推出边缘分布，但是边缘分布不能推出联合分布，例子：一维正态分布推不出二维正态分布，二维正态分布还有一个参数 $\\rho$</p>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"8-条件分布\"><a href=\"#8-条件分布\" class=\"headerlink\" title=\"8. 条件分布\"></a>8. 条件分布</h1><p>假设有两个随机变量 $X,Y$，在给定 $Y$ 取某个或某些值的条件下，$X$ 的概率分布就叫做 $Y = y_j$ 条件下 $X$ 的条件分布律。</p>\n<h2 id=\"8-1-离散型随机变量的条件分布\"><a href=\"#8-1-离散型随机变量的条件分布\" class=\"headerlink\" title=\"8.1 离散型随机变量的条件分布\"></a>8.1 离散型随机变量的条件分布</h2><ul>\n<li>定义：设 $(X,Y)$ 为二维离散型随机变量，若对固定的 $j$ ，称 $P(X=x_i \\mid Y=y_j) = \\frac{p_{ij}}{p_{\\bullet j}}$ 为 $Y = y_j$ 条件下的 $X$ 的条件分布律；同理，对固定的 $i$ ，称 $P(Y=y_j \\mid X=x_i) = \\frac{p_{ij}}{p_{i\\bullet}}$  为 $X = x_i$ 条件下的 $Y$ 的条件分布律；</li>\n<li>条件分布是一种概率分布，它具有概率分布的一切性质，正如条件概率是一种概率，具有概率的一切性质一样。<ul>\n<li>$P(X=x_i \\mid Y=y_j) \\ge 0$</li>\n<li>$\\sum_{i=1}^{\\infty} P(X=x_i \\mid Y=y_j) =1$ </li>\n</ul>\n</li>\n<li>离散型随机变量的条件分布，就是在联合分布的联表的某一行或者某一列的分布。</li>\n<li>由条件分布和边缘分布，可以根据乘法公式，求得联合分布<ul>\n<li>$P(X=x_i, Y=y_j) = P(X=x_i)P(Y=y_j \\mid X= x_i)$ </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-2-连续型随机变量的条件分布\"><a href=\"#8-2-连续型随机变量的条件分布\" class=\"headerlink\" title=\"8.2 连续型随机变量的条件分布\"></a>8.2 连续型随机变量的条件分布</h2><ul>\n<li><p>定义：设 $X$ 和 $Y$ 的联合概率密度为 $f(x,y)$，$(X,Y)$ 关于 $Y$ 的边缘概率密度为 $f_Y(y)$，若对于固定的 $y$，$f_Y(y) &gt;0$，则称 $\\frac{f(x,y)}{f_Y(y)}$ 为在 $Y = y$ 的条件下 $X$ 的条件概率密度，记为 $f_{X \\mid Y}(x \\mid y) = \\frac{f(x,y)}{f_Y(y)}$，同理，$f_{Y \\mid X}(y \\mid x) = \\frac{f(x,y)}{f_X(x)}$ </p>\n</li>\n<li><p>由条件密度和边缘密度，可以得到联合密度</p>\n<ul>\n<li>$f(x,y)=f_X(x)f_{Y \\mid X}(y \\mid x)$ </li>\n</ul>\n</li>\n<li>例题：从 [0,1] 中随机取一个数 $X$， 则 $X \\sim U(0,1)$，当 $X=x$ 时，再从 $(0,x)$ 中随机取一个数 $Y$，求 $Y$ 的分布。<ul>\n<li>题目给定 $X$ 的分布，以及在 $X = x$ 下 $Y$ 的条件分布，自然可以算出 $(X,Y)$ 的联合分布，再从联合分布就可以算出 $Y$ 的边缘分布</li>\n<li>$f_X(x)=I_{(0,1)}(x)$，$f_{Y \\mid X}(y \\mid x) = \\frac{1}{x}I_{(0,x)}(y)$ </li>\n<li>联合分布：$f(x,y) = I_{(0,1)}(x) \\frac{1}{x}I_{(0,x)}(y)$ </li>\n<li>边缘分布：$f_Y(y)=\\int f(x.y)dx$，算这种积分最重要的就是搞清楚，谁变谁不变，以及积分的上下限是多少，显然被积的是 $x$，所以 $x$ 是变量，$y$ 是常数，所以我们固定某一个 $y$，可以得出 $x$ 的范围是 $[y,1]$，因此 $f_Y(y)=-ln(y)$ ，最后限定 $y$ 的范围是 $(0,1)$ </li>\n</ul>\n</li>\n</ul>\n<p><strong>有了联合分布，边缘分布和条件分布都能求</strong><br><br></p>\n<h1 id=\"9-随机变量的独立性\"><a href=\"#9-随机变量的独立性\" class=\"headerlink\" title=\"9. 随机变量的独立性\"></a>9. 随机变量的独立性</h1><ul>\n<li>回忆两个随机事件独立的定义是：$P(AB)= P(A)P(B)$</li>\n<li>随机变量之间的独立好比，两个或多个随机变量的任意取值所代表的随机事件都相互独立<ul>\n<li>离散型随机变量：$P(X = x_i, Y = Y_j) = P(X = x_i)P(Y = y_j)$ </li>\n<li>连续型随机变量独立即联合分布等于边缘分布的乘积，$F(x,y) = F_X(x)F_Y(y)$；或联合密度等于边缘密度的乘积，$f(x,y)=f_X(x)f_Y(y)$ </li>\n</ul>\n</li>\n<li>两个随机变量 $(X,Y)$ 相互独立就是指 $X$ 有关的任何事件发生与否都与 $Y$ 有关的任意时间发生与否无关。</li>\n<li>随机变量的独立是随机事件独立的延申，从两个事件的独立，延申至一系列事件的独立。</li>\n<li>如果多个随机变量相互独立，且分布一致，称为独立同分布，简称 independent identical distribution(iid).</li>\n</ul>\n<p><br></p>\n<h1 id=\"10-随机变量的函数的概率分布\"><a href=\"#10-随机变量的函数的概率分布\" class=\"headerlink\" title=\"10. 随机变量的函数的概率分布\"></a>10. 随机变量的函数的概率分布</h1><ul>\n<li>随机变量函数：已知随机变量 $X$ 的分布，另一个随机变量 $Y$ 满足 $Y = g(X)$，这就是随机变量的函数，我们可以从自变量(随机变量 $X$ )的分布求出随机变量 $Y$ 的分布<ul>\n<li>连续型：$F(y) = P(Y \\le y) = \\int_{g(x)\\le y} f(x)dx$ </li>\n<li>离散型：$P(Y = y_j) = \\sum_{g(x_i)=y_j}P(X = x_i)$ </li>\n</ul>\n</li>\n<li>推广至随机向量的函数：已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z = g(X, Y)$，求 $Z$ 的分布<ul>\n<li>连续型： $F(Z) = P(Z \\le z)= \\int\\int_{g(x,y) \\le z}f(x,y)dxdy$ </li>\n<li>离散型：$P(Z = z_q) = \\sum_{g(x_i,y_j) = z_q}P(X = x_i, Y = y_j)$，若 $X$ 和 $Y$ 独立，那么后面的概率可以拆成两个单独概率想乘。</li>\n</ul>\n</li>\n<li>推广至随机向量的多个函数： 已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z_1 = g_1(X, Y)$，另一个随机变量 $Z_2 = g_2(X, Y)$，求 $(Z_1, Z_2)$ 的联合分布<ul>\n<li>$F(Z_1, Z_2) = P(Z_1 \\le z_1, Z_2 \\le z_2) = \\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy$  </li>\n<li>设 $u = g_1(x,y)$，$v = g_2(x,y)$，若反函数存在，即 $x = \\phi(u, v)$，$y = \\psi(u,v)$， </li>\n<li>$\\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy = \\int\\int_{u \\le z_1, v \\le z_2} f(\\phi(u,v), \\psi(u,v)) \\frac{dxdy}{dudv}dudv$ <ul>\n<li>$\\frac{dxdy}{dudv} = |J|$，为 $(x,y)$ 关于 $(u,v)$ 的 Jacobi行列式</li>\n<li>$J = \\left|\\begin{array}{cccc}  \\frac{\\partial x}{\\partial u} &amp;    \\frac{\\partial x}{\\partial v} \\\\<br>\\frac{\\partial y}{\\partial u} &amp;    \\frac{\\partial y}{\\partial v}\\ <br>\\end{array}\\right|  $     </li>\n</ul>\n</li>\n<li>所以 $(Z_1,Z_2)$ 的分布函数等于 $F(Z_1, Z_2) = \\int_{-\\infty}^{z_1}\\int_{-\\infty}^{v_1} f(\\phi(u,v), \\psi(u,v)) |J|dudv$，</li>\n<li>同理，$(Z_1,Z_2)$ 的密度函数为 $ f(\\phi(u,v), \\psi(u,v)) |J|$ </li>\n</ul>\n</li>\n<li><p>例题：在直角坐标平面随机选取一点，分别以随机变量 $X$ 和 $Y$ 表示其横纵坐标，可以认为 $X$ 和 $Y$ 相互独立，且都服从正态分布 $N(0,1)$，求极坐标 $(R, t)$ 的分布 </p>\n<ul>\n<li>题意是已知 $X$ 和 $Y$ 的分布，求 $(R,t)$ 的联合分布</li>\n<li>反函数很容易得：$x = Rcost$，$y = Rsint$，$R \\in [0, +\\infty]$，$t \\in [0, 2 \\pi)$ </li>\n<li><p>$J = \\left|\\begin{array}{cccc} \\frac{\\partial x}{\\partial R} &amp;    \\frac{\\partial x}{\\partial t} \\\\<br>\\frac{\\partial y}{\\partial R} &amp;    \\frac{\\partial y}{\\partial t}\\ <br>\\end{array}\\right| = \\left|\\begin{array}{cccc} cost &amp;    -Rsint \\\\<br>sint &amp;   Rcost\\ <br>\\end{array}\\right| = R$</p>\n</li>\n<li><p>$(X,Y)$ 的联合密度为其边缘密度的乘积($X$ 和 $Y$ 相互独立)，$f(x,y) = \\frac{1}{2\\pi}exp(-\\frac{x^2+y^2}{2})$ </p>\n</li>\n<li>$f(R,t) =  f(Rcost, Rsint) |J| = \\frac{1}{2\\pi}Rexp(-\\frac{R^2}{2})$，$R &gt; 0$，$t \\in [0, 2 \\pi)$ </li>\n<li>$f(R,t) = f_1(R)f_2(t)$，其中 $f_1(R) = Rexp(-\\frac{R^2}{2})I_{R&gt;0}(R)$，$f_2(t) = \\frac{1}{2\\pi}I_{[0,2\\pi)}(t)$，由于f(R,t) 可以写成两个密度函数的乘积，所以 $R$ 和 $t$ 相互独立，且 $t$ 服从 $[0,2\\pi)$ 的均匀分布 </li>\n</ul>\n</li>\n<li><p>注意：两个服从正态分布的随机变量的和也服从正态分布，$X \\sim N(\\mu_1, \\sigma_1^2)$，$Y \\sim N(\\mu_2, \\sigma_2^2)$，且 $X$ 和 $Y$ 相互独立，则 $X + Y  \\sim N(\\mu_1 +\\mu_2, \\sigma_1^2 + \\sigma_2^2)$ </p>\n</li>\n<li><p>设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $M = max(X,Y)$ 的分布</p>\n<ul>\n<li>$F_M(z) = P(max(X,Y) \\le z) = P(X \\le z, Y \\le z) = P(X \\le z)P(Y \\le z) = F_X(z)F_Y(z)$  </li>\n<li>密度函数：$f_M(z) = \\frac{\\partial F_M(z)}{\\partial z} = f_X(z)F_Y(z) + F_X(z)f_Y(z)$ </li>\n<li>推广至n个随机变量的最大值也是同样的道理，最大值小于 $z$，即每个随机变量都小于 $z$</li>\n</ul>\n</li>\n<li><p>设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $N = min(X,Y)$ 的分布</p>\n<ul>\n<li><p>$N$ 等于 $X$ 和 $Y$ 的最小值，$N \\le z$，即 $X$ 和 $Y$ 的任意一个小于 $z$，求它的对立事件，即 $X$ 和 $Y$ 都大于 $z$</p>\n</li>\n<li><p>$F_N(z) = P(N \\le z) = 1-P(N &gt; z) = 1- P(X &gt; z, Y &gt; z) = 1 - P(X &gt; z)P(Y &gt; z) $ </p>\n<p>$= 1 - (1-F_X(z))(1-F_Y(z))$  </p>\n</li>\n<li><p>密度函数：$f_N(z) = \\frac{\\partial F_N(z)}{\\partial z} = -f_X(z)(1-F_Y(z)) + (1-F_X(z))f_Y(z)$  </p>\n</li>\n</ul>\n<p>关键就是改变积分的区域，通过随机变量函数，约定积分区域</p>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"11-统计三大分布\"><a href=\"#11-统计三大分布\" class=\"headerlink\" title=\"11. 统计三大分布\"></a>11. 统计三大分布</h1><p>$\\Gamma(x)=\\int_0^\\infty e^{-t}t^{x-1}dt$，$x &gt; 0$</p>\n<p>性质：</p>\n<ol>\n<li>$\\Gamma(x+1) = x\\Gamma(x)$，$\\Gamma(1)=1$，$\\Gamma(n+1) = n!$ </li>\n<li>$\\Gamma(\\frac{1}{2}) = \\sqrt{\\pi}$ </li>\n</ol>\n<h2 id=\"11-1-卡方分布-chi-squared-distribution\"><a href=\"#11-1-卡方分布-chi-squared-distribution\" class=\"headerlink\" title=\"11.1 卡方分布(chi-squared distribution)\"></a>11.1 卡方分布(chi-squared distribution)</h2><ul>\n<li><p>定义：设 $X_1, X_2, …, X_n$ 独立同分布，均服从标准正态分布，$\\chi^2 = \\sum_1^nX_i^2$，则称 $\\chi^2$ 是自由度为 $n$ 的卡方分布，记为 $\\chi_n^2$，自由度是指能够自由变换的自变量的个数，如果受到一个约束，自由度就要减一，依次类推。</p>\n</li>\n<li><p>卡方分布的密度函数为</p>\n<ul>\n<li><p>$f_n(x) = \\frac{x^{\\frac{x-2}{2}}e^{-\\frac{x}{2}}}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}$ </p>\n</li>\n<li><p>当 $n=1$，$f_1(x) = \\frac{x^{-\\frac{1}{2}}e^{-\\frac{1}{2}}}{2^{\\frac{1}{2}} \\sqrt{\\pi}}$，为单调递减函数；当 $n=2$，$f_2(x) = e^{-x}$，同为单调递减，当 $n \\ge 3$，曲线有单峰，从 $0$ 开始单调上升，再单调下降趋向于0；由于是密度函数，其积分值为1。</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/卡方分布.png\">\n</li>\n<li><p>若 $X \\sim \\chi_n^2$，记 $p(X &gt; c) = \\alpha$，则 $c = \\chi_n^2(\\alpha)$ 称为卡方分布的上侧分位数，给定 $\\alpha$，可以通过查卡方分布表格，求出 $c$。</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/卡方分布alpha.png\">\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-2-t-分布\"><a href=\"#11-2-t-分布\" class=\"headerlink\" title=\"11.2 t 分布\"></a>11.2 t 分布</h2><ul>\n<li><p>又称 student‘s distribution</p>\n</li>\n<li><p>定义：设 $X \\sim N(0,1)$，$Y \\sim \\chi_n^2$，且 $X$ 和 $Y$ 相互独立，令 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$，则称 $T$ 的分布为自由度为 $n$ 的t分布，记为 $T \\sim t_n$。</p>\n</li>\n<li><p>概率密度函数为</p>\n<ul>\n<li><p>$t_n(x) = \\frac{\\Gamma(\\frac{n+1}{x})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{x^2}{n})^{-\\frac{n+1}{2}}$ </p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/t分布.png\" width=\"500\" height=\"250\">\n</li>\n<li><p>与标准正态分布的关系</p>\n<ul>\n<li>t分布的密度函数与标准正态分布的密度很相似，都是关于y轴对称，偶函数</li>\n<li>t分布密度函数的峰值要低于标准正态的峰值，但尾部要比正态要高，这很正常，因为密度函数积分都要等于1，中间高度低了，两边的高度就要上升</li>\n<li>当 $n$ 趋于无穷的时候，$t_n$ 会趋于标准正态。</li>\n</ul>\n</li>\n<li><p>若 $T \\sim t_n$，$P(|T| &gt; c) = \\alpha$，则 $c = t_n(\\alpha / 2)$ 称为t分布的双侧 $\\alpha$ 分位数</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/t分布alpha.png\">\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-3-F-分布\"><a href=\"#11-3-F-分布\" class=\"headerlink\" title=\"11.3 F 分布\"></a>11.3 F 分布</h2><ul>\n<li><p>定义：$X \\sim \\chi_n^2$， $Y \\sim \\chi_m^2$，$X$ 和 $Y$ 相互独立，令 $Z = \\frac{X/n}{Y/m}$，则称 $Z$ 为自由度是 $n$ 和 $m$ 的 $F$ 分布，记为 $F \\sim F_{n,m}$ </p>\n</li>\n<li><p>$t$ 分布的平方为一个自由度为1和n的F分布，$t_n^2 = \\frac{X^2}{Y/n}$，$X$ 为标准正态，$X^2$ 为自由度为1的卡方分布</p>\n</li>\n<li><p>同样有上测 $\\alpha$ 分位数的概念</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/F分布.png\">\n</li>\n<li><p>性质：$F_{m,n}(1-\\alpha) = \\frac{1}{F_{n,m}(\\alpha)}$<br><br></p>\n<h1 id=\"12-总结\"><a href=\"#12-总结\" class=\"headerlink\" title=\"12. 总结\"></a>12. 总结</h1><p>这一章将随机事件过渡为随机变量，进而描述一系列随机事件发生的概率，也就是所谓的随机变量的分布，很多第一章提到的概念，如条件概率，在这一章都会以分布的形式出现，都是描述一系列的概率值，牢记，无论是分布函数还是密度函数，还是积分，它们都是为算概率服务的，最终目的都是算概率。</p>\n</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>课程名称：概率论与数理统计<br>开设学校：中科大<br>课程平台：icourse<br>第二章：随机变量及其分布，讲述离散型和连续型随机变量的概念，离散随机变量分布律，常见的离散随机变量的概率分布；随机变量的分布函数和概率密度函数</p>\n</blockquote>","more":"<h1 id=\"1-随机变量的概念\"><a href=\"#1-随机变量的概念\" class=\"headerlink\" title=\"1. 随机变量的概念\"></a>1. 随机变量的概念</h1><p>之前我们研究的概率，是基于样本空间下的一个随机试验，研究其发生的概率，若我们要研究一连串的随机试验及其它发生的概率，往往这一连串的事件之间有联系，我们就可以引入随机变量，用一个数字或者一个区间来表示这一连串的随机事件，如 $X$ 表示抛 5 次硬币正面向上的次数，那么我们就可以用 $X=3$ 来表示 5 次有 3 次正面向上这一个随机事件；</p>\n<p>所以，随机变量就是一个数与一个事件的对应关系，相当于是一个随机变量的一个取值对应一个随机事件，随机变量的引入就是为了更加简洁地表示一个随机事件，不需要用一大串的文字描述。但是随机变量的引入更多是为了研究一连串相关的事件，而不只是随机变量某一取值时刻下的事件，往往是研究随机变量不同取值下的不同随机事件之间的联系。<br><br></p>\n<h1 id=\"2-如何研究随机变量\"><a href=\"#2-如何研究随机变量\" class=\"headerlink\" title=\"2. 如何研究随机变量\"></a>2. 如何研究随机变量</h1><p>由于随机变量是表示一连串的事件，首先我们得确定随机变量可以取哪些值，即确定有哪些随机事件。其次我们需要研究随机变量取不同值下所表示的随机事件发生的概率。</p>\n<p>之前说到，我们用一个数字或者一个区间来表示一个随机事件，这里面就包含了两种随机变量：离散型随机变量和连续性随机变量，前者随机变量的取值是可数的或者有限的，后者不可数。<br><br></p>\n<h1 id=\"3-离散随机变量的分布\"><a href=\"#3-离散随机变量的分布\" class=\"headerlink\" title=\"3. 离散随机变量的分布\"></a>3. 离散随机变量的分布</h1><p>当随机变量取不同取值的时候，所表示的随机事件的概率会不同，对于离散型的随机变量，我们可以用表格的形式，列出不同取值下的概率，这就是随机变量的概率分布，即不同取值下所表示的随机事件的概率值，可以统一用以下的式子来表示。此式子叫做分布律</p>\n<script type=\"math/tex; mode=display\">P(X = x_k) = p_k，k = 1,2,...</script><p>且满足</p>\n<ol>\n<li>$p_k \\ge 0，k = 1,2,…$</li>\n<li>$\\sum_1^{+\\infty}p_k = 1$ </li>\n</ol>\n<p>或者用表格来表示</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">$X$</th>\n<th style=\"text-align:center\">$x_1$</th>\n<th style=\"text-align:center\">$x_2$</th>\n<th style=\"text-align:center\">$x_3$</th>\n<th>$…$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$p_k$</td>\n<td style=\"text-align:center\">$p_1$</td>\n<td style=\"text-align:center\">$p_2$</td>\n<td style=\"text-align:center\">$p_3$</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-1-离散均匀分布\"><a href=\"#3-1-离散均匀分布\" class=\"headerlink\" title=\"3.1 离散均匀分布\"></a>3.1 离散均匀分布</h2><ul>\n<li>分布律：$ P(X = x_k) = \\frac{1}{n}$， $k = 1,2,…,n $</li>\n<li>其实就是我们之前所说的古典概型，古典概型满足两个特性，有限性和等可能性，实际上描述的就是离散均匀分布，随机变量的每个取值对应一个基本事件，每一个基本事件的概率都是一样。</li>\n</ul>\n<h2 id=\"3-2-二项分布\"><a href=\"#3-2-二项分布\" class=\"headerlink\" title=\"3.2 二项分布\"></a>3.2 二项分布</h2><ul>\n<li><p>在一次试验中事件 $A$ 发生的概率为 $p$ ，把这种试验重复做 $n$ 次，若把 $X$ 记为 $n$ 次试验中事件 $A$ 发生的次数，$X$ 可以取 $0-n$，$P(X = k) = C_n^k p^k (1-p)^{n-k}$ ，称 $X$ 服从二项分布，记为 $X \\sim B(n, p)$   $~$ </p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二项分布.png\">\n</li>\n<li><p>伯努利试验：一次试验中可能的结果为 $A$ 和 $A$ 的对立事件，重复做这样的试验</p>\n</li>\n<li><p>若 $n=1$，则变为 $0-1$ 分布，或叫两点分布或伯努利分布，$X$ 只取0，1两个值，$P(X = 1) = p$, $P(X = 0) = 1 - p$，$X = 1$表示 $A$ 发生，$X = 0$ 表示 $A$ 不发生。两点分布是最简单的一种分布，任何一个只有两种可能结果的随机现象，如明天是否下雨，都属于两点分布</p>\n</li>\n<li><p>任何概率分布都应该满足 $P(X = x_k) \\ge 0$,   $ \\sum_1^n P(X = x_k) = 1 $，二项分布也满足，二项式定理展开就可以证明</p>\n<ul>\n<li>$\\sum_1^n P(X = x_k) = \\sum_1^n C_n^{k} p^k(1-p)^{n-k} = (p + 1-p)^n = 1$</li>\n</ul>\n</li>\n<li><p>求解 $P(X = x_k)$取最大值的 $k$ 值</p>\n<ul>\n<li>令 $b_k = P(X = x_k)  = C_n^k p^k(1-p)^{n-k} = \\frac{n!}{k!(n-k)!}p^k(1-p)^{n-k}$ </li>\n<li>最大值应该满足 $\\frac{b_k}{b_{k-1}} \\ge 1$ 且 $\\frac{b_{k}}{b_{k+1}} \\ge 1$</li>\n<li>解得 $p(n+1)-1 \\le k \\le p(n+1)$  </li>\n<li>若 $p(n+1)$ 为整数，则最大值时k有两个值</li>\n</ul>\n</li>\n<li><p>例题：若100个人射飞机，射中飞机的概率为0.02，假设 $X$ 为射中飞机的人数，那么 $X \\sim B(100, 0.02)$ ，100个人本来是相互独立地射飞机，但是可以看成100次重复的随机试验，所以满足二项分布</p>\n</li>\n</ul>\n<h2 id=\"3-3-泊松分布\"><a href=\"#3-3-泊松分布\" class=\"headerlink\" title=\"3.3 泊松分布\"></a>3.3 泊松分布</h2><ul>\n<li>分布律：$P(X = x_k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}$ </li>\n<li>描述稀有事件发生的概率，交通路口发生事故的次数满足泊松分布</li>\n<li>随机变量取值为：$[ 0, +\\infty)$ </li>\n<li>泊松分布可以作为二项分布的一种近似<ul>\n<li>$X \\sim B(n, p)$，$n$ 很大，$p$ 很小，$np$ 较小，$P(X = k) = C_n^k p^k (1-p)^{n-k}\\approx e^{-\\lambda} \\frac{\\lambda^k}{k!}$, $\\lambda = np$ <ul>\n<li>$P(X = k) = C_n^k p^k (1-p)^{n-k} = \\frac{n(n-1)…(n-k+1)}{k!}p^k(1-p)^{n-k}$  </li>\n<li>因为 $p$ 很小，根据泰勒展开，$1 - p \\approx e^{-p}$ ，所以 $(1-p)^{n-k} \\approx e^{-p(n-k)}$ </li>\n<li>由于泊松分布一般描述稀有事件，即 $k$ 较小，由因为 $n$ 很大，所以 $n - k \\approx n$ ，$e^{-p(n-k)} \\approx e^{-pn} = e^{-\\lambda}$ </li>\n<li>同样因为 $k$ 较小，$n$ 很大，$\\frac{n(n-1)…(n-k+1)}{k!} p^k \\approx \\frac{(np)^k}{k!} = \\frac{\\lambda^k}{k!}$   </li>\n</ul>\n</li>\n<li>二项分布不好算，可以用泊松分布近似计算，从上面的推导可以看出 $k$ 不能很大</li>\n<li>$n$ 很大，$np$ 很小，准确点说 $n &gt;30$，$np &lt; 5$ 即可<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/泊松分布.png\">\n</li>\n</ul>\n</li>\n</ul>\n<p>二项分布当n等于1时，可以转成两点分布；当n很大，p很小的时候，可以转成泊松分布。</p>\n<p><br></p>\n<h1 id=\"4-分布函数和密度函数\"><a href=\"#4-分布函数和密度函数\" class=\"headerlink\" title=\"4. 分布函数和密度函数\"></a>4. 分布函数和密度函数</h1><h2 id=\"4-1-分布函数\"><a href=\"#4-1-分布函数\" class=\"headerlink\" title=\"4.1 分布函数\"></a>4.1 分布函数</h2><p>上面提到的都是离散型随机变量的概率分布 $P(X =x_k) = p_k,  k = 0,1,2,…$ ，离散型随机变量的取值是有限的或者是可数的，离散型变量的一个取值对应一个随机事件，而对于连续型变量，通常用一段区间来表示一个随机事件，如 $P(a &lt; X \\le b)$，这个概率又可以表示为 $P(X \\le b) - P(X \\le a)$。</p>\n<ul>\n<li><p>定义：$P(X \\le x) = F(x)$，$-\\infty &lt; x &lt; +\\infty$。随机变量 $X$ 的分布函数</p>\n</li>\n<li><p>分布函数直观来说就是表示随机变量取值小于某个值的概率，它具有以下几个性质</p>\n<ul>\n<li>分布函数是非递减的，且 $lim_{x\\to -\\infty} F(x) =0$ ，$lim_{x\\to +\\infty} F(x) =1$，从分布函数的定义就可以看出。</li>\n<li>离散型随机变量的分布函数不连续，因为离散变量的取值是有限的，因此分布函数会呈现出阶梯状，且是右连续的<ul>\n<li>$F(x) = P(X \\le x)=\\sum_{x_{k} \\le x} P(X = x_k) $ </li>\n</ul>\n</li>\n<li>连续型随机变量的分布函数是连续且递增的，有了分布函数，某个区间的概率值就很容易计算，$P(a &lt; X \\le b) = F(b) - F(a)$，<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/分布函数.png\">\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>注意区分以下分布律和分布函数，分布律是描述离散随机变量遵循的分布，简单来说就是取不同值的概率；而分布函数是随机变量小于某个值的概率</li>\n</ul>\n<h2 id=\"4-2-密度函数\"><a href=\"#4-2-密度函数\" class=\"headerlink\" title=\"4.2 密度函数\"></a>4.2 密度函数</h2><p>随机变量的分布函数 $F(x)$ 是描述随机变量取值小于某个值下的概率的函数，而随机变量的密度函数 $f(x)$ 满足以下几个条件，注意并不是所有的随机变量或者分布函数都有对应的密度函数，但是所有的随机变量都有分布函数</p>\n<ol>\n<li>$f(x)$ 是非负的</li>\n<li>$\\int_{-\\infty}^{+\\infty} f(x)dx=1$ </li>\n<li>$F(x) = \\int_{-\\infty}^{x}f(t)dt$  </li>\n</ol>\n<p>从上面的定义可以看出，密度函数 $f(x)$ 是分布函数 $F(x)$ 的微分，而 $F(x)$ 是 $f(x)$ 的积分，所以计算以下概率可以转变成求密度函数的积分，注意无论是分布函数还是密度函数，还是分布律，他们都是服务于算概率的</p>\n<script type=\"math/tex; mode=display\">P(a < X \\le b) = F(b) - F(a) = \\int_a^b f(x)dx</script><p>上面定义的第二点，也很容易理解，$\\int_{-\\infty}^{+\\infty} f(x)dx=F(+\\infty)-F(-\\infty)=1-0=1$  </p>\n<p>对于连续型随机变量 $P(X = a) = 0$，因为 $P(X = a) = lim_{h\\to 0} \\int_{a-h}^{a}f(x)dx=0$ </p>\n<p>分布函数连续不一定是连续型随机变量的分布函数，连续不一定可微，只有密度函数存在，才能说是连续随机变量</p>\n<h2 id=\"4-3-总结一下\"><a href=\"#4-3-总结一下\" class=\"headerlink\" title=\"4.3 总结一下\"></a>4.3 总结一下</h2><p>对于离散型的随机变量，只可以取有限个或者可数个值，我们可以用分布律去描述它，$P(X = x_k) = p_k$   </p>\n<p>对于连续型的随机变量，我们用一个区间去表示一个随机事件，但由于区间涉及两个边界值，我们引入分布函数 $F(x)$ 描述随机变量取值小于某个值的概率，进而引入密度函数 $f(x)$，然后概率值就可以转化为求密度函数的积分值</p>\n<p>但是对于离散型随机变量，我们也可以研究它的分布函数，但是它没有概率密度函数，因为它的分布函数不可微</p>\n<p><br></p>\n<h1 id=\"5-连续随机变量的分布\"><a href=\"#5-连续随机变量的分布\" class=\"headerlink\" title=\"5. 连续随机变量的分布\"></a>5. 连续随机变量的分布</h1><p>对于离散随机变量，我们可以用分布律来描述，对于连续型随机变量，我们可以用分布函数或密度函数来描述，分布律、分布函数、密度函数都是为了算概率而存在的</p>\n<h2 id=\"5-1-均匀分布\"><a href=\"#5-1-均匀分布\" class=\"headerlink\" title=\"5.1 均匀分布\"></a>5.1 均匀分布</h2><ul>\n<li><p>若一个随机变量的密度函数为以下的形式，则该随机变量服从均匀分布，$X \\sim U(a,b)$ </p>\n<script type=\"math/tex; mode=display\">f(x)= \\left\\{\\begin{array}{cc} \n\\frac{1}{b-a}, & a \\le x \\le b\\\\ \n0, & other\\ values \n\\end{array}\\right.</script></li>\n<li><p>均匀分布可以用示性函数 $I$ 来表示，$f(x) = \\frac{1}{b-a}I_{a\\le x\\le b}(x)$ </p>\n</li>\n</ul>\n<h2 id=\"5-2-指数分布\"><a href=\"#5-2-指数分布\" class=\"headerlink\" title=\"5.2 指数分布\"></a>5.2 指数分布</h2><ul>\n<li><p>指数分布的随机变量，密度函数满足 $f(x) =\\lambda e^{-\\lambda x} I_{x \\ge 0}(x)$，$\\lambda &gt; 0$，$X \\sim exp(\\lambda)$  </p>\n<script type=\"math/tex; mode=display\">f(x)= \\left\\{\\begin{array}{cc} \n\\lambda e^{-\\lambda x}, & x \\ge 0\\\\ \n0, & x < 0 \n\\end{array}\\right.</script></li>\n<li><p>$\\lambda$ 越大，密度函数下降得越快</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/指数分布.png\">\n</li>\n<li><p>指数分布最大的特点是无后效性，通常用来描述元件的寿命，即寿命是无老化的，假如我知道一个元件已经用了 $s$ 个小时，想知道原件能用 $s + t$ 个小时的概率，它就等于原件用 $t$ 个小时的概率</p>\n<ul>\n<li>$P(X &gt; s+t \\mid X&gt;s) = P(X &gt;t)$  </li>\n<li>证明：<ul>\n<li>令事件 $A$ 为 $X &gt; s+t$，事件 $B$ 为 $X &gt; s$，则 $P(A \\mid B) = \\frac{P(AB)}{P(B)}$  </li>\n<li>可以看出 $B \\subset A$，所以 $P(AB) = P(A)$ </li>\n<li>$P(A) = \\int_{s+t}^{+\\infty} \\lambda e^{-\\lambda x}dx$ </li>\n<li>令 $\\lambda x=u$，则 $P(A) = \\int_{\\lambda(s+t)}^{+\\infty} e^{-u}du = -e^{-u} \\mid_{\\lambda(s+t)}^{+\\infty} = e^{-\\lambda(s+t)}$  </li>\n<li>同理，$P(B)=e^{-\\lambda s}$  </li>\n<li>因此，$P(A \\mid B) = \\frac{P(A)}{P(B)} = e^{-\\lambda t} = P(X &gt; t)$  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-3-正态分布\"><a href=\"#5-3-正态分布\" class=\"headerlink\" title=\"5.3 正态分布\"></a>5.3 正态分布</h2><ul>\n<li>密度函数满足 $f(x) = \\frac{1}{\\sqrt{2\\pi} \\sigma} exp(-\\frac{(x-\\mu)^2}{2\\sigma^2})$，$-\\infty &lt; x &lt; +\\infty$，记为 $X \\sim N(\\mu, \\sigma^2)$    </li>\n<li>密度函数的曲线有以下性质<ul>\n<li>对称函数，对称轴为 $x = \\mu$，对称轴左边单调递增，对称轴右边单调递减，极值落在 $x = \\mu$ 上，为$\\frac{1}{\\sqrt{2\\pi} \\sigma}$</li>\n<li>$\\sigma$ 的大小决定了密度函数的陡峭程度</li>\n</ul>\n</li>\n<li>当 $\\mu = 0$，$\\sigma = 1$ 的时候，称为标准正态分布，密度函数记为 $\\phi(x)$，分布函数记为 $\\Phi(x)$ <ul>\n<li>分布函数 $\\Phi(x)$ 是密度函数 $\\phi(x)$ 的积分，$\\Phi(x) = \\int_{-\\infty}^x \\phi(t)dt$ </li>\n<li>$\\Phi(x) = 1 - \\Phi(-x)$，可以从密度函数 $\\phi(x)$ 算面积很容易证出。</li>\n</ul>\n</li>\n<li>一般的正态分布 $X \\sim N(\\mu, \\sigma^2)$ 都可以转成标准正态分布 $X \\sim N(0, 1)$，其分布函数 $F(x) = \\Phi(\\frac{x-\\mu}{\\sigma})$ ，然后通过查标准正态分布表格来算出概率。</li>\n</ul>\n<p><br></p>\n<h1 id=\"6-多维随机变量\"><a href=\"#6-多维随机变量\" class=\"headerlink\" title=\"6. 多维随机变量\"></a>6. 多维随机变量</h1><p>多维随机变量也称随机向量，跟一维随机变量一样，多维随机变量就是多个随机事件的并集，或者说是多个事件的联合概率，像一维随机变量，我们同样关注多维随机向量的分布。</p>\n<h2 id=\"6-1-二维离散型随机向量的分布\"><a href=\"#6-1-二维离散型随机向量的分布\" class=\"headerlink\" title=\"6.1 二维离散型随机向量的分布\"></a>6.1 二维离散型随机向量的分布</h2><p>$P(X=x_i, Y=y_j)=p_{i,j}$ </p>\n<p> 同样应该满足密度分布的基本条件</p>\n<ol>\n<li>$p_{i,j}&gt;0$</li>\n<li>$\\sum\\sum p_{ij}=1$ </li>\n</ol>\n<h2 id=\"6-2-二维连续型随机向量的分布\"><a href=\"#6-2-二维连续型随机向量的分布\" class=\"headerlink\" title=\"6.2 二维连续型随机向量的分布\"></a>6.2 二维连续型随机向量的分布</h2><p>类似一维随机变量，我们用分布函数来描述它的概率分布，$F(x,y)$ 称为随机向量 $(X,Y)$ 的联合分布函数。</p>\n<p>$F(x, y)=P(X \\le x, Y \\le y)$ </p>\n<p>将二维随机变量 $(X,Y)​$ 看成是平面上随机点的坐标，那么，分布函数 $F(x,y)​$ 在点 $(x,y)​$ 处的函数值就是下图无穷矩形域内的面积占整个平面的概率。<br><img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二维随机变量.png\"></p>\n<p>$F(x,y)$ 有如下性质：</p>\n<ol>\n<li>给定 $y$，$F(x,y)$ 是 $x$ 的非减函数；给定 $x$, $F(x,y)$ 是 $y$ 的非减函数</li>\n<li>$\\lim_{x \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{y \\rightarrow -\\infty} F(x,y)=0$，$\\lim_{x \\rightarrow +\\infty, y \\rightarrow +\\infty} F(x,y)=1$ </li>\n<li>$P(a&lt;X \\le b, c &lt; Y \\le d) = F(b,d) - F(a,d) - F(b,c) + F(a,c)$     </li>\n<li>$P(X \\le x_i) = P(X \\le x_i, Y \\le +\\infty) = F(x_i, +\\infty)$ </li>\n<li>$F(x,y)$ 分别是关于 $x$ 和 $y$ 右连续</li>\n</ol>\n<p>同样从分布函数引出概率密度函数，若对分布函数 $F(x,y)$，存在 $f(x,y) \\ge 0$，使得对任一 $(x,y) \\in R^2$，有 $F(x,y)=\\int_{-\\infty}^{x} \\int_{-\\infty}^{y} f(u,v)dudv$，则称 $F(x,y)$ 为连续型联合分布函数，$f(x,y)$ 为联合密度函数。 $f(x,y)$ 同样具有以下性质：</p>\n<ol>\n<li>$f(x,y) \\ge 0$  </li>\n<li>$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ </li>\n<li>$\\frac{\\partial F(x,y)}{\\partial x \\partial y} = f(x,y)$ </li>\n</ol>\n<p>几何上，$z=f(x,y)$ 表示空间的一个曲面，$\\int_{-\\infty}^{+\\infty} \\int_{-\\infty}^{+\\infty} f(x,y)dxdy=1$ 表示介于 $f(x,y)$ 与 $xOy$  平面之间的空间区域的面积。<br><img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/二维正态.png\"></p>\n<p><br></p>\n<h1 id=\"7-边缘分布-marginal-distribution\"><a href=\"#7-边缘分布-marginal-distribution\" class=\"headerlink\" title=\"7. 边缘分布(marginal distribution)\"></a>7. 边缘分布(marginal distribution)</h1><ul>\n<li><p>定义：已知 $(X,Y)$ 的联合分布函数为 $F(x,y)$，则 $X$ 的分布 $F_1(x)$ 和 $Y$ 的分布 $F_2(y)$ 称为 $F(x,y)$ 的边缘分布</p>\n<ul>\n<li>$F_1(x)=P(X \\le x)=P(X \\le x, Y \\le +\\infty)=F(x, +\\infty)$ </li>\n<li>$F_2(y)=P(Y \\le y)=P(Y \\le y, X \\le +\\infty) = F(+\\infty, y)$ </li>\n</ul>\n</li>\n<li><p>二维离散型随机变量的边缘分布</p>\n<ul>\n<li>二维离散随机变量的分布一般以联表的形式表示</li>\n<li>固定某个 $x_i$，$P(X=x_i) = \\sum_{j=1}^{m}p_{ij}$，联表每一行的求和就是随机变量 $X$ 的边缘分布，可记为 $p_{i\\bullet}$ </li>\n<li>固定某个 $y_i$ ，$P(Y=y_j) = \\sum_{i=1}^{n}p_{ij}$ ，联表每一列的求和就是随机变量 $Y$ 的边缘分布，可记为 $p_{\\bullet j}$ </li>\n</ul>\n</li>\n<li><p>二维连续型随机变量的边缘分布</p>\n<ul>\n<li>二维连续随机变量的分布一般以概率密度函数的形式表示</li>\n<li>从联合密度函数，求 $X$ 的密度函数，就需要将随机变量 $Y$ 从积分中去掉，$f_X(u) = \\int_{-\\infty}^{+\\infty}f(u,v)dv$ <ul>\n<li>$F_X(x) = F(x, +\\infty)=\\int_{-\\infty}^x[\\int_{-\\infty}^{+\\infty}f(x,y)dy]dx=\\int_{-\\infty}^{x}f_X(x)dx$ </li>\n</ul>\n</li>\n<li>同理，求 $Y$ 的密度函数，，$f_Y(v) = \\int_{-\\infty}^{+\\infty}f(u,v)du$    </li>\n</ul>\n</li>\n<li><p>二维正态分布的边缘分布就是一维正态分布</p>\n</li>\n<li><p>注意：联合分布可以推出边缘分布，但是边缘分布不能推出联合分布，例子：一维正态分布推不出二维正态分布，二维正态分布还有一个参数 $\\rho$</p>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"8-条件分布\"><a href=\"#8-条件分布\" class=\"headerlink\" title=\"8. 条件分布\"></a>8. 条件分布</h1><p>假设有两个随机变量 $X,Y$，在给定 $Y$ 取某个或某些值的条件下，$X$ 的概率分布就叫做 $Y = y_j$ 条件下 $X$ 的条件分布律。</p>\n<h2 id=\"8-1-离散型随机变量的条件分布\"><a href=\"#8-1-离散型随机变量的条件分布\" class=\"headerlink\" title=\"8.1 离散型随机变量的条件分布\"></a>8.1 离散型随机变量的条件分布</h2><ul>\n<li>定义：设 $(X,Y)$ 为二维离散型随机变量，若对固定的 $j$ ，称 $P(X=x_i \\mid Y=y_j) = \\frac{p_{ij}}{p_{\\bullet j}}$ 为 $Y = y_j$ 条件下的 $X$ 的条件分布律；同理，对固定的 $i$ ，称 $P(Y=y_j \\mid X=x_i) = \\frac{p_{ij}}{p_{i\\bullet}}$  为 $X = x_i$ 条件下的 $Y$ 的条件分布律；</li>\n<li>条件分布是一种概率分布，它具有概率分布的一切性质，正如条件概率是一种概率，具有概率的一切性质一样。<ul>\n<li>$P(X=x_i \\mid Y=y_j) \\ge 0$</li>\n<li>$\\sum_{i=1}^{\\infty} P(X=x_i \\mid Y=y_j) =1$ </li>\n</ul>\n</li>\n<li>离散型随机变量的条件分布，就是在联合分布的联表的某一行或者某一列的分布。</li>\n<li>由条件分布和边缘分布，可以根据乘法公式，求得联合分布<ul>\n<li>$P(X=x_i, Y=y_j) = P(X=x_i)P(Y=y_j \\mid X= x_i)$ </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-2-连续型随机变量的条件分布\"><a href=\"#8-2-连续型随机变量的条件分布\" class=\"headerlink\" title=\"8.2 连续型随机变量的条件分布\"></a>8.2 连续型随机变量的条件分布</h2><ul>\n<li><p>定义：设 $X$ 和 $Y$ 的联合概率密度为 $f(x,y)$，$(X,Y)$ 关于 $Y$ 的边缘概率密度为 $f_Y(y)$，若对于固定的 $y$，$f_Y(y) &gt;0$，则称 $\\frac{f(x,y)}{f_Y(y)}$ 为在 $Y = y$ 的条件下 $X$ 的条件概率密度，记为 $f_{X \\mid Y}(x \\mid y) = \\frac{f(x,y)}{f_Y(y)}$，同理，$f_{Y \\mid X}(y \\mid x) = \\frac{f(x,y)}{f_X(x)}$ </p>\n</li>\n<li><p>由条件密度和边缘密度，可以得到联合密度</p>\n<ul>\n<li>$f(x,y)=f_X(x)f_{Y \\mid X}(y \\mid x)$ </li>\n</ul>\n</li>\n<li>例题：从 [0,1] 中随机取一个数 $X$， 则 $X \\sim U(0,1)$，当 $X=x$ 时，再从 $(0,x)$ 中随机取一个数 $Y$，求 $Y$ 的分布。<ul>\n<li>题目给定 $X$ 的分布，以及在 $X = x$ 下 $Y$ 的条件分布，自然可以算出 $(X,Y)$ 的联合分布，再从联合分布就可以算出 $Y$ 的边缘分布</li>\n<li>$f_X(x)=I_{(0,1)}(x)$，$f_{Y \\mid X}(y \\mid x) = \\frac{1}{x}I_{(0,x)}(y)$ </li>\n<li>联合分布：$f(x,y) = I_{(0,1)}(x) \\frac{1}{x}I_{(0,x)}(y)$ </li>\n<li>边缘分布：$f_Y(y)=\\int f(x.y)dx$，算这种积分最重要的就是搞清楚，谁变谁不变，以及积分的上下限是多少，显然被积的是 $x$，所以 $x$ 是变量，$y$ 是常数，所以我们固定某一个 $y$，可以得出 $x$ 的范围是 $[y,1]$，因此 $f_Y(y)=-ln(y)$ ，最后限定 $y$ 的范围是 $(0,1)$ </li>\n</ul>\n</li>\n</ul>\n<p><strong>有了联合分布，边缘分布和条件分布都能求</strong><br><br></p>\n<h1 id=\"9-随机变量的独立性\"><a href=\"#9-随机变量的独立性\" class=\"headerlink\" title=\"9. 随机变量的独立性\"></a>9. 随机变量的独立性</h1><ul>\n<li>回忆两个随机事件独立的定义是：$P(AB)= P(A)P(B)$</li>\n<li>随机变量之间的独立好比，两个或多个随机变量的任意取值所代表的随机事件都相互独立<ul>\n<li>离散型随机变量：$P(X = x_i, Y = Y_j) = P(X = x_i)P(Y = y_j)$ </li>\n<li>连续型随机变量独立即联合分布等于边缘分布的乘积，$F(x,y) = F_X(x)F_Y(y)$；或联合密度等于边缘密度的乘积，$f(x,y)=f_X(x)f_Y(y)$ </li>\n</ul>\n</li>\n<li>两个随机变量 $(X,Y)$ 相互独立就是指 $X$ 有关的任何事件发生与否都与 $Y$ 有关的任意时间发生与否无关。</li>\n<li>随机变量的独立是随机事件独立的延申，从两个事件的独立，延申至一系列事件的独立。</li>\n<li>如果多个随机变量相互独立，且分布一致，称为独立同分布，简称 independent identical distribution(iid).</li>\n</ul>\n<p><br></p>\n<h1 id=\"10-随机变量的函数的概率分布\"><a href=\"#10-随机变量的函数的概率分布\" class=\"headerlink\" title=\"10. 随机变量的函数的概率分布\"></a>10. 随机变量的函数的概率分布</h1><ul>\n<li>随机变量函数：已知随机变量 $X$ 的分布，另一个随机变量 $Y$ 满足 $Y = g(X)$，这就是随机变量的函数，我们可以从自变量(随机变量 $X$ )的分布求出随机变量 $Y$ 的分布<ul>\n<li>连续型：$F(y) = P(Y \\le y) = \\int_{g(x)\\le y} f(x)dx$ </li>\n<li>离散型：$P(Y = y_j) = \\sum_{g(x_i)=y_j}P(X = x_i)$ </li>\n</ul>\n</li>\n<li>推广至随机向量的函数：已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z = g(X, Y)$，求 $Z$ 的分布<ul>\n<li>连续型： $F(Z) = P(Z \\le z)= \\int\\int_{g(x,y) \\le z}f(x,y)dxdy$ </li>\n<li>离散型：$P(Z = z_q) = \\sum_{g(x_i,y_j) = z_q}P(X = x_i, Y = y_j)$，若 $X$ 和 $Y$ 独立，那么后面的概率可以拆成两个单独概率想乘。</li>\n</ul>\n</li>\n<li>推广至随机向量的多个函数： 已知随机向量 $(X,Y)$ 的分布，另一个随机变量 $Z_1 = g_1(X, Y)$，另一个随机变量 $Z_2 = g_2(X, Y)$，求 $(Z_1, Z_2)$ 的联合分布<ul>\n<li>$F(Z_1, Z_2) = P(Z_1 \\le z_1, Z_2 \\le z_2) = \\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy$  </li>\n<li>设 $u = g_1(x,y)$，$v = g_2(x,y)$，若反函数存在，即 $x = \\phi(u, v)$，$y = \\psi(u,v)$， </li>\n<li>$\\int\\int_{Z_1 = g_1(X, Y) \\le z_1, Z_2 = g_2(X, Y) \\le z_2} f(x,y)dxdy = \\int\\int_{u \\le z_1, v \\le z_2} f(\\phi(u,v), \\psi(u,v)) \\frac{dxdy}{dudv}dudv$ <ul>\n<li>$\\frac{dxdy}{dudv} = |J|$，为 $(x,y)$ 关于 $(u,v)$ 的 Jacobi行列式</li>\n<li>$J = \\left|\\begin{array}{cccc}  \\frac{\\partial x}{\\partial u} &amp;    \\frac{\\partial x}{\\partial v} \\\\<br>\\frac{\\partial y}{\\partial u} &amp;    \\frac{\\partial y}{\\partial v}\\ <br>\\end{array}\\right|  $     </li>\n</ul>\n</li>\n<li>所以 $(Z_1,Z_2)$ 的分布函数等于 $F(Z_1, Z_2) = \\int_{-\\infty}^{z_1}\\int_{-\\infty}^{v_1} f(\\phi(u,v), \\psi(u,v)) |J|dudv$，</li>\n<li>同理，$(Z_1,Z_2)$ 的密度函数为 $ f(\\phi(u,v), \\psi(u,v)) |J|$ </li>\n</ul>\n</li>\n<li><p>例题：在直角坐标平面随机选取一点，分别以随机变量 $X$ 和 $Y$ 表示其横纵坐标，可以认为 $X$ 和 $Y$ 相互独立，且都服从正态分布 $N(0,1)$，求极坐标 $(R, t)$ 的分布 </p>\n<ul>\n<li>题意是已知 $X$ 和 $Y$ 的分布，求 $(R,t)$ 的联合分布</li>\n<li>反函数很容易得：$x = Rcost$，$y = Rsint$，$R \\in [0, +\\infty]$，$t \\in [0, 2 \\pi)$ </li>\n<li><p>$J = \\left|\\begin{array}{cccc} \\frac{\\partial x}{\\partial R} &amp;    \\frac{\\partial x}{\\partial t} \\\\<br>\\frac{\\partial y}{\\partial R} &amp;    \\frac{\\partial y}{\\partial t}\\ <br>\\end{array}\\right| = \\left|\\begin{array}{cccc} cost &amp;    -Rsint \\\\<br>sint &amp;   Rcost\\ <br>\\end{array}\\right| = R$</p>\n</li>\n<li><p>$(X,Y)$ 的联合密度为其边缘密度的乘积($X$ 和 $Y$ 相互独立)，$f(x,y) = \\frac{1}{2\\pi}exp(-\\frac{x^2+y^2}{2})$ </p>\n</li>\n<li>$f(R,t) =  f(Rcost, Rsint) |J| = \\frac{1}{2\\pi}Rexp(-\\frac{R^2}{2})$，$R &gt; 0$，$t \\in [0, 2 \\pi)$ </li>\n<li>$f(R,t) = f_1(R)f_2(t)$，其中 $f_1(R) = Rexp(-\\frac{R^2}{2})I_{R&gt;0}(R)$，$f_2(t) = \\frac{1}{2\\pi}I_{[0,2\\pi)}(t)$，由于f(R,t) 可以写成两个密度函数的乘积，所以 $R$ 和 $t$ 相互独立，且 $t$ 服从 $[0,2\\pi)$ 的均匀分布 </li>\n</ul>\n</li>\n<li><p>注意：两个服从正态分布的随机变量的和也服从正态分布，$X \\sim N(\\mu_1, \\sigma_1^2)$，$Y \\sim N(\\mu_2, \\sigma_2^2)$，且 $X$ 和 $Y$ 相互独立，则 $X + Y  \\sim N(\\mu_1 +\\mu_2, \\sigma_1^2 + \\sigma_2^2)$ </p>\n</li>\n<li><p>设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $M = max(X,Y)$ 的分布</p>\n<ul>\n<li>$F_M(z) = P(max(X,Y) \\le z) = P(X \\le z, Y \\le z) = P(X \\le z)P(Y \\le z) = F_X(z)F_Y(z)$  </li>\n<li>密度函数：$f_M(z) = \\frac{\\partial F_M(z)}{\\partial z} = f_X(z)F_Y(z) + F_X(z)f_Y(z)$ </li>\n<li>推广至n个随机变量的最大值也是同样的道理，最大值小于 $z$，即每个随机变量都小于 $z$</li>\n</ul>\n</li>\n<li><p>设 $X$ 和 $Y$ 是两个相互独立的随机变量，求 $N = min(X,Y)$ 的分布</p>\n<ul>\n<li><p>$N$ 等于 $X$ 和 $Y$ 的最小值，$N \\le z$，即 $X$ 和 $Y$ 的任意一个小于 $z$，求它的对立事件，即 $X$ 和 $Y$ 都大于 $z$</p>\n</li>\n<li><p>$F_N(z) = P(N \\le z) = 1-P(N &gt; z) = 1- P(X &gt; z, Y &gt; z) = 1 - P(X &gt; z)P(Y &gt; z) $ </p>\n<p>$= 1 - (1-F_X(z))(1-F_Y(z))$  </p>\n</li>\n<li><p>密度函数：$f_N(z) = \\frac{\\partial F_N(z)}{\\partial z} = -f_X(z)(1-F_Y(z)) + (1-F_X(z))f_Y(z)$  </p>\n</li>\n</ul>\n<p>关键就是改变积分的区域，通过随机变量函数，约定积分区域</p>\n</li>\n</ul>\n<p><br></p>\n<h1 id=\"11-统计三大分布\"><a href=\"#11-统计三大分布\" class=\"headerlink\" title=\"11. 统计三大分布\"></a>11. 统计三大分布</h1><p>$\\Gamma(x)=\\int_0^\\infty e^{-t}t^{x-1}dt$，$x &gt; 0$</p>\n<p>性质：</p>\n<ol>\n<li>$\\Gamma(x+1) = x\\Gamma(x)$，$\\Gamma(1)=1$，$\\Gamma(n+1) = n!$ </li>\n<li>$\\Gamma(\\frac{1}{2}) = \\sqrt{\\pi}$ </li>\n</ol>\n<h2 id=\"11-1-卡方分布-chi-squared-distribution\"><a href=\"#11-1-卡方分布-chi-squared-distribution\" class=\"headerlink\" title=\"11.1 卡方分布(chi-squared distribution)\"></a>11.1 卡方分布(chi-squared distribution)</h2><ul>\n<li><p>定义：设 $X_1, X_2, …, X_n$ 独立同分布，均服从标准正态分布，$\\chi^2 = \\sum_1^nX_i^2$，则称 $\\chi^2$ 是自由度为 $n$ 的卡方分布，记为 $\\chi_n^2$，自由度是指能够自由变换的自变量的个数，如果受到一个约束，自由度就要减一，依次类推。</p>\n</li>\n<li><p>卡方分布的密度函数为</p>\n<ul>\n<li><p>$f_n(x) = \\frac{x^{\\frac{x-2}{2}}e^{-\\frac{x}{2}}}{2^{\\frac{n}{2}}\\Gamma(\\frac{n}{2})}$ </p>\n</li>\n<li><p>当 $n=1$，$f_1(x) = \\frac{x^{-\\frac{1}{2}}e^{-\\frac{1}{2}}}{2^{\\frac{1}{2}} \\sqrt{\\pi}}$，为单调递减函数；当 $n=2$，$f_2(x) = e^{-x}$，同为单调递减，当 $n \\ge 3$，曲线有单峰，从 $0$ 开始单调上升，再单调下降趋向于0；由于是密度函数，其积分值为1。</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/卡方分布.png\">\n</li>\n<li><p>若 $X \\sim \\chi_n^2$，记 $p(X &gt; c) = \\alpha$，则 $c = \\chi_n^2(\\alpha)$ 称为卡方分布的上侧分位数，给定 $\\alpha$，可以通过查卡方分布表格，求出 $c$。</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/卡方分布alpha.png\">\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-2-t-分布\"><a href=\"#11-2-t-分布\" class=\"headerlink\" title=\"11.2 t 分布\"></a>11.2 t 分布</h2><ul>\n<li><p>又称 student‘s distribution</p>\n</li>\n<li><p>定义：设 $X \\sim N(0,1)$，$Y \\sim \\chi_n^2$，且 $X$ 和 $Y$ 相互独立，令 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$，则称 $T$ 的分布为自由度为 $n$ 的t分布，记为 $T \\sim t_n$。</p>\n</li>\n<li><p>概率密度函数为</p>\n<ul>\n<li><p>$t_n(x) = \\frac{\\Gamma(\\frac{n+1}{x})}{\\sqrt{n\\pi}\\Gamma(\\frac{n}{2})}(1+\\frac{x^2}{n})^{-\\frac{n+1}{2}}$ </p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/t分布.png\" width=\"500\" height=\"250\">\n</li>\n<li><p>与标准正态分布的关系</p>\n<ul>\n<li>t分布的密度函数与标准正态分布的密度很相似，都是关于y轴对称，偶函数</li>\n<li>t分布密度函数的峰值要低于标准正态的峰值，但尾部要比正态要高，这很正常，因为密度函数积分都要等于1，中间高度低了，两边的高度就要上升</li>\n<li>当 $n$ 趋于无穷的时候，$t_n$ 会趋于标准正态。</li>\n</ul>\n</li>\n<li><p>若 $T \\sim t_n$，$P(|T| &gt; c) = \\alpha$，则 $c = t_n(\\alpha / 2)$ 称为t分布的双侧 $\\alpha$ 分位数</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/t分布alpha.png\">\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-3-F-分布\"><a href=\"#11-3-F-分布\" class=\"headerlink\" title=\"11.3 F 分布\"></a>11.3 F 分布</h2><ul>\n<li><p>定义：$X \\sim \\chi_n^2$， $Y \\sim \\chi_m^2$，$X$ 和 $Y$ 相互独立，令 $Z = \\frac{X/n}{Y/m}$，则称 $Z$ 为自由度是 $n$ 和 $m$ 的 $F$ 分布，记为 $F \\sim F_{n,m}$ </p>\n</li>\n<li><p>$t$ 分布的平方为一个自由度为1和n的F分布，$t_n^2 = \\frac{X^2}{Y/n}$，$X$ 为标准正态，$X^2$ 为自由度为1的卡方分布</p>\n</li>\n<li><p>同样有上测 $\\alpha$ 分位数的概念</p>\n<img src=\"/2018/09/04/【概率论与数理统计】——随机变量及其分布/F分布.png\">\n</li>\n<li><p>性质：$F_{m,n}(1-\\alpha) = \\frac{1}{F_{n,m}(\\alpha)}$<br><br></p>\n<h1 id=\"12-总结\"><a href=\"#12-总结\" class=\"headerlink\" title=\"12. 总结\"></a>12. 总结</h1><p>这一章将随机事件过渡为随机变量，进而描述一系列随机事件发生的概率，也就是所谓的随机变量的分布，很多第一章提到的概念，如条件概率，在这一章都会以分布的形式出现，都是描述一系列的概率值，牢记，无论是分布函数还是密度函数，还是积分，它们都是为算概率服务的，最终目的都是算概率。</p>\n</li>\n</ul>\n<p><br></p>"},{"title":"北京上海那些事","date":"2018-10-03T09:05:55.000Z","_content":"\n保研那些事已经在上一篇文章中分享了，保研面试的另外一个好处就是可以去各大城市和高校参观，9月份，我去了北京和上海这两座城市，虽然待的时间不长，但是也参观了一些地方，见过一些人，做过一些事，这篇文章想把这一段经历记录下来，顺便分享一些奇闻轶事。\n\n<!-- more -->\n\n### 北京篇\n说实话，这是我第一次去北京，说起来都有点羞愧，当我还没到北京的时候，我对北京的第一印象就是：贵！！当时我提前订酒店，上网一查，酒店清一色的400+一晚，当时我就懵逼了，南京和上海的酒店我也住过，也就200+一晚，北京直接来了个double，逼得我只能跟同学一起合租双人房。当我进入北京城，亲身感受到真正的北京后，我对北京的印象从\"贵\"转变成了\"破\"，北京的很多建筑和公共设施都有一种破旧的感觉，不是那种历史文物的那种破，而是由于时间太久且没有翻新的那种破。\n\n由于这次上京的主要任务是去面试（虽然面试很水），所以没有太多的时间去逛北京城，参观旅游景点，北京的旅游景点是真的很多，天安门、故宫、长城等等，而我真正自由的时间就只有一天半，因此我只挑了清华附近的颐和园和圆明园参观，颐和园是皇帝的后花园，而故宫是皇帝的家，颐和园属于国家级旅游景点，因此门票也是白菜价格，颐和园的景点主要以山水寺庙为主，不像故宫以宫殿为主，而颐和园里面的每个景点都有一定的历史，如苏州街、败家石、石船，颐和园内国内外游客都很多，还有很多导游，基本每一个景点都能遇到一个正在讲解的导游，这时候你就可以靠过去听。而圆明园是古代皇帝修建的一个中西方结合的高级园林，第二次鸦片战争英法联军火烧圆明园后，就成了现在的遗迹，里面比较著名的就是大水法（历史书上的照片），十二生肖的一个园林，以及迷宫。\n\n清华大学不愧是中国最大的校园，不骑自行车根本没法生存，校园绿化比较多，建筑风格中西合璧，整体给我的感觉很舒服，每一个校门都是一个自然的景点，其中二校门最为出名，其实二校门现在并不是一个校门，由于清华经历过扩建，二校门属于扩建前的校门，但是它最具历史性。另外清华给我的第二感觉就是很像中大南校，同样有一个大草坪，草坪中央是一个大礼堂，同样晚上有很多老人散步，同样存在旧区（惊奇地发现有老人还在打麻将）。\n\n吃的方面由于待的时间不多，也没有专门去找攻略，就只和北京的同学去尝试了一下北京菜馆“局气”，以及小吊梨汤。\n另外北京9月的天气很舒服，昼夜温差略大，但对于一个广东孩子，终于能感受到什么是秋天了。\n\n{% asset_img 颐和园佛香阁.png 700 700 佛香阁 %}\n{% asset_img 颐和园一隅.png 700 900 颐和园一隅 %}\n{% asset_img 颐和园石船.png 700 700 石舫 %}\n{% asset_img 圆明园大水法.png 700 700 大水法 %}\n{% asset_img 圆明园迷宫.png 700 900 大迷宫 %}\n{% asset_img 东门.png 700 700 清华东南门 %}\n{% asset_img 二校门.png 700 700 清华二校门 %}\n{% asset_img 水木清华.png 700 700 水木清华 %}\n\n### 上海篇\n这是我第二次去上海，上一次还得追溯到上大学前，上海这个城市给我的感觉就是很有活力，少了一份北京的那种历史感，但是多了一份朝气。公交车站的命名方式也是unique，清一色的叫xx路xx路，复旦大学张江校区附近的公交车站，惊现各种名人路，比如祖冲之路，张衡路等等，并且上海的公交会以上海话播报，很有意思。复旦的张江校区灰常的普通，没有标志性建筑，整体感觉像某技术学校。今次去上海除了去复旦面试外，还参观了上交的闵行校区和被人称为复旦后花园的小破财：上海财经大学，据某狗所说，上交的闵行校区的面积仅次于清华，果真如此，学校内竟然有出租小电驴，类似共享单车，但是上交不像清华里面有旧区，上交的每一寸土地都是教学区域，建筑之间比较稀疏，也没有明显的生活区和教学区的分界线。小破财闻名不如见面，半小时走完校园，面积可能比纪中还小。\n\n上海的CBD，静安区附近相当的繁华，南京路也有很多外国人出入，而去上海最值得去做的一件事就是去看展览，上海的展览很多，我挑了上海展览中心，当天是一个photofair，门票算是比较良心，同样看展和展览的外国人也很多。其实上海并没有北京那么多的旅游景点，因为这座城市比较年轻，因此也比较现代化，没有太多的历史沉淀，但去上海一定要去外滩，还有东方明珠、上海中心一看，毕竟是上海的地标性建筑了。\n\n{% asset_img 凯旋门.png 700 700 上交凯旋门 %}\n{% asset_img 庙门.png 700 700 上交庙门 %}\n{% asset_img 上海财经大学.png 700 700 小破财 %}\n{% asset_img 田子坊.png 700 700 田子坊 %}\n{% asset_img 上海展览中心.png 700 700 上海展览中心 %}\n\n<br>","source":"_posts/北京上海那些事.md","raw":"---\ntitle: 北京上海那些事\ndate: 2018-10-03 17:05:55\ntags:\n---\n\n保研那些事已经在上一篇文章中分享了，保研面试的另外一个好处就是可以去各大城市和高校参观，9月份，我去了北京和上海这两座城市，虽然待的时间不长，但是也参观了一些地方，见过一些人，做过一些事，这篇文章想把这一段经历记录下来，顺便分享一些奇闻轶事。\n\n<!-- more -->\n\n### 北京篇\n说实话，这是我第一次去北京，说起来都有点羞愧，当我还没到北京的时候，我对北京的第一印象就是：贵！！当时我提前订酒店，上网一查，酒店清一色的400+一晚，当时我就懵逼了，南京和上海的酒店我也住过，也就200+一晚，北京直接来了个double，逼得我只能跟同学一起合租双人房。当我进入北京城，亲身感受到真正的北京后，我对北京的印象从\"贵\"转变成了\"破\"，北京的很多建筑和公共设施都有一种破旧的感觉，不是那种历史文物的那种破，而是由于时间太久且没有翻新的那种破。\n\n由于这次上京的主要任务是去面试（虽然面试很水），所以没有太多的时间去逛北京城，参观旅游景点，北京的旅游景点是真的很多，天安门、故宫、长城等等，而我真正自由的时间就只有一天半，因此我只挑了清华附近的颐和园和圆明园参观，颐和园是皇帝的后花园，而故宫是皇帝的家，颐和园属于国家级旅游景点，因此门票也是白菜价格，颐和园的景点主要以山水寺庙为主，不像故宫以宫殿为主，而颐和园里面的每个景点都有一定的历史，如苏州街、败家石、石船，颐和园内国内外游客都很多，还有很多导游，基本每一个景点都能遇到一个正在讲解的导游，这时候你就可以靠过去听。而圆明园是古代皇帝修建的一个中西方结合的高级园林，第二次鸦片战争英法联军火烧圆明园后，就成了现在的遗迹，里面比较著名的就是大水法（历史书上的照片），十二生肖的一个园林，以及迷宫。\n\n清华大学不愧是中国最大的校园，不骑自行车根本没法生存，校园绿化比较多，建筑风格中西合璧，整体给我的感觉很舒服，每一个校门都是一个自然的景点，其中二校门最为出名，其实二校门现在并不是一个校门，由于清华经历过扩建，二校门属于扩建前的校门，但是它最具历史性。另外清华给我的第二感觉就是很像中大南校，同样有一个大草坪，草坪中央是一个大礼堂，同样晚上有很多老人散步，同样存在旧区（惊奇地发现有老人还在打麻将）。\n\n吃的方面由于待的时间不多，也没有专门去找攻略，就只和北京的同学去尝试了一下北京菜馆“局气”，以及小吊梨汤。\n另外北京9月的天气很舒服，昼夜温差略大，但对于一个广东孩子，终于能感受到什么是秋天了。\n\n{% asset_img 颐和园佛香阁.png 700 700 佛香阁 %}\n{% asset_img 颐和园一隅.png 700 900 颐和园一隅 %}\n{% asset_img 颐和园石船.png 700 700 石舫 %}\n{% asset_img 圆明园大水法.png 700 700 大水法 %}\n{% asset_img 圆明园迷宫.png 700 900 大迷宫 %}\n{% asset_img 东门.png 700 700 清华东南门 %}\n{% asset_img 二校门.png 700 700 清华二校门 %}\n{% asset_img 水木清华.png 700 700 水木清华 %}\n\n### 上海篇\n这是我第二次去上海，上一次还得追溯到上大学前，上海这个城市给我的感觉就是很有活力，少了一份北京的那种历史感，但是多了一份朝气。公交车站的命名方式也是unique，清一色的叫xx路xx路，复旦大学张江校区附近的公交车站，惊现各种名人路，比如祖冲之路，张衡路等等，并且上海的公交会以上海话播报，很有意思。复旦的张江校区灰常的普通，没有标志性建筑，整体感觉像某技术学校。今次去上海除了去复旦面试外，还参观了上交的闵行校区和被人称为复旦后花园的小破财：上海财经大学，据某狗所说，上交的闵行校区的面积仅次于清华，果真如此，学校内竟然有出租小电驴，类似共享单车，但是上交不像清华里面有旧区，上交的每一寸土地都是教学区域，建筑之间比较稀疏，也没有明显的生活区和教学区的分界线。小破财闻名不如见面，半小时走完校园，面积可能比纪中还小。\n\n上海的CBD，静安区附近相当的繁华，南京路也有很多外国人出入，而去上海最值得去做的一件事就是去看展览，上海的展览很多，我挑了上海展览中心，当天是一个photofair，门票算是比较良心，同样看展和展览的外国人也很多。其实上海并没有北京那么多的旅游景点，因为这座城市比较年轻，因此也比较现代化，没有太多的历史沉淀，但去上海一定要去外滩，还有东方明珠、上海中心一看，毕竟是上海的地标性建筑了。\n\n{% asset_img 凯旋门.png 700 700 上交凯旋门 %}\n{% asset_img 庙门.png 700 700 上交庙门 %}\n{% asset_img 上海财经大学.png 700 700 小破财 %}\n{% asset_img 田子坊.png 700 700 田子坊 %}\n{% asset_img 上海展览中心.png 700 700 上海展览中心 %}\n\n<br>","slug":"北京上海那些事","published":1,"updated":"2018-10-04T06:39:36.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gku0009akw28m1lwmmr","content":"<p>保研那些事已经在上一篇文章中分享了，保研面试的另外一个好处就是可以去各大城市和高校参观，9月份，我去了北京和上海这两座城市，虽然待的时间不长，但是也参观了一些地方，见过一些人，做过一些事，这篇文章想把这一段经历记录下来，顺便分享一些奇闻轶事。</p>\n<a id=\"more\"></a>\n<h3 id=\"北京篇\"><a href=\"#北京篇\" class=\"headerlink\" title=\"北京篇\"></a>北京篇</h3><p>说实话，这是我第一次去北京，说起来都有点羞愧，当我还没到北京的时候，我对北京的第一印象就是：贵！！当时我提前订酒店，上网一查，酒店清一色的400+一晚，当时我就懵逼了，南京和上海的酒店我也住过，也就200+一晚，北京直接来了个double，逼得我只能跟同学一起合租双人房。当我进入北京城，亲身感受到真正的北京后，我对北京的印象从”贵”转变成了”破”，北京的很多建筑和公共设施都有一种破旧的感觉，不是那种历史文物的那种破，而是由于时间太久且没有翻新的那种破。</p>\n<p>由于这次上京的主要任务是去面试（虽然面试很水），所以没有太多的时间去逛北京城，参观旅游景点，北京的旅游景点是真的很多，天安门、故宫、长城等等，而我真正自由的时间就只有一天半，因此我只挑了清华附近的颐和园和圆明园参观，颐和园是皇帝的后花园，而故宫是皇帝的家，颐和园属于国家级旅游景点，因此门票也是白菜价格，颐和园的景点主要以山水寺庙为主，不像故宫以宫殿为主，而颐和园里面的每个景点都有一定的历史，如苏州街、败家石、石船，颐和园内国内外游客都很多，还有很多导游，基本每一个景点都能遇到一个正在讲解的导游，这时候你就可以靠过去听。而圆明园是古代皇帝修建的一个中西方结合的高级园林，第二次鸦片战争英法联军火烧圆明园后，就成了现在的遗迹，里面比较著名的就是大水法（历史书上的照片），十二生肖的一个园林，以及迷宫。</p>\n<p>清华大学不愧是中国最大的校园，不骑自行车根本没法生存，校园绿化比较多，建筑风格中西合璧，整体给我的感觉很舒服，每一个校门都是一个自然的景点，其中二校门最为出名，其实二校门现在并不是一个校门，由于清华经历过扩建，二校门属于扩建前的校门，但是它最具历史性。另外清华给我的第二感觉就是很像中大南校，同样有一个大草坪，草坪中央是一个大礼堂，同样晚上有很多老人散步，同样存在旧区（惊奇地发现有老人还在打麻将）。</p>\n<p>吃的方面由于待的时间不多，也没有专门去找攻略，就只和北京的同学去尝试了一下北京菜馆“局气”，以及小吊梨汤。<br>另外北京9月的天气很舒服，昼夜温差略大，但对于一个广东孩子，终于能感受到什么是秋天了。</p>\n<img src=\"/2018/10/03/北京上海那些事/颐和园佛香阁.png\" width=\"700\" height=\"700\" title=\"佛香阁\">\n<img src=\"/2018/10/03/北京上海那些事/颐和园一隅.png\" width=\"700\" height=\"900\" title=\"颐和园一隅\">\n\n<img src=\"/2018/10/03/北京上海那些事/圆明园大水法.png\" width=\"700\" height=\"700\" title=\"大水法\">\n<img src=\"/2018/10/03/北京上海那些事/圆明园迷宫.png\" width=\"700\" height=\"900\" title=\"大迷宫\">\n<img src=\"/2018/10/03/北京上海那些事/东门.png\" width=\"700\" height=\"700\" title=\"清华东南门\">\n<img src=\"/2018/10/03/北京上海那些事/二校门.png\" width=\"700\" height=\"700\" title=\"清华二校门\">\n<img src=\"/2018/10/03/北京上海那些事/水木清华.png\" width=\"700\" height=\"700\" title=\"水木清华\">\n<h3 id=\"上海篇\"><a href=\"#上海篇\" class=\"headerlink\" title=\"上海篇\"></a>上海篇</h3><p>这是我第二次去上海，上一次还得追溯到上大学前，上海这个城市给我的感觉就是很有活力，少了一份北京的那种历史感，但是多了一份朝气。公交车站的命名方式也是unique，清一色的叫xx路xx路，复旦大学张江校区附近的公交车站，惊现各种名人路，比如祖冲之路，张衡路等等，并且上海的公交会以上海话播报，很有意思。复旦的张江校区灰常的普通，没有标志性建筑，整体感觉像某技术学校。今次去上海除了去复旦面试外，还参观了上交的闵行校区和被人称为复旦后花园的小破财：上海财经大学，据某狗所说，上交的闵行校区的面积仅次于清华，果真如此，学校内竟然有出租小电驴，类似共享单车，但是上交不像清华里面有旧区，上交的每一寸土地都是教学区域，建筑之间比较稀疏，也没有明显的生活区和教学区的分界线。小破财闻名不如见面，半小时走完校园，面积可能比纪中还小。</p>\n<p>上海的CBD，静安区附近相当的繁华，南京路也有很多外国人出入，而去上海最值得去做的一件事就是去看展览，上海的展览很多，我挑了上海展览中心，当天是一个photofair，门票算是比较良心，同样看展和展览的外国人也很多。其实上海并没有北京那么多的旅游景点，因为这座城市比较年轻，因此也比较现代化，没有太多的历史沉淀，但去上海一定要去外滩，还有东方明珠、上海中心一看，毕竟是上海的地标性建筑了。</p>\n<img src=\"/2018/10/03/北京上海那些事/凯旋门.png\" width=\"700\" height=\"700\" title=\"上交凯旋门\">\n<img src=\"/2018/10/03/北京上海那些事/庙门.png\" width=\"700\" height=\"700\" title=\"上交庙门\">\n<img src=\"/2018/10/03/北京上海那些事/上海财经大学.png\" width=\"700\" height=\"700\" title=\"小破财\">\n<img src=\"/2018/10/03/北京上海那些事/田子坊.png\" width=\"700\" height=\"700\" title=\"田子坊\">\n<img src=\"/2018/10/03/北京上海那些事/上海展览中心.png\" width=\"700\" height=\"700\" title=\"上海展览中心\">\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>保研那些事已经在上一篇文章中分享了，保研面试的另外一个好处就是可以去各大城市和高校参观，9月份，我去了北京和上海这两座城市，虽然待的时间不长，但是也参观了一些地方，见过一些人，做过一些事，这篇文章想把这一段经历记录下来，顺便分享一些奇闻轶事。</p>","more":"<h3 id=\"北京篇\"><a href=\"#北京篇\" class=\"headerlink\" title=\"北京篇\"></a>北京篇</h3><p>说实话，这是我第一次去北京，说起来都有点羞愧，当我还没到北京的时候，我对北京的第一印象就是：贵！！当时我提前订酒店，上网一查，酒店清一色的400+一晚，当时我就懵逼了，南京和上海的酒店我也住过，也就200+一晚，北京直接来了个double，逼得我只能跟同学一起合租双人房。当我进入北京城，亲身感受到真正的北京后，我对北京的印象从”贵”转变成了”破”，北京的很多建筑和公共设施都有一种破旧的感觉，不是那种历史文物的那种破，而是由于时间太久且没有翻新的那种破。</p>\n<p>由于这次上京的主要任务是去面试（虽然面试很水），所以没有太多的时间去逛北京城，参观旅游景点，北京的旅游景点是真的很多，天安门、故宫、长城等等，而我真正自由的时间就只有一天半，因此我只挑了清华附近的颐和园和圆明园参观，颐和园是皇帝的后花园，而故宫是皇帝的家，颐和园属于国家级旅游景点，因此门票也是白菜价格，颐和园的景点主要以山水寺庙为主，不像故宫以宫殿为主，而颐和园里面的每个景点都有一定的历史，如苏州街、败家石、石船，颐和园内国内外游客都很多，还有很多导游，基本每一个景点都能遇到一个正在讲解的导游，这时候你就可以靠过去听。而圆明园是古代皇帝修建的一个中西方结合的高级园林，第二次鸦片战争英法联军火烧圆明园后，就成了现在的遗迹，里面比较著名的就是大水法（历史书上的照片），十二生肖的一个园林，以及迷宫。</p>\n<p>清华大学不愧是中国最大的校园，不骑自行车根本没法生存，校园绿化比较多，建筑风格中西合璧，整体给我的感觉很舒服，每一个校门都是一个自然的景点，其中二校门最为出名，其实二校门现在并不是一个校门，由于清华经历过扩建，二校门属于扩建前的校门，但是它最具历史性。另外清华给我的第二感觉就是很像中大南校，同样有一个大草坪，草坪中央是一个大礼堂，同样晚上有很多老人散步，同样存在旧区（惊奇地发现有老人还在打麻将）。</p>\n<p>吃的方面由于待的时间不多，也没有专门去找攻略，就只和北京的同学去尝试了一下北京菜馆“局气”，以及小吊梨汤。<br>另外北京9月的天气很舒服，昼夜温差略大，但对于一个广东孩子，终于能感受到什么是秋天了。</p>\n<img src=\"/2018/10/03/北京上海那些事/颐和园佛香阁.png\" width=\"700\" height=\"700\" title=\"佛香阁\">\n<img src=\"/2018/10/03/北京上海那些事/颐和园一隅.png\" width=\"700\" height=\"900\" title=\"颐和园一隅\">\n\n<img src=\"/2018/10/03/北京上海那些事/圆明园大水法.png\" width=\"700\" height=\"700\" title=\"大水法\">\n<img src=\"/2018/10/03/北京上海那些事/圆明园迷宫.png\" width=\"700\" height=\"900\" title=\"大迷宫\">\n<img src=\"/2018/10/03/北京上海那些事/东门.png\" width=\"700\" height=\"700\" title=\"清华东南门\">\n<img src=\"/2018/10/03/北京上海那些事/二校门.png\" width=\"700\" height=\"700\" title=\"清华二校门\">\n<img src=\"/2018/10/03/北京上海那些事/水木清华.png\" width=\"700\" height=\"700\" title=\"水木清华\">\n<h3 id=\"上海篇\"><a href=\"#上海篇\" class=\"headerlink\" title=\"上海篇\"></a>上海篇</h3><p>这是我第二次去上海，上一次还得追溯到上大学前，上海这个城市给我的感觉就是很有活力，少了一份北京的那种历史感，但是多了一份朝气。公交车站的命名方式也是unique，清一色的叫xx路xx路，复旦大学张江校区附近的公交车站，惊现各种名人路，比如祖冲之路，张衡路等等，并且上海的公交会以上海话播报，很有意思。复旦的张江校区灰常的普通，没有标志性建筑，整体感觉像某技术学校。今次去上海除了去复旦面试外，还参观了上交的闵行校区和被人称为复旦后花园的小破财：上海财经大学，据某狗所说，上交的闵行校区的面积仅次于清华，果真如此，学校内竟然有出租小电驴，类似共享单车，但是上交不像清华里面有旧区，上交的每一寸土地都是教学区域，建筑之间比较稀疏，也没有明显的生活区和教学区的分界线。小破财闻名不如见面，半小时走完校园，面积可能比纪中还小。</p>\n<p>上海的CBD，静安区附近相当的繁华，南京路也有很多外国人出入，而去上海最值得去做的一件事就是去看展览，上海的展览很多，我挑了上海展览中心，当天是一个photofair，门票算是比较良心，同样看展和展览的外国人也很多。其实上海并没有北京那么多的旅游景点，因为这座城市比较年轻，因此也比较现代化，没有太多的历史沉淀，但去上海一定要去外滩，还有东方明珠、上海中心一看，毕竟是上海的地标性建筑了。</p>\n<img src=\"/2018/10/03/北京上海那些事/凯旋门.png\" width=\"700\" height=\"700\" title=\"上交凯旋门\">\n<img src=\"/2018/10/03/北京上海那些事/庙门.png\" width=\"700\" height=\"700\" title=\"上交庙门\">\n<img src=\"/2018/10/03/北京上海那些事/上海财经大学.png\" width=\"700\" height=\"700\" title=\"小破财\">\n<img src=\"/2018/10/03/北京上海那些事/田子坊.png\" width=\"700\" height=\"700\" title=\"田子坊\">\n<img src=\"/2018/10/03/北京上海那些事/上海展览中心.png\" width=\"700\" height=\"700\" title=\"上海展览中心\">\n<p><br></p>"},{"title":"Git常用命令","date":"2018-08-17T16:15:28.000Z","_content":"\n{% asset_img header.jpg 500 250 %}\n该文章总结了最常用的Git命令，包括创建仓库、更新仓库、与远端仓库同步等。\n参考了文件 {% asset_link git-cheatsheet.pdf %}，并在此基础上进行了一定的补充。\n\n<!-- more -->\n\n- 创建仓库\n```\n$ git init\n```\n\n- 从远端克隆仓库\n```\n$ git clone <repo addr>\n```\n\n- 查看工作区和暂存区的状态。该命令会返回相比于暂存区，工作区的状态改变信息，如new file，modified，deleted file等\n```\n$ git status\n```\n\n- 将工作区的代码添加到暂存区，为commit做准备\n```\n$ git add [参数] [路径]\n$ git add . : 将修改的文件和新添加的文件stage到暂存区，不包括删除的文件\n$ git add --all(-A)：将所有已跟踪的文件的修改与删除和新添加的未跟踪的文件添加到暂存区\n```\n\n- 将暂存区的代码，提交到本地版本库。-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message\n```\n$ git commit -m <commit message>\n```\n\n- 追加commit，这是直接在上一次的commit基础上进行modify，而不会新开一个commit id，该命令比较少用\n```\n$ git commit --amend\n```\n\n- 查看不同区域状态的差异\n```\n$ git diff: 查看工作区和暂存区的差别\n$ git diff --cached: 查看暂存区和版本库的差别\n$ git diff HEAD: 查看工作区和版本库的差别\n```\n\n- 查看历史的commit记录，可以添加参数，比如缩写(正常的commit id很长)，还可以让它一条commit显示一行\n```\n$ git log (--pretty=oneline) --abbrev\n```\n\n- 查看所有分支的commit记录，包括commit，reset等，回退后的commit在git log是看不到的，而git reflog可以\n```\n$ git reflog\n```\n\n- 查看当前仓库的分支，参数`-r`表示查看远端仓库的分支\n```\n$ git branch\n$ git branch -r\n```\n\n- 新建一条分支\n```\n$ git branch <branch name>\n```\n\n- 切换分支\n```\n$ git checkout <branch name>\n```\n\n- 新建并切换分支\n```\n$ git checkout -b <branch name>\n```\n\n- 删除分支，参数-d还是-D，取决于这条分支的改变有没有merge到其它分支\n```\n$ git checkout -d(D) <branch name>\n```\n\n- 撤销commit\n```\n$ git revert <刚刚提交的commit id>\n```\n\n- 版本回退，mode一般都会选择hard\n```\n$ git reset <mode> <commit id或者HEAD指针倒退>\n```\n\n- 撤销工作区某个文件的修改\n```\n$ git checkout -- <file name>\n```\n\n- 撤销stage\n```\n$ git reset HEAD <file>\n```\n\n- 合并分支，默认是--ff，fast forward，也可以选择--no-ff，那就会新添加一个commit，名为merged\n```\n$ git merge <mode> <branch name>\n```\n\n- 绑定远端仓库，仓库名一般就叫origin就ok\n```\n$ git add remote <远端仓库名> <仓库地址>\n```\n\n- 更新远端仓库\n```\n$ git push <远端仓库名> <本地分支名>:<远端分支名>\n```\n\n- 更新本地仓库\n```\n$ git pull <远端仓库名> <远端分支名>:<本地分支名>\n```\n\n- 将远端仓库拉到本地\n```\n$ git fetch <远端仓库名> <远端分支名>\n```\n\n- 将工作区暂时保存\n```\n$ git stash\n```\n\n- 恢复工作区\n```\n$ git stash pop\n$ git stash apply stash@{n} + git stash drop stash@{n}\n```\n\n<br>","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2018-08-18 00:15:28\ntags:\ncategories:\n- Git\n---\n\n{% asset_img header.jpg 500 250 %}\n该文章总结了最常用的Git命令，包括创建仓库、更新仓库、与远端仓库同步等。\n参考了文件 {% asset_link git-cheatsheet.pdf %}，并在此基础上进行了一定的补充。\n\n<!-- more -->\n\n- 创建仓库\n```\n$ git init\n```\n\n- 从远端克隆仓库\n```\n$ git clone <repo addr>\n```\n\n- 查看工作区和暂存区的状态。该命令会返回相比于暂存区，工作区的状态改变信息，如new file，modified，deleted file等\n```\n$ git status\n```\n\n- 将工作区的代码添加到暂存区，为commit做准备\n```\n$ git add [参数] [路径]\n$ git add . : 将修改的文件和新添加的文件stage到暂存区，不包括删除的文件\n$ git add --all(-A)：将所有已跟踪的文件的修改与删除和新添加的未跟踪的文件添加到暂存区\n```\n\n- 将暂存区的代码，提交到本地版本库。-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message\n```\n$ git commit -m <commit message>\n```\n\n- 追加commit，这是直接在上一次的commit基础上进行modify，而不会新开一个commit id，该命令比较少用\n```\n$ git commit --amend\n```\n\n- 查看不同区域状态的差异\n```\n$ git diff: 查看工作区和暂存区的差别\n$ git diff --cached: 查看暂存区和版本库的差别\n$ git diff HEAD: 查看工作区和版本库的差别\n```\n\n- 查看历史的commit记录，可以添加参数，比如缩写(正常的commit id很长)，还可以让它一条commit显示一行\n```\n$ git log (--pretty=oneline) --abbrev\n```\n\n- 查看所有分支的commit记录，包括commit，reset等，回退后的commit在git log是看不到的，而git reflog可以\n```\n$ git reflog\n```\n\n- 查看当前仓库的分支，参数`-r`表示查看远端仓库的分支\n```\n$ git branch\n$ git branch -r\n```\n\n- 新建一条分支\n```\n$ git branch <branch name>\n```\n\n- 切换分支\n```\n$ git checkout <branch name>\n```\n\n- 新建并切换分支\n```\n$ git checkout -b <branch name>\n```\n\n- 删除分支，参数-d还是-D，取决于这条分支的改变有没有merge到其它分支\n```\n$ git checkout -d(D) <branch name>\n```\n\n- 撤销commit\n```\n$ git revert <刚刚提交的commit id>\n```\n\n- 版本回退，mode一般都会选择hard\n```\n$ git reset <mode> <commit id或者HEAD指针倒退>\n```\n\n- 撤销工作区某个文件的修改\n```\n$ git checkout -- <file name>\n```\n\n- 撤销stage\n```\n$ git reset HEAD <file>\n```\n\n- 合并分支，默认是--ff，fast forward，也可以选择--no-ff，那就会新添加一个commit，名为merged\n```\n$ git merge <mode> <branch name>\n```\n\n- 绑定远端仓库，仓库名一般就叫origin就ok\n```\n$ git add remote <远端仓库名> <仓库地址>\n```\n\n- 更新远端仓库\n```\n$ git push <远端仓库名> <本地分支名>:<远端分支名>\n```\n\n- 更新本地仓库\n```\n$ git pull <远端仓库名> <远端分支名>:<本地分支名>\n```\n\n- 将远端仓库拉到本地\n```\n$ git fetch <远端仓库名> <远端分支名>\n```\n\n- 将工作区暂时保存\n```\n$ git stash\n```\n\n- 恢复工作区\n```\n$ git stash pop\n$ git stash apply stash@{n} + git stash drop stash@{n}\n```\n\n<br>","slug":"Git常用命令","published":1,"updated":"2018-08-20T06:51:51.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gky000bakw203xq50i1","content":"<img src=\"/2018/08/18/Git常用命令/header.jpg\" width=\"500\" height=\"250\">\n<p>该文章总结了最常用的Git命令，包括创建仓库、更新仓库、与远端仓库同步等。<br>参考了文件 <a href=\"/2018/08/18/Git常用命令/git-cheatsheet.pdf\" title=\"git-cheatsheet.pdf\">git-cheatsheet.pdf</a>，并在此基础上进行了一定的补充。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>创建仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从远端克隆仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &lt;repo addr&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看工作区和暂存区的状态。该命令会返回相比于暂存区，工作区的状态改变信息，如new file，modified，deleted file等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将工作区的代码添加到暂存区，为commit做准备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [参数] [路径]</span><br><span class=\"line\">$ git add . : 将修改的文件和新添加的文件stage到暂存区，不包括删除的文件</span><br><span class=\"line\">$ git add --all(-A)：将所有已跟踪的文件的修改与删除和新添加的未跟踪的文件添加到暂存区</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将暂存区的代码，提交到本地版本库。-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &lt;commit message&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>追加commit，这是直接在上一次的commit基础上进行modify，而不会新开一个commit id，该命令比较少用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看不同区域状态的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff: 查看工作区和暂存区的差别</span><br><span class=\"line\">$ git diff --cached: 查看暂存区和版本库的差别</span><br><span class=\"line\">$ git diff HEAD: 查看工作区和版本库的差别</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史的commit记录，可以添加参数，比如缩写(正常的commit id很长)，还可以让它一条commit显示一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log (--pretty=oneline) --abbrev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有分支的commit记录，包括commit，reset等，回退后的commit在git log是看不到的，而git reflog可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前仓库的分支，参数<code>-r</code>表示查看远端仓库的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">$ git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一条分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建并切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支，参数-d还是-D，取决于这条分支的改变有没有merge到其它分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -d(D) &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;刚刚提交的commit id&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本回退，mode一般都会选择hard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset &lt;mode&gt; &lt;commit id或者HEAD指针倒退&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销工作区某个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;file name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销stage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并分支，默认是—ff，fast forward，也可以选择—no-ff，那就会新添加一个commit，名为merged</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;mode&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定远端仓库，仓库名一般就叫origin就ok</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add remote &lt;远端仓库名&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新远端仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push &lt;远端仓库名&gt; &lt;本地分支名&gt;:&lt;远端分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull &lt;远端仓库名&gt; &lt;远端分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将远端仓库拉到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch &lt;远端仓库名&gt; &lt;远端分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将工作区暂时保存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>恢复工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash pop</span><br><span class=\"line\">$ git stash apply stash@&#123;n&#125; + git stash drop stash@&#123;n&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<img src=\"/2018/08/18/Git常用命令/header.jpg\" width=\"500\" height=\"250\">\n<p>该文章总结了最常用的Git命令，包括创建仓库、更新仓库、与远端仓库同步等。<br>参考了文件 <a href=\"/2018/08/18/Git常用命令/git-cheatsheet.pdf\" title=\"git-cheatsheet.pdf\">git-cheatsheet.pdf</a>，并在此基础上进行了一定的补充。</p>","more":"<ul>\n<li><p>创建仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从远端克隆仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone &lt;repo addr&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看工作区和暂存区的状态。该命令会返回相比于暂存区，工作区的状态改变信息，如new file，modified，deleted file等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将工作区的代码添加到暂存区，为commit做准备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [参数] [路径]</span><br><span class=\"line\">$ git add . : 将修改的文件和新添加的文件stage到暂存区，不包括删除的文件</span><br><span class=\"line\">$ git add --all(-A)：将所有已跟踪的文件的修改与删除和新添加的未跟踪的文件添加到暂存区</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将暂存区的代码，提交到本地版本库。-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &lt;commit message&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>追加commit，这是直接在上一次的commit基础上进行modify，而不会新开一个commit id，该命令比较少用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看不同区域状态的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff: 查看工作区和暂存区的差别</span><br><span class=\"line\">$ git diff --cached: 查看暂存区和版本库的差别</span><br><span class=\"line\">$ git diff HEAD: 查看工作区和版本库的差别</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史的commit记录，可以添加参数，比如缩写(正常的commit id很长)，还可以让它一条commit显示一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log (--pretty=oneline) --abbrev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有分支的commit记录，包括commit，reset等，回退后的commit在git log是看不到的，而git reflog可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前仓库的分支，参数<code>-r</code>表示查看远端仓库的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">$ git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一条分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建并切换分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支，参数-d还是-D，取决于这条分支的改变有没有merge到其它分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -d(D) &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git revert &lt;刚刚提交的commit id&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本回退，mode一般都会选择hard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset &lt;mode&gt; &lt;commit id或者HEAD指针倒退&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销工作区某个文件的修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;file name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销stage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并分支，默认是—ff，fast forward，也可以选择—no-ff，那就会新添加一个commit，名为merged</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;mode&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定远端仓库，仓库名一般就叫origin就ok</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add remote &lt;远端仓库名&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新远端仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push &lt;远端仓库名&gt; &lt;本地分支名&gt;:&lt;远端分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull &lt;远端仓库名&gt; &lt;远端分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将远端仓库拉到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch &lt;远端仓库名&gt; &lt;远端分支名&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将工作区暂时保存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>恢复工作区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash pop</span><br><span class=\"line\">$ git stash apply stash@&#123;n&#125; + git stash drop stash@&#123;n&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>"},{"title":"【数据挖掘比赛】————达观杯文本智能处理挑战赛","date":"2018-09-24T04:21:44.000Z","_content":"\n{% asset_img header.png %}\n\n[“达观杯”文本智能处理挑战赛](http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html)是达观集团在[DataCastle](http://www.dcjingsai.com/)举办的数据挖掘比赛，比赛全程一个人solo，最终排名为：40/3182(top2%)。\n\n<!-- more -->\n\n## 比赛信息\n\n### 赛题任务\n\n自然语言处理一直是人工智能领域的重要话题，而人类语言的复杂性也给 NLP 布下了重重困难等待解决。长文本的智能解析就是颇具挑战性的任务，如何从纷繁多变、信息量庞杂的冗长文本中获取关键信息，一直是文本领域难题。随着深度学习的热潮来临，有许多新方法来到了 NLP 领域，给相关任务带来了更多优秀成果，也给大家带来了更多应用和想象的空间。\n\n此次比赛提供了一批长文本数据和分类信息，我们需要构建文本分类模型，实现精准分类。\n\n### 赛题数据\n\n这是一个文本分类的任务，并且针对的是长文本，数据给定了长文本经过分词后的结果，并且数据进行了脱敏处理，无法知道原文本是什么内容，数据特征列如下：\n\n- word_seg：str，文本分词后的每一个词，用空格间隔，一个词用一个数字代表\n- article：str，文本中的每一个字，同样用空格间隔，一个数字代表一个字。从这里可以看出文本应该是中文，存在字和词的信息。\n- class：int，文本所属的类别（共19个类）\n\n\n\n## 解决方案\n\n### 特征提取\n\n文本信息不能作为分类模型的输入，我们必须要将文本的词信息转成数字信息，常用的方法有onehot，tf-idf，LDA，word2vec，在本次比赛中，我采用了tf-idf和word2vec这两种特征提取方法\n\nsklearn中有TfidfVectorizer的工具可以直接将文本信息转成t-fidf矩阵，比较重要的参数如下\n\n- ngram-range：tuple，ngram是指将多个词看成一个词的一种做法，这样做可以将词序考虑进去，而不是将每个词都看成是独立的。\n- min_df, max_df：int/double，这两个参数都是限定哪些词需要考虑的，出现太多次或者太少次都需要被过滤。\n- use_idf：默认为true\n- smooth_idf：默认为true防止分母为0。\n\n```python\nvec = TfidfVectorizer(ngram_range=(1,3),min_df=3, max_df=0.9,use_idf=1,smooth_idf=1, sublinear_tf=1)\nx = vec.fit_transform(x)\n```\n\n\n\n\n### 单模型\n\n#### 线性模型\n\n长文本提取出来的tf-idf矩阵维度达到了百万级，远远大于训练集的样本数，这时候选取线性模型的分类效果和训练时间都会比较好，因此我选择了逻辑回归分类器和线性svm作为基本的分类器，并且通过交叉验证和网格搜索找到较好的参数设置。\n\n#### 深度学习模型\n\n- fasttext是Facebook提出的一个快速文本分类的模型，本质上是一个线性模型，因为它的网络没有用到激活函数，而fasttext重要的一点是用到了character-ngram的trick，但是在这个任务中， 由于数据脱敏了，所以这个trick就没有太大的作用\n\n  ```python\n  clf = fasttext.supervised(input_file = 'fasttext_trainset.txt', output='fasttext_model', label_prefix = '__label__', bucket = 2000000, word_ngrams = 1, ws = 20, epoch=40, silent = 0)\n  ```\n\n- CNN模型用于文本分类，主要是将文本拼成一个矩阵，然后进行卷积操作，网络结构如下\n\n  ```python\n  input_layer = Input(shape = (MAX_WORD_NUM,), dtype = 'int32', name = 'input')\n  embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length= MAX_WORD_NUM, trainable = True)(input_layer)\n  \n  conv_output = []\n  for filter_ in [1,2,3,4,5,6]:\n      conv = Conv1D(256, filter_, padding='same')(embedding_layer)\n      conv = Activation('relu')(conv)\n      conv = GlobalMaxPool1D()(conv)\n      conv_output.append(conv)\n  \n  conv_output = concatenate(conv_output)\n  full_connected_layer = Dense(256)(conv_output)\n  full_connected_layer = Dropout(0.3)(full_connected_layer)\n  full_connected_layer = Activation('relu')(full_connected_layer)\n  full_connected_layer = Dense(72)(full_connected_layer)\n  full_connected_layer = Activation('relu')(full_connected_layer)\n  full_connected_layer = Dense(19)(full_connected_layer)\n  ```\n\n  \n\n- bi-lstm用于文本分类也很常见，lstm能够解决RNN梯度消失的问题，并且能够捕获文本长时间的依赖关系，网络结构如下\n\n  ```python\n  input_layer = Input(shape = (MAX_WORD_NUM, ), dtype='int32')\n  embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=MAX_WORD_NUM, trainable = True)(input_layer)\n  x = Dropout(0.3)(embedding_layer)\n  x = LSTM(units=128, return_sequences= True)(embedding_layer)\n  x = Dropout(0.3)(x)\n  x = Flatten()(x)\n  x = Dense(units=19)(x)\n  ```\n\n  ### 模型融合\n\n  单模型效果最好的是几个线性模型，深度模型的效果都一般般，但通过最后的stacking，使得整体模型的效果有了一定的提升，stacking过程分5折\n  - 第一层\n    - 逻辑回归，搭配不同的solver\n    - linear svc\n    - fasttext\n    - lstm\n    - cnn\n  - 第二层：lgb\n\n## 附录\n比赛代码可以到[这里](https://github.com/Vincent-Hoo/2018-Dc-DataGrand-TextClassification)查看，比赛前十的答辩ppt如下：{% asset_link 达观杯十强分享汇总ppt.pdf %}\n\n\n\n<br>","source":"_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛.md","raw":"---\ntitle: 【数据挖掘比赛】————达观杯文本智能处理挑战赛\ndate: 2018-09-24 12:21:44\ntags:\n---\n\n{% asset_img header.png %}\n\n[“达观杯”文本智能处理挑战赛](http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html)是达观集团在[DataCastle](http://www.dcjingsai.com/)举办的数据挖掘比赛，比赛全程一个人solo，最终排名为：40/3182(top2%)。\n\n<!-- more -->\n\n## 比赛信息\n\n### 赛题任务\n\n自然语言处理一直是人工智能领域的重要话题，而人类语言的复杂性也给 NLP 布下了重重困难等待解决。长文本的智能解析就是颇具挑战性的任务，如何从纷繁多变、信息量庞杂的冗长文本中获取关键信息，一直是文本领域难题。随着深度学习的热潮来临，有许多新方法来到了 NLP 领域，给相关任务带来了更多优秀成果，也给大家带来了更多应用和想象的空间。\n\n此次比赛提供了一批长文本数据和分类信息，我们需要构建文本分类模型，实现精准分类。\n\n### 赛题数据\n\n这是一个文本分类的任务，并且针对的是长文本，数据给定了长文本经过分词后的结果，并且数据进行了脱敏处理，无法知道原文本是什么内容，数据特征列如下：\n\n- word_seg：str，文本分词后的每一个词，用空格间隔，一个词用一个数字代表\n- article：str，文本中的每一个字，同样用空格间隔，一个数字代表一个字。从这里可以看出文本应该是中文，存在字和词的信息。\n- class：int，文本所属的类别（共19个类）\n\n\n\n## 解决方案\n\n### 特征提取\n\n文本信息不能作为分类模型的输入，我们必须要将文本的词信息转成数字信息，常用的方法有onehot，tf-idf，LDA，word2vec，在本次比赛中，我采用了tf-idf和word2vec这两种特征提取方法\n\nsklearn中有TfidfVectorizer的工具可以直接将文本信息转成t-fidf矩阵，比较重要的参数如下\n\n- ngram-range：tuple，ngram是指将多个词看成一个词的一种做法，这样做可以将词序考虑进去，而不是将每个词都看成是独立的。\n- min_df, max_df：int/double，这两个参数都是限定哪些词需要考虑的，出现太多次或者太少次都需要被过滤。\n- use_idf：默认为true\n- smooth_idf：默认为true防止分母为0。\n\n```python\nvec = TfidfVectorizer(ngram_range=(1,3),min_df=3, max_df=0.9,use_idf=1,smooth_idf=1, sublinear_tf=1)\nx = vec.fit_transform(x)\n```\n\n\n\n\n### 单模型\n\n#### 线性模型\n\n长文本提取出来的tf-idf矩阵维度达到了百万级，远远大于训练集的样本数，这时候选取线性模型的分类效果和训练时间都会比较好，因此我选择了逻辑回归分类器和线性svm作为基本的分类器，并且通过交叉验证和网格搜索找到较好的参数设置。\n\n#### 深度学习模型\n\n- fasttext是Facebook提出的一个快速文本分类的模型，本质上是一个线性模型，因为它的网络没有用到激活函数，而fasttext重要的一点是用到了character-ngram的trick，但是在这个任务中， 由于数据脱敏了，所以这个trick就没有太大的作用\n\n  ```python\n  clf = fasttext.supervised(input_file = 'fasttext_trainset.txt', output='fasttext_model', label_prefix = '__label__', bucket = 2000000, word_ngrams = 1, ws = 20, epoch=40, silent = 0)\n  ```\n\n- CNN模型用于文本分类，主要是将文本拼成一个矩阵，然后进行卷积操作，网络结构如下\n\n  ```python\n  input_layer = Input(shape = (MAX_WORD_NUM,), dtype = 'int32', name = 'input')\n  embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length= MAX_WORD_NUM, trainable = True)(input_layer)\n  \n  conv_output = []\n  for filter_ in [1,2,3,4,5,6]:\n      conv = Conv1D(256, filter_, padding='same')(embedding_layer)\n      conv = Activation('relu')(conv)\n      conv = GlobalMaxPool1D()(conv)\n      conv_output.append(conv)\n  \n  conv_output = concatenate(conv_output)\n  full_connected_layer = Dense(256)(conv_output)\n  full_connected_layer = Dropout(0.3)(full_connected_layer)\n  full_connected_layer = Activation('relu')(full_connected_layer)\n  full_connected_layer = Dense(72)(full_connected_layer)\n  full_connected_layer = Activation('relu')(full_connected_layer)\n  full_connected_layer = Dense(19)(full_connected_layer)\n  ```\n\n  \n\n- bi-lstm用于文本分类也很常见，lstm能够解决RNN梯度消失的问题，并且能够捕获文本长时间的依赖关系，网络结构如下\n\n  ```python\n  input_layer = Input(shape = (MAX_WORD_NUM, ), dtype='int32')\n  embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=MAX_WORD_NUM, trainable = True)(input_layer)\n  x = Dropout(0.3)(embedding_layer)\n  x = LSTM(units=128, return_sequences= True)(embedding_layer)\n  x = Dropout(0.3)(x)\n  x = Flatten()(x)\n  x = Dense(units=19)(x)\n  ```\n\n  ### 模型融合\n\n  单模型效果最好的是几个线性模型，深度模型的效果都一般般，但通过最后的stacking，使得整体模型的效果有了一定的提升，stacking过程分5折\n  - 第一层\n    - 逻辑回归，搭配不同的solver\n    - linear svc\n    - fasttext\n    - lstm\n    - cnn\n  - 第二层：lgb\n\n## 附录\n比赛代码可以到[这里](https://github.com/Vincent-Hoo/2018-Dc-DataGrand-TextClassification)查看，比赛前十的答辩ppt如下：{% asset_link 达观杯十强分享汇总ppt.pdf %}\n\n\n\n<br>","slug":"【数据挖掘比赛】————达观杯文本智能处理挑战赛","published":1,"updated":"2018-09-27T05:38:53.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gl1000dakw2x8uy8cvp","content":"<img src=\"/2018/09/24/【数据挖掘比赛】————达观杯文本智能处理挑战赛/header.png\">\n<p><a href=\"http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html\" target=\"_blank\" rel=\"noopener\">“达观杯”文本智能处理挑战赛</a>是达观集团在<a href=\"http://www.dcjingsai.com/\" target=\"_blank\" rel=\"noopener\">DataCastle</a>举办的数据挖掘比赛，比赛全程一个人solo，最终排名为：40/3182(top2%)。</p>\n<a id=\"more\"></a>\n<h2 id=\"比赛信息\"><a href=\"#比赛信息\" class=\"headerlink\" title=\"比赛信息\"></a>比赛信息</h2><h3 id=\"赛题任务\"><a href=\"#赛题任务\" class=\"headerlink\" title=\"赛题任务\"></a>赛题任务</h3><p>自然语言处理一直是人工智能领域的重要话题，而人类语言的复杂性也给 NLP 布下了重重困难等待解决。长文本的智能解析就是颇具挑战性的任务，如何从纷繁多变、信息量庞杂的冗长文本中获取关键信息，一直是文本领域难题。随着深度学习的热潮来临，有许多新方法来到了 NLP 领域，给相关任务带来了更多优秀成果，也给大家带来了更多应用和想象的空间。</p>\n<p>此次比赛提供了一批长文本数据和分类信息，我们需要构建文本分类模型，实现精准分类。</p>\n<h3 id=\"赛题数据\"><a href=\"#赛题数据\" class=\"headerlink\" title=\"赛题数据\"></a>赛题数据</h3><p>这是一个文本分类的任务，并且针对的是长文本，数据给定了长文本经过分词后的结果，并且数据进行了脱敏处理，无法知道原文本是什么内容，数据特征列如下：</p>\n<ul>\n<li>word_seg：str，文本分词后的每一个词，用空格间隔，一个词用一个数字代表</li>\n<li>article：str，文本中的每一个字，同样用空格间隔，一个数字代表一个字。从这里可以看出文本应该是中文，存在字和词的信息。</li>\n<li>class：int，文本所属的类别（共19个类）</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"特征提取\"><a href=\"#特征提取\" class=\"headerlink\" title=\"特征提取\"></a>特征提取</h3><p>文本信息不能作为分类模型的输入，我们必须要将文本的词信息转成数字信息，常用的方法有onehot，tf-idf，LDA，word2vec，在本次比赛中，我采用了tf-idf和word2vec这两种特征提取方法</p>\n<p>sklearn中有TfidfVectorizer的工具可以直接将文本信息转成t-fidf矩阵，比较重要的参数如下</p>\n<ul>\n<li>ngram-range：tuple，ngram是指将多个词看成一个词的一种做法，这样做可以将词序考虑进去，而不是将每个词都看成是独立的。</li>\n<li>min_df, max_df：int/double，这两个参数都是限定哪些词需要考虑的，出现太多次或者太少次都需要被过滤。</li>\n<li>use_idf：默认为true</li>\n<li>smooth_idf：默认为true防止分母为0。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec = TfidfVectorizer(ngram_range=(<span class=\"number\">1</span>,<span class=\"number\">3</span>),min_df=<span class=\"number\">3</span>, max_df=<span class=\"number\">0.9</span>,use_idf=<span class=\"number\">1</span>,smooth_idf=<span class=\"number\">1</span>, sublinear_tf=<span class=\"number\">1</span>)</span><br><span class=\"line\">x = vec.fit_transform(x)</span><br></pre></td></tr></table></figure>\n<h3 id=\"单模型\"><a href=\"#单模型\" class=\"headerlink\" title=\"单模型\"></a>单模型</h3><h4 id=\"线性模型\"><a href=\"#线性模型\" class=\"headerlink\" title=\"线性模型\"></a>线性模型</h4><p>长文本提取出来的tf-idf矩阵维度达到了百万级，远远大于训练集的样本数，这时候选取线性模型的分类效果和训练时间都会比较好，因此我选择了逻辑回归分类器和线性svm作为基本的分类器，并且通过交叉验证和网格搜索找到较好的参数设置。</p>\n<h4 id=\"深度学习模型\"><a href=\"#深度学习模型\" class=\"headerlink\" title=\"深度学习模型\"></a>深度学习模型</h4><ul>\n<li><p>fasttext是Facebook提出的一个快速文本分类的模型，本质上是一个线性模型，因为它的网络没有用到激活函数，而fasttext重要的一点是用到了character-ngram的trick，但是在这个任务中， 由于数据脱敏了，所以这个trick就没有太大的作用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clf = fasttext.supervised(input_file = <span class=\"string\">'fasttext_trainset.txt'</span>, output=<span class=\"string\">'fasttext_model'</span>, label_prefix = <span class=\"string\">'__label__'</span>, bucket = <span class=\"number\">2000000</span>, word_ngrams = <span class=\"number\">1</span>, ws = <span class=\"number\">20</span>, epoch=<span class=\"number\">40</span>, silent = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CNN模型用于文本分类，主要是将文本拼成一个矩阵，然后进行卷积操作，网络结构如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_layer = Input(shape = (MAX_WORD_NUM,), dtype = <span class=\"string\">'int32'</span>, name = <span class=\"string\">'input'</span>)</span><br><span class=\"line\">embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length= MAX_WORD_NUM, trainable = <span class=\"keyword\">True</span>)(input_layer)</span><br><span class=\"line\"></span><br><span class=\"line\">conv_output = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> filter_ <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]:</span><br><span class=\"line\">    conv = Conv1D(<span class=\"number\">256</span>, filter_, padding=<span class=\"string\">'same'</span>)(embedding_layer)</span><br><span class=\"line\">    conv = Activation(<span class=\"string\">'relu'</span>)(conv)</span><br><span class=\"line\">    conv = GlobalMaxPool1D()(conv)</span><br><span class=\"line\">    conv_output.append(conv)</span><br><span class=\"line\"></span><br><span class=\"line\">conv_output = concatenate(conv_output)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">256</span>)(conv_output)</span><br><span class=\"line\">full_connected_layer = Dropout(<span class=\"number\">0.3</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Activation(<span class=\"string\">'relu'</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">72</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Activation(<span class=\"string\">'relu'</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">19</span>)(full_connected_layer)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>bi-lstm用于文本分类也很常见，lstm能够解决RNN梯度消失的问题，并且能够捕获文本长时间的依赖关系，网络结构如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_layer = Input(shape = (MAX_WORD_NUM, ), dtype=<span class=\"string\">'int32'</span>)</span><br><span class=\"line\">embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=MAX_WORD_NUM, trainable = <span class=\"keyword\">True</span>)(input_layer)</span><br><span class=\"line\">x = Dropout(<span class=\"number\">0.3</span>)(embedding_layer)</span><br><span class=\"line\">x = LSTM(units=<span class=\"number\">128</span>, return_sequences= <span class=\"keyword\">True</span>)(embedding_layer)</span><br><span class=\"line\">x = Dropout(<span class=\"number\">0.3</span>)(x)</span><br><span class=\"line\">x = Flatten()(x)</span><br><span class=\"line\">x = Dense(units=<span class=\"number\">19</span>)(x)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型融合\"><a href=\"#模型融合\" class=\"headerlink\" title=\"模型融合\"></a>模型融合</h3><p>单模型效果最好的是几个线性模型，深度模型的效果都一般般，但通过最后的stacking，使得整体模型的效果有了一定的提升，stacking过程分5折</p>\n<ul>\n<li>第一层<ul>\n<li>逻辑回归，搭配不同的solver</li>\n<li>linear svc</li>\n<li>fasttext</li>\n<li>lstm</li>\n<li>cnn</li>\n</ul>\n</li>\n<li>第二层：lgb</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>比赛代码可以到<a href=\"https://github.com/Vincent-Hoo/2018-Dc-DataGrand-TextClassification\" target=\"_blank\" rel=\"noopener\">这里</a>查看，比赛前十的答辩ppt如下：<a href=\"/2018/09/24/【数据挖掘比赛】————达观杯文本智能处理挑战赛/达观杯十强分享汇总ppt.pdf\" title=\"达观杯十强分享汇总ppt.pdf\">达观杯十强分享汇总ppt.pdf</a></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<img src=\"/2018/09/24/【数据挖掘比赛】————达观杯文本智能处理挑战赛/header.png\">\n<p><a href=\"http://www.dcjingsai.com/common/cmpt/%E2%80%9C%E8%BE%BE%E8%A7%82%E6%9D%AF%E2%80%9D%E6%96%87%E6%9C%AC%E6%99%BA%E8%83%BD%E5%A4%84%E7%90%86%E6%8C%91%E6%88%98%E8%B5%9B_%E7%AB%9E%E8%B5%9B%E4%BF%A1%E6%81%AF.html\" target=\"_blank\" rel=\"noopener\">“达观杯”文本智能处理挑战赛</a>是达观集团在<a href=\"http://www.dcjingsai.com/\" target=\"_blank\" rel=\"noopener\">DataCastle</a>举办的数据挖掘比赛，比赛全程一个人solo，最终排名为：40/3182(top2%)。</p>","more":"<h2 id=\"比赛信息\"><a href=\"#比赛信息\" class=\"headerlink\" title=\"比赛信息\"></a>比赛信息</h2><h3 id=\"赛题任务\"><a href=\"#赛题任务\" class=\"headerlink\" title=\"赛题任务\"></a>赛题任务</h3><p>自然语言处理一直是人工智能领域的重要话题，而人类语言的复杂性也给 NLP 布下了重重困难等待解决。长文本的智能解析就是颇具挑战性的任务，如何从纷繁多变、信息量庞杂的冗长文本中获取关键信息，一直是文本领域难题。随着深度学习的热潮来临，有许多新方法来到了 NLP 领域，给相关任务带来了更多优秀成果，也给大家带来了更多应用和想象的空间。</p>\n<p>此次比赛提供了一批长文本数据和分类信息，我们需要构建文本分类模型，实现精准分类。</p>\n<h3 id=\"赛题数据\"><a href=\"#赛题数据\" class=\"headerlink\" title=\"赛题数据\"></a>赛题数据</h3><p>这是一个文本分类的任务，并且针对的是长文本，数据给定了长文本经过分词后的结果，并且数据进行了脱敏处理，无法知道原文本是什么内容，数据特征列如下：</p>\n<ul>\n<li>word_seg：str，文本分词后的每一个词，用空格间隔，一个词用一个数字代表</li>\n<li>article：str，文本中的每一个字，同样用空格间隔，一个数字代表一个字。从这里可以看出文本应该是中文，存在字和词的信息。</li>\n<li>class：int，文本所属的类别（共19个类）</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"特征提取\"><a href=\"#特征提取\" class=\"headerlink\" title=\"特征提取\"></a>特征提取</h3><p>文本信息不能作为分类模型的输入，我们必须要将文本的词信息转成数字信息，常用的方法有onehot，tf-idf，LDA，word2vec，在本次比赛中，我采用了tf-idf和word2vec这两种特征提取方法</p>\n<p>sklearn中有TfidfVectorizer的工具可以直接将文本信息转成t-fidf矩阵，比较重要的参数如下</p>\n<ul>\n<li>ngram-range：tuple，ngram是指将多个词看成一个词的一种做法，这样做可以将词序考虑进去，而不是将每个词都看成是独立的。</li>\n<li>min_df, max_df：int/double，这两个参数都是限定哪些词需要考虑的，出现太多次或者太少次都需要被过滤。</li>\n<li>use_idf：默认为true</li>\n<li>smooth_idf：默认为true防止分母为0。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec = TfidfVectorizer(ngram_range=(<span class=\"number\">1</span>,<span class=\"number\">3</span>),min_df=<span class=\"number\">3</span>, max_df=<span class=\"number\">0.9</span>,use_idf=<span class=\"number\">1</span>,smooth_idf=<span class=\"number\">1</span>, sublinear_tf=<span class=\"number\">1</span>)</span><br><span class=\"line\">x = vec.fit_transform(x)</span><br></pre></td></tr></table></figure>\n<h3 id=\"单模型\"><a href=\"#单模型\" class=\"headerlink\" title=\"单模型\"></a>单模型</h3><h4 id=\"线性模型\"><a href=\"#线性模型\" class=\"headerlink\" title=\"线性模型\"></a>线性模型</h4><p>长文本提取出来的tf-idf矩阵维度达到了百万级，远远大于训练集的样本数，这时候选取线性模型的分类效果和训练时间都会比较好，因此我选择了逻辑回归分类器和线性svm作为基本的分类器，并且通过交叉验证和网格搜索找到较好的参数设置。</p>\n<h4 id=\"深度学习模型\"><a href=\"#深度学习模型\" class=\"headerlink\" title=\"深度学习模型\"></a>深度学习模型</h4><ul>\n<li><p>fasttext是Facebook提出的一个快速文本分类的模型，本质上是一个线性模型，因为它的网络没有用到激活函数，而fasttext重要的一点是用到了character-ngram的trick，但是在这个任务中， 由于数据脱敏了，所以这个trick就没有太大的作用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clf = fasttext.supervised(input_file = <span class=\"string\">'fasttext_trainset.txt'</span>, output=<span class=\"string\">'fasttext_model'</span>, label_prefix = <span class=\"string\">'__label__'</span>, bucket = <span class=\"number\">2000000</span>, word_ngrams = <span class=\"number\">1</span>, ws = <span class=\"number\">20</span>, epoch=<span class=\"number\">40</span>, silent = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>CNN模型用于文本分类，主要是将文本拼成一个矩阵，然后进行卷积操作，网络结构如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_layer = Input(shape = (MAX_WORD_NUM,), dtype = <span class=\"string\">'int32'</span>, name = <span class=\"string\">'input'</span>)</span><br><span class=\"line\">embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length= MAX_WORD_NUM, trainable = <span class=\"keyword\">True</span>)(input_layer)</span><br><span class=\"line\"></span><br><span class=\"line\">conv_output = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> filter_ <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]:</span><br><span class=\"line\">    conv = Conv1D(<span class=\"number\">256</span>, filter_, padding=<span class=\"string\">'same'</span>)(embedding_layer)</span><br><span class=\"line\">    conv = Activation(<span class=\"string\">'relu'</span>)(conv)</span><br><span class=\"line\">    conv = GlobalMaxPool1D()(conv)</span><br><span class=\"line\">    conv_output.append(conv)</span><br><span class=\"line\"></span><br><span class=\"line\">conv_output = concatenate(conv_output)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">256</span>)(conv_output)</span><br><span class=\"line\">full_connected_layer = Dropout(<span class=\"number\">0.3</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Activation(<span class=\"string\">'relu'</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">72</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Activation(<span class=\"string\">'relu'</span>)(full_connected_layer)</span><br><span class=\"line\">full_connected_layer = Dense(<span class=\"number\">19</span>)(full_connected_layer)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>bi-lstm用于文本分类也很常见，lstm能够解决RNN梯度消失的问题，并且能够捕获文本长时间的依赖关系，网络结构如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_layer = Input(shape = (MAX_WORD_NUM, ), dtype=<span class=\"string\">'int32'</span>)</span><br><span class=\"line\">embedding_layer = Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=MAX_WORD_NUM, trainable = <span class=\"keyword\">True</span>)(input_layer)</span><br><span class=\"line\">x = Dropout(<span class=\"number\">0.3</span>)(embedding_layer)</span><br><span class=\"line\">x = LSTM(units=<span class=\"number\">128</span>, return_sequences= <span class=\"keyword\">True</span>)(embedding_layer)</span><br><span class=\"line\">x = Dropout(<span class=\"number\">0.3</span>)(x)</span><br><span class=\"line\">x = Flatten()(x)</span><br><span class=\"line\">x = Dense(units=<span class=\"number\">19</span>)(x)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模型融合\"><a href=\"#模型融合\" class=\"headerlink\" title=\"模型融合\"></a>模型融合</h3><p>单模型效果最好的是几个线性模型，深度模型的效果都一般般，但通过最后的stacking，使得整体模型的效果有了一定的提升，stacking过程分5折</p>\n<ul>\n<li>第一层<ul>\n<li>逻辑回归，搭配不同的solver</li>\n<li>linear svc</li>\n<li>fasttext</li>\n<li>lstm</li>\n<li>cnn</li>\n</ul>\n</li>\n<li>第二层：lgb</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>比赛代码可以到<a href=\"https://github.com/Vincent-Hoo/2018-Dc-DataGrand-TextClassification\" target=\"_blank\" rel=\"noopener\">这里</a>查看，比赛前十的答辩ppt如下：<a href=\"/2018/09/24/【数据挖掘比赛】————达观杯文本智能处理挑战赛/达观杯十强分享汇总ppt.pdf\" title=\"达观杯十强分享汇总ppt.pdf\">达观杯十强分享汇总ppt.pdf</a></p>\n<p><br></p>"},{"title":"保研历程分享","date":"2018-09-27T07:06:33.000Z","mathjax":true,"_content":"\n从今年3月开始关注保研的信息，到9月份的尘埃落定，半年里奔跑于各一大城市，各种交流面试，这一路保研的历程充满着焦虑、紧张到最后的喜悦，现在回想起来，总有值得总结和分享的地方。这篇文章将我的保研历程分为三部分：前期准备、夏令营和九月推免。\n\n<!-- more -->\n\n夏令营中最后悔的是没有申请中科院，无论是计算所、软件所还是自动化所，都很值得去尝试；上交的报名系统是我见过最简单的，没有之一，像平常问卷那样，不用上传任何材料；北大本部是我一心向往却无法接近的存在（同清华）\n\n- 夏令营申请：清华叉院，清华伯克利，北大信科，北大信工，北大叉院，南大AI学院，复旦计科，上交计科\n- 夏令营入营：清华伯克利，北大信工（推掉），南大，复旦（与考试冲突）\n\n<br>\n### 前期准备\n\n3月份开始，各大论坛和学院官网就会公布夏令营的报名信息，一般的夏令营都会在7月上中旬举行，但是也有6月份的，如清华叉院，南大lambda实验室（为了提前抢人）。然后就是准备各种申请材料，包括简历、个人陈述、研究计划、推荐信以及各种获奖证书，一般情况，材料只需要中文即可，但是也存在某些院要求中英文（如清华的某院），所以最好就是两个版本都准备一下。\n\n材料准备的过程十分漫长和煎熬，跟出国的材料基本一致，只是国内夏令营的材料水分更大，不需要特别的精雕细刻。准备材料的时候，你会感受到自己的中文和英文都无比的差 >_<\n\n- 简历：英文简历最好用latex，中文简历自己找个像样的模板即可。\n- PS：保证一定的叙事性，同时加入一定的学术性，可以说是非常难了。\n- 研究计划：并不是简单的写自己未来想做什么，要写出文献综述的感觉，总结过去的工作，找出研究问题的关键之处，并且给出有一定可行性的解决方案作为未来的研究计划。\n- 推荐信：国内的推荐信基本都是学生写，然后老师签名，与申请国外学校不一样，国内推荐信只是形式；而信的内容就是各种自夸。\n\n另外：强烈推荐做一个自己本科阶段科研工作展示报告的ppt，用处很大，面试的时候也可以给老师看，这比老师看简历要来得更加容易。\n\n材料准备完，然后就去学校夏令营的报名系统报名，然后寄纸质材料。如果没有推荐信的话，我觉得夏令营的申请都比较容易，但是由于推荐信需要老师亲自签名，所以经常会出现拿着好几封推荐信要老师签名的情况，老师找得太多次又不好意思，然而推荐信的作用在所有申请材料里面基本为 0，这个形式上的推荐信，我是非常想吐槽的！！！\n\n---\n\n至此，夏令营申请基本完成了，然后你就可以每天进行焦急的等待。\n\n但如果你有明确的研究方向，或者你有明确的导师意向，你就可以提前进行套磁，套磁的过程基本就是发一封邮件给有意向的导师进行自荐，并且附上自己的简历等材料。套磁的结果需要理性分析，并不能太过先入为主，要分析老师的回复是套话还是真的对你有兴趣；我发了邮件给十几个老师，清华的老师基本就是不回，或者回复名额已满；北大的sx老师直接回复“欢迎报考xxx院，我那里还有名额，我会重点关注你”，给了我一种老师对我很有兴趣的假象，然而北大本部岂是我这种渣渣能进去的地方；复旦hxj老师直接回复“夏令营进了再跟我说”，拒绝套磁；南大dxy老师反问有无读博的想法......\n\n总之，套磁有一定成功率，但是也不要报太大的希望，虽然说老师有主导权，但是就凭简单的几封邮件交流，老师又怎么能一定保你能进呢？\n\n\n<br>\n### 夏令营\n\n本渣只去了两个夏令营，清华伯克利和南大，复旦由于期末考推掉，北大信工由于夏令营不发offer且没有感兴趣的老师也推掉了。\n\n#### 清华伯克利（TBSI）\n\n安排住宿且有交通费补贴，夏令营三天，第一天报道，第二天开营宣讲加实验室参观，第三天面试，无机试，TBSI招收的学生面比较广，对编程能力要求不高，基础知识和英语比较重要。面试如下\n\n- 全程英语\n- 面试前阅读英文文献，内容是关于语音识别的，面试时会提问\n- 简单的知识问答，如dropout是什么，距离度量有哪些等\n- 开放性问题：喜欢哪个实验室，GPA5分制解释一下，为什么那么多人参加美赛，最喜欢的编程语言\n- 气氛比较轻松，老师也比较nice，但是被安排在当天的最后一个面试。\n\n面试完十几分钟，就有老师联系我说想让我跟他做毕设，他就是我未来的老师，起初还是各种纠结，最后还是决定先答应着，然后参观了他们的实验室，和老师聊了一下，老师人很nice，听了他们的组会，老师的指导也蛮到位\n\n\n\n#### 南大计算机系\n\n南大国际四星级酒店，超级豪华，夏令营三天，第一天报道，第二天自由交流，第三天机试面试。南大会有一个意向接受导师签名的东西，相当于是一个第一志愿，一般你对某个老师感兴趣，就找他签名，老师不会拒绝。\n\n- 交流\n\n  - dxy老师\n    - 研究方向对口的老师，同NLP\n    - 简单介绍下项目，问了下实验结果\n    - 想读硕士还是博士\n  - hsj老师\n    - 跟dxy老师同一个组\n    - 叫我英文介绍项目，好在我TBSI那时准备过\n    - 项目有没有能改进的地方，全程瞎逼，天马行空\n  - lm老师\n    - lambda实验室的老师，lambda的名额大部分都已经提前招完了，还有少数留在夏令营\n    - 同样项目介绍\n    - 给8分钟阅读他的论文，概括论文整体思想\n    - IQ题\n\n- 机试\n\n  - 共3道题，按样例给分，共300分\n\n  - 1）找规律题：给定一个正整数 $n$，计算所有 $n$ 位长度的二进制串且没有连续 $1$ 的个数，如 $n=3$，有 000, 001, 010, 100, 101。找下规律，就可以推出递推公式。\n  - 2）搜索题：给定一个正整数 $n$，从 $1$ 到 $n$ 中选择 $n-1$ 个数，以随机的顺序拼接成字符串 $s$，给定这个字符串，找出缺失的那个数字\n  - 3）动归：题目忘了。。。\n\n- 面试\n\n  - 3个老师分别对应三个大方向问题，面试10分钟\n  - 第一个老师问项目\n  - 第二个老师问算法，分治法是什么，动归是什么，分治和动归的差别是什么，当场眩晕。。\n  - 第三个老师问操作系统，死锁和怎么预防死锁\n  - 最后补了一个英文问题：最喜欢的编程语言\n\n虽然南大面试感觉不好，但是机试发挥比较正常，最后也如愿拿到offer，然后又是各种纠结，对比南大和TBSI，最后还是选择了TBSI，拒绝了南大。\n\n\n<br>\n### 九月推免\n\n#### TBSI\n\nTBSI九月份的面试纯属走流程，水到爆炸，但我又是最后一个面试。。面试前同样看文献，这次是nature上面一篇关于AlphaGo Zero的文章，然后面试过程基本就是随便问下项目，然后就是open discussion，讨论阿法狗以及强化学习等，全程瞎逼逼，不懂强化学习的渣渣路过\n\n#### 中大\n\n- 机试不算分数，10道题\n- 面试注重基本知识，如高数线代，问了微分中值定理，线性方程组有解的必要条件，还有就是开放性问题，机器学习和深度学习不同点\n\n#### 复旦\n\n- 机试\n  - 给定一条直线和一个圆，求直线在圆上的长度。分情况讨论即可\n  - 给定一个数组，在某一位置的左边，求比该数大的且距离最近的位置\n  - 面试经典题：一个数组，求三个数字相加等于某一个数的组合数\n- 面试\n  - 自我介绍，聊项目，问了一下项目相关的一些论文\n  - 聊完项目后，问有无其它学校offer，回答若为有，面试结束，回答若为无，面试官质疑你，面试也结束。  \n\n\n<br>\n*写在最后*\n\n我的选择是清华伯克利，一方面是因为清华的学位确实很吸引，另一方面是我一直有一个留学的梦想，但是由于种种原因最后放弃，但是现在有一个去伯克利修读一年拿硕士学位的机会摆在我面前，我不想放弃，虽然清华伯克利学院在深圳，且办学年限补偿，不如北京本部历史积累丰富，但是我相信这个联合培养计划不会像中大和卡耐基那样突然中止，我也相信我能够成功毕业，拿到双学位，祝愿我吧。\n\n托福GRE我又要来了（我以为我不会再见你了）。\n\n\n\n<br>","source":"_posts/保研历程分享.md","raw":"---\ntitle: 保研历程分享\ndate: 2018-09-27 15:06:33\nmathjax: true\ntags:\n---\n\n从今年3月开始关注保研的信息，到9月份的尘埃落定，半年里奔跑于各一大城市，各种交流面试，这一路保研的历程充满着焦虑、紧张到最后的喜悦，现在回想起来，总有值得总结和分享的地方。这篇文章将我的保研历程分为三部分：前期准备、夏令营和九月推免。\n\n<!-- more -->\n\n夏令营中最后悔的是没有申请中科院，无论是计算所、软件所还是自动化所，都很值得去尝试；上交的报名系统是我见过最简单的，没有之一，像平常问卷那样，不用上传任何材料；北大本部是我一心向往却无法接近的存在（同清华）\n\n- 夏令营申请：清华叉院，清华伯克利，北大信科，北大信工，北大叉院，南大AI学院，复旦计科，上交计科\n- 夏令营入营：清华伯克利，北大信工（推掉），南大，复旦（与考试冲突）\n\n<br>\n### 前期准备\n\n3月份开始，各大论坛和学院官网就会公布夏令营的报名信息，一般的夏令营都会在7月上中旬举行，但是也有6月份的，如清华叉院，南大lambda实验室（为了提前抢人）。然后就是准备各种申请材料，包括简历、个人陈述、研究计划、推荐信以及各种获奖证书，一般情况，材料只需要中文即可，但是也存在某些院要求中英文（如清华的某院），所以最好就是两个版本都准备一下。\n\n材料准备的过程十分漫长和煎熬，跟出国的材料基本一致，只是国内夏令营的材料水分更大，不需要特别的精雕细刻。准备材料的时候，你会感受到自己的中文和英文都无比的差 >_<\n\n- 简历：英文简历最好用latex，中文简历自己找个像样的模板即可。\n- PS：保证一定的叙事性，同时加入一定的学术性，可以说是非常难了。\n- 研究计划：并不是简单的写自己未来想做什么，要写出文献综述的感觉，总结过去的工作，找出研究问题的关键之处，并且给出有一定可行性的解决方案作为未来的研究计划。\n- 推荐信：国内的推荐信基本都是学生写，然后老师签名，与申请国外学校不一样，国内推荐信只是形式；而信的内容就是各种自夸。\n\n另外：强烈推荐做一个自己本科阶段科研工作展示报告的ppt，用处很大，面试的时候也可以给老师看，这比老师看简历要来得更加容易。\n\n材料准备完，然后就去学校夏令营的报名系统报名，然后寄纸质材料。如果没有推荐信的话，我觉得夏令营的申请都比较容易，但是由于推荐信需要老师亲自签名，所以经常会出现拿着好几封推荐信要老师签名的情况，老师找得太多次又不好意思，然而推荐信的作用在所有申请材料里面基本为 0，这个形式上的推荐信，我是非常想吐槽的！！！\n\n---\n\n至此，夏令营申请基本完成了，然后你就可以每天进行焦急的等待。\n\n但如果你有明确的研究方向，或者你有明确的导师意向，你就可以提前进行套磁，套磁的过程基本就是发一封邮件给有意向的导师进行自荐，并且附上自己的简历等材料。套磁的结果需要理性分析，并不能太过先入为主，要分析老师的回复是套话还是真的对你有兴趣；我发了邮件给十几个老师，清华的老师基本就是不回，或者回复名额已满；北大的sx老师直接回复“欢迎报考xxx院，我那里还有名额，我会重点关注你”，给了我一种老师对我很有兴趣的假象，然而北大本部岂是我这种渣渣能进去的地方；复旦hxj老师直接回复“夏令营进了再跟我说”，拒绝套磁；南大dxy老师反问有无读博的想法......\n\n总之，套磁有一定成功率，但是也不要报太大的希望，虽然说老师有主导权，但是就凭简单的几封邮件交流，老师又怎么能一定保你能进呢？\n\n\n<br>\n### 夏令营\n\n本渣只去了两个夏令营，清华伯克利和南大，复旦由于期末考推掉，北大信工由于夏令营不发offer且没有感兴趣的老师也推掉了。\n\n#### 清华伯克利（TBSI）\n\n安排住宿且有交通费补贴，夏令营三天，第一天报道，第二天开营宣讲加实验室参观，第三天面试，无机试，TBSI招收的学生面比较广，对编程能力要求不高，基础知识和英语比较重要。面试如下\n\n- 全程英语\n- 面试前阅读英文文献，内容是关于语音识别的，面试时会提问\n- 简单的知识问答，如dropout是什么，距离度量有哪些等\n- 开放性问题：喜欢哪个实验室，GPA5分制解释一下，为什么那么多人参加美赛，最喜欢的编程语言\n- 气氛比较轻松，老师也比较nice，但是被安排在当天的最后一个面试。\n\n面试完十几分钟，就有老师联系我说想让我跟他做毕设，他就是我未来的老师，起初还是各种纠结，最后还是决定先答应着，然后参观了他们的实验室，和老师聊了一下，老师人很nice，听了他们的组会，老师的指导也蛮到位\n\n\n\n#### 南大计算机系\n\n南大国际四星级酒店，超级豪华，夏令营三天，第一天报道，第二天自由交流，第三天机试面试。南大会有一个意向接受导师签名的东西，相当于是一个第一志愿，一般你对某个老师感兴趣，就找他签名，老师不会拒绝。\n\n- 交流\n\n  - dxy老师\n    - 研究方向对口的老师，同NLP\n    - 简单介绍下项目，问了下实验结果\n    - 想读硕士还是博士\n  - hsj老师\n    - 跟dxy老师同一个组\n    - 叫我英文介绍项目，好在我TBSI那时准备过\n    - 项目有没有能改进的地方，全程瞎逼，天马行空\n  - lm老师\n    - lambda实验室的老师，lambda的名额大部分都已经提前招完了，还有少数留在夏令营\n    - 同样项目介绍\n    - 给8分钟阅读他的论文，概括论文整体思想\n    - IQ题\n\n- 机试\n\n  - 共3道题，按样例给分，共300分\n\n  - 1）找规律题：给定一个正整数 $n$，计算所有 $n$ 位长度的二进制串且没有连续 $1$ 的个数，如 $n=3$，有 000, 001, 010, 100, 101。找下规律，就可以推出递推公式。\n  - 2）搜索题：给定一个正整数 $n$，从 $1$ 到 $n$ 中选择 $n-1$ 个数，以随机的顺序拼接成字符串 $s$，给定这个字符串，找出缺失的那个数字\n  - 3）动归：题目忘了。。。\n\n- 面试\n\n  - 3个老师分别对应三个大方向问题，面试10分钟\n  - 第一个老师问项目\n  - 第二个老师问算法，分治法是什么，动归是什么，分治和动归的差别是什么，当场眩晕。。\n  - 第三个老师问操作系统，死锁和怎么预防死锁\n  - 最后补了一个英文问题：最喜欢的编程语言\n\n虽然南大面试感觉不好，但是机试发挥比较正常，最后也如愿拿到offer，然后又是各种纠结，对比南大和TBSI，最后还是选择了TBSI，拒绝了南大。\n\n\n<br>\n### 九月推免\n\n#### TBSI\n\nTBSI九月份的面试纯属走流程，水到爆炸，但我又是最后一个面试。。面试前同样看文献，这次是nature上面一篇关于AlphaGo Zero的文章，然后面试过程基本就是随便问下项目，然后就是open discussion，讨论阿法狗以及强化学习等，全程瞎逼逼，不懂强化学习的渣渣路过\n\n#### 中大\n\n- 机试不算分数，10道题\n- 面试注重基本知识，如高数线代，问了微分中值定理，线性方程组有解的必要条件，还有就是开放性问题，机器学习和深度学习不同点\n\n#### 复旦\n\n- 机试\n  - 给定一条直线和一个圆，求直线在圆上的长度。分情况讨论即可\n  - 给定一个数组，在某一位置的左边，求比该数大的且距离最近的位置\n  - 面试经典题：一个数组，求三个数字相加等于某一个数的组合数\n- 面试\n  - 自我介绍，聊项目，问了一下项目相关的一些论文\n  - 聊完项目后，问有无其它学校offer，回答若为有，面试结束，回答若为无，面试官质疑你，面试也结束。  \n\n\n<br>\n*写在最后*\n\n我的选择是清华伯克利，一方面是因为清华的学位确实很吸引，另一方面是我一直有一个留学的梦想，但是由于种种原因最后放弃，但是现在有一个去伯克利修读一年拿硕士学位的机会摆在我面前，我不想放弃，虽然清华伯克利学院在深圳，且办学年限补偿，不如北京本部历史积累丰富，但是我相信这个联合培养计划不会像中大和卡耐基那样突然中止，我也相信我能够成功毕业，拿到双学位，祝愿我吧。\n\n托福GRE我又要来了（我以为我不会再见你了）。\n\n\n\n<br>","slug":"保研历程分享","published":1,"updated":"2018-09-27T13:01:56.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gl3000eakw2h47nbvpn","content":"<p>从今年3月开始关注保研的信息，到9月份的尘埃落定，半年里奔跑于各一大城市，各种交流面试，这一路保研的历程充满着焦虑、紧张到最后的喜悦，现在回想起来，总有值得总结和分享的地方。这篇文章将我的保研历程分为三部分：前期准备、夏令营和九月推免。</p>\n<a id=\"more\"></a>\n<p>夏令营中最后悔的是没有申请中科院，无论是计算所、软件所还是自动化所，都很值得去尝试；上交的报名系统是我见过最简单的，没有之一，像平常问卷那样，不用上传任何材料；北大本部是我一心向往却无法接近的存在（同清华）</p>\n<ul>\n<li>夏令营申请：清华叉院，清华伯克利，北大信科，北大信工，北大叉院，南大AI学院，复旦计科，上交计科</li>\n<li>夏令营入营：清华伯克利，北大信工（推掉），南大，复旦（与考试冲突）</li>\n</ul>\n<p><br></p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>3月份开始，各大论坛和学院官网就会公布夏令营的报名信息，一般的夏令营都会在7月上中旬举行，但是也有6月份的，如清华叉院，南大lambda实验室（为了提前抢人）。然后就是准备各种申请材料，包括简历、个人陈述、研究计划、推荐信以及各种获奖证书，一般情况，材料只需要中文即可，但是也存在某些院要求中英文（如清华的某院），所以最好就是两个版本都准备一下。</p>\n<p>材料准备的过程十分漫长和煎熬，跟出国的材料基本一致，只是国内夏令营的材料水分更大，不需要特别的精雕细刻。准备材料的时候，你会感受到自己的中文和英文都无比的差 &gt;_&lt;</p>\n<ul>\n<li>简历：英文简历最好用latex，中文简历自己找个像样的模板即可。</li>\n<li>PS：保证一定的叙事性，同时加入一定的学术性，可以说是非常难了。</li>\n<li>研究计划：并不是简单的写自己未来想做什么，要写出文献综述的感觉，总结过去的工作，找出研究问题的关键之处，并且给出有一定可行性的解决方案作为未来的研究计划。</li>\n<li>推荐信：国内的推荐信基本都是学生写，然后老师签名，与申请国外学校不一样，国内推荐信只是形式；而信的内容就是各种自夸。</li>\n</ul>\n<p>另外：强烈推荐做一个自己本科阶段科研工作展示报告的ppt，用处很大，面试的时候也可以给老师看，这比老师看简历要来得更加容易。</p>\n<p>材料准备完，然后就去学校夏令营的报名系统报名，然后寄纸质材料。如果没有推荐信的话，我觉得夏令营的申请都比较容易，但是由于推荐信需要老师亲自签名，所以经常会出现拿着好几封推荐信要老师签名的情况，老师找得太多次又不好意思，然而推荐信的作用在所有申请材料里面基本为 0，这个形式上的推荐信，我是非常想吐槽的！！！</p>\n<hr>\n<p>至此，夏令营申请基本完成了，然后你就可以每天进行焦急的等待。</p>\n<p>但如果你有明确的研究方向，或者你有明确的导师意向，你就可以提前进行套磁，套磁的过程基本就是发一封邮件给有意向的导师进行自荐，并且附上自己的简历等材料。套磁的结果需要理性分析，并不能太过先入为主，要分析老师的回复是套话还是真的对你有兴趣；我发了邮件给十几个老师，清华的老师基本就是不回，或者回复名额已满；北大的sx老师直接回复“欢迎报考xxx院，我那里还有名额，我会重点关注你”，给了我一种老师对我很有兴趣的假象，然而北大本部岂是我这种渣渣能进去的地方；复旦hxj老师直接回复“夏令营进了再跟我说”，拒绝套磁；南大dxy老师反问有无读博的想法……</p>\n<p>总之，套磁有一定成功率，但是也不要报太大的希望，虽然说老师有主导权，但是就凭简单的几封邮件交流，老师又怎么能一定保你能进呢？</p>\n<p><br></p>\n<h3 id=\"夏令营\"><a href=\"#夏令营\" class=\"headerlink\" title=\"夏令营\"></a>夏令营</h3><p>本渣只去了两个夏令营，清华伯克利和南大，复旦由于期末考推掉，北大信工由于夏令营不发offer且没有感兴趣的老师也推掉了。</p>\n<h4 id=\"清华伯克利（TBSI）\"><a href=\"#清华伯克利（TBSI）\" class=\"headerlink\" title=\"清华伯克利（TBSI）\"></a>清华伯克利（TBSI）</h4><p>安排住宿且有交通费补贴，夏令营三天，第一天报道，第二天开营宣讲加实验室参观，第三天面试，无机试，TBSI招收的学生面比较广，对编程能力要求不高，基础知识和英语比较重要。面试如下</p>\n<ul>\n<li>全程英语</li>\n<li>面试前阅读英文文献，内容是关于语音识别的，面试时会提问</li>\n<li>简单的知识问答，如dropout是什么，距离度量有哪些等</li>\n<li>开放性问题：喜欢哪个实验室，GPA5分制解释一下，为什么那么多人参加美赛，最喜欢的编程语言</li>\n<li>气氛比较轻松，老师也比较nice，但是被安排在当天的最后一个面试。</li>\n</ul>\n<p>面试完十几分钟，就有老师联系我说想让我跟他做毕设，他就是我未来的老师，起初还是各种纠结，最后还是决定先答应着，然后参观了他们的实验室，和老师聊了一下，老师人很nice，听了他们的组会，老师的指导也蛮到位</p>\n<h4 id=\"南大计算机系\"><a href=\"#南大计算机系\" class=\"headerlink\" title=\"南大计算机系\"></a>南大计算机系</h4><p>南大国际四星级酒店，超级豪华，夏令营三天，第一天报道，第二天自由交流，第三天机试面试。南大会有一个意向接受导师签名的东西，相当于是一个第一志愿，一般你对某个老师感兴趣，就找他签名，老师不会拒绝。</p>\n<ul>\n<li><p>交流</p>\n<ul>\n<li>dxy老师<ul>\n<li>研究方向对口的老师，同NLP</li>\n<li>简单介绍下项目，问了下实验结果</li>\n<li>想读硕士还是博士</li>\n</ul>\n</li>\n<li>hsj老师<ul>\n<li>跟dxy老师同一个组</li>\n<li>叫我英文介绍项目，好在我TBSI那时准备过</li>\n<li>项目有没有能改进的地方，全程瞎逼，天马行空</li>\n</ul>\n</li>\n<li>lm老师<ul>\n<li>lambda实验室的老师，lambda的名额大部分都已经提前招完了，还有少数留在夏令营</li>\n<li>同样项目介绍</li>\n<li>给8分钟阅读他的论文，概括论文整体思想</li>\n<li>IQ题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>机试</p>\n<ul>\n<li><p>共3道题，按样例给分，共300分</p>\n</li>\n<li><p>1）找规律题：给定一个正整数 $n$，计算所有 $n$ 位长度的二进制串且没有连续 $1$ 的个数，如 $n=3$，有 000, 001, 010, 100, 101。找下规律，就可以推出递推公式。</p>\n</li>\n<li>2）搜索题：给定一个正整数 $n$，从 $1$ 到 $n$ 中选择 $n-1$ 个数，以随机的顺序拼接成字符串 $s$，给定这个字符串，找出缺失的那个数字</li>\n<li>3）动归：题目忘了。。。</li>\n</ul>\n</li>\n<li><p>面试</p>\n<ul>\n<li>3个老师分别对应三个大方向问题，面试10分钟</li>\n<li>第一个老师问项目</li>\n<li>第二个老师问算法，分治法是什么，动归是什么，分治和动归的差别是什么，当场眩晕。。</li>\n<li>第三个老师问操作系统，死锁和怎么预防死锁</li>\n<li>最后补了一个英文问题：最喜欢的编程语言</li>\n</ul>\n</li>\n</ul>\n<p>虽然南大面试感觉不好，但是机试发挥比较正常，最后也如愿拿到offer，然后又是各种纠结，对比南大和TBSI，最后还是选择了TBSI，拒绝了南大。</p>\n<p><br></p>\n<h3 id=\"九月推免\"><a href=\"#九月推免\" class=\"headerlink\" title=\"九月推免\"></a>九月推免</h3><h4 id=\"TBSI\"><a href=\"#TBSI\" class=\"headerlink\" title=\"TBSI\"></a>TBSI</h4><p>TBSI九月份的面试纯属走流程，水到爆炸，但我又是最后一个面试。。面试前同样看文献，这次是nature上面一篇关于AlphaGo Zero的文章，然后面试过程基本就是随便问下项目，然后就是open discussion，讨论阿法狗以及强化学习等，全程瞎逼逼，不懂强化学习的渣渣路过</p>\n<h4 id=\"中大\"><a href=\"#中大\" class=\"headerlink\" title=\"中大\"></a>中大</h4><ul>\n<li>机试不算分数，10道题</li>\n<li>面试注重基本知识，如高数线代，问了微分中值定理，线性方程组有解的必要条件，还有就是开放性问题，机器学习和深度学习不同点</li>\n</ul>\n<h4 id=\"复旦\"><a href=\"#复旦\" class=\"headerlink\" title=\"复旦\"></a>复旦</h4><ul>\n<li>机试<ul>\n<li>给定一条直线和一个圆，求直线在圆上的长度。分情况讨论即可</li>\n<li>给定一个数组，在某一位置的左边，求比该数大的且距离最近的位置</li>\n<li>面试经典题：一个数组，求三个数字相加等于某一个数的组合数</li>\n</ul>\n</li>\n<li>面试<ul>\n<li>自我介绍，聊项目，问了一下项目相关的一些论文</li>\n<li>聊完项目后，问有无其它学校offer，回答若为有，面试结束，回答若为无，面试官质疑你，面试也结束。  </li>\n</ul>\n</li>\n</ul>\n<p><br><br><em>写在最后</em></p>\n<p>我的选择是清华伯克利，一方面是因为清华的学位确实很吸引，另一方面是我一直有一个留学的梦想，但是由于种种原因最后放弃，但是现在有一个去伯克利修读一年拿硕士学位的机会摆在我面前，我不想放弃，虽然清华伯克利学院在深圳，且办学年限补偿，不如北京本部历史积累丰富，但是我相信这个联合培养计划不会像中大和卡耐基那样突然中止，我也相信我能够成功毕业，拿到双学位，祝愿我吧。</p>\n<p>托福GRE我又要来了（我以为我不会再见你了）。</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>从今年3月开始关注保研的信息，到9月份的尘埃落定，半年里奔跑于各一大城市，各种交流面试，这一路保研的历程充满着焦虑、紧张到最后的喜悦，现在回想起来，总有值得总结和分享的地方。这篇文章将我的保研历程分为三部分：前期准备、夏令营和九月推免。</p>","more":"<p>夏令营中最后悔的是没有申请中科院，无论是计算所、软件所还是自动化所，都很值得去尝试；上交的报名系统是我见过最简单的，没有之一，像平常问卷那样，不用上传任何材料；北大本部是我一心向往却无法接近的存在（同清华）</p>\n<ul>\n<li>夏令营申请：清华叉院，清华伯克利，北大信科，北大信工，北大叉院，南大AI学院，复旦计科，上交计科</li>\n<li>夏令营入营：清华伯克利，北大信工（推掉），南大，复旦（与考试冲突）</li>\n</ul>\n<p><br></p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>3月份开始，各大论坛和学院官网就会公布夏令营的报名信息，一般的夏令营都会在7月上中旬举行，但是也有6月份的，如清华叉院，南大lambda实验室（为了提前抢人）。然后就是准备各种申请材料，包括简历、个人陈述、研究计划、推荐信以及各种获奖证书，一般情况，材料只需要中文即可，但是也存在某些院要求中英文（如清华的某院），所以最好就是两个版本都准备一下。</p>\n<p>材料准备的过程十分漫长和煎熬，跟出国的材料基本一致，只是国内夏令营的材料水分更大，不需要特别的精雕细刻。准备材料的时候，你会感受到自己的中文和英文都无比的差 &gt;_&lt;</p>\n<ul>\n<li>简历：英文简历最好用latex，中文简历自己找个像样的模板即可。</li>\n<li>PS：保证一定的叙事性，同时加入一定的学术性，可以说是非常难了。</li>\n<li>研究计划：并不是简单的写自己未来想做什么，要写出文献综述的感觉，总结过去的工作，找出研究问题的关键之处，并且给出有一定可行性的解决方案作为未来的研究计划。</li>\n<li>推荐信：国内的推荐信基本都是学生写，然后老师签名，与申请国外学校不一样，国内推荐信只是形式；而信的内容就是各种自夸。</li>\n</ul>\n<p>另外：强烈推荐做一个自己本科阶段科研工作展示报告的ppt，用处很大，面试的时候也可以给老师看，这比老师看简历要来得更加容易。</p>\n<p>材料准备完，然后就去学校夏令营的报名系统报名，然后寄纸质材料。如果没有推荐信的话，我觉得夏令营的申请都比较容易，但是由于推荐信需要老师亲自签名，所以经常会出现拿着好几封推荐信要老师签名的情况，老师找得太多次又不好意思，然而推荐信的作用在所有申请材料里面基本为 0，这个形式上的推荐信，我是非常想吐槽的！！！</p>\n<hr>\n<p>至此，夏令营申请基本完成了，然后你就可以每天进行焦急的等待。</p>\n<p>但如果你有明确的研究方向，或者你有明确的导师意向，你就可以提前进行套磁，套磁的过程基本就是发一封邮件给有意向的导师进行自荐，并且附上自己的简历等材料。套磁的结果需要理性分析，并不能太过先入为主，要分析老师的回复是套话还是真的对你有兴趣；我发了邮件给十几个老师，清华的老师基本就是不回，或者回复名额已满；北大的sx老师直接回复“欢迎报考xxx院，我那里还有名额，我会重点关注你”，给了我一种老师对我很有兴趣的假象，然而北大本部岂是我这种渣渣能进去的地方；复旦hxj老师直接回复“夏令营进了再跟我说”，拒绝套磁；南大dxy老师反问有无读博的想法……</p>\n<p>总之，套磁有一定成功率，但是也不要报太大的希望，虽然说老师有主导权，但是就凭简单的几封邮件交流，老师又怎么能一定保你能进呢？</p>\n<p><br></p>\n<h3 id=\"夏令营\"><a href=\"#夏令营\" class=\"headerlink\" title=\"夏令营\"></a>夏令营</h3><p>本渣只去了两个夏令营，清华伯克利和南大，复旦由于期末考推掉，北大信工由于夏令营不发offer且没有感兴趣的老师也推掉了。</p>\n<h4 id=\"清华伯克利（TBSI）\"><a href=\"#清华伯克利（TBSI）\" class=\"headerlink\" title=\"清华伯克利（TBSI）\"></a>清华伯克利（TBSI）</h4><p>安排住宿且有交通费补贴，夏令营三天，第一天报道，第二天开营宣讲加实验室参观，第三天面试，无机试，TBSI招收的学生面比较广，对编程能力要求不高，基础知识和英语比较重要。面试如下</p>\n<ul>\n<li>全程英语</li>\n<li>面试前阅读英文文献，内容是关于语音识别的，面试时会提问</li>\n<li>简单的知识问答，如dropout是什么，距离度量有哪些等</li>\n<li>开放性问题：喜欢哪个实验室，GPA5分制解释一下，为什么那么多人参加美赛，最喜欢的编程语言</li>\n<li>气氛比较轻松，老师也比较nice，但是被安排在当天的最后一个面试。</li>\n</ul>\n<p>面试完十几分钟，就有老师联系我说想让我跟他做毕设，他就是我未来的老师，起初还是各种纠结，最后还是决定先答应着，然后参观了他们的实验室，和老师聊了一下，老师人很nice，听了他们的组会，老师的指导也蛮到位</p>\n<h4 id=\"南大计算机系\"><a href=\"#南大计算机系\" class=\"headerlink\" title=\"南大计算机系\"></a>南大计算机系</h4><p>南大国际四星级酒店，超级豪华，夏令营三天，第一天报道，第二天自由交流，第三天机试面试。南大会有一个意向接受导师签名的东西，相当于是一个第一志愿，一般你对某个老师感兴趣，就找他签名，老师不会拒绝。</p>\n<ul>\n<li><p>交流</p>\n<ul>\n<li>dxy老师<ul>\n<li>研究方向对口的老师，同NLP</li>\n<li>简单介绍下项目，问了下实验结果</li>\n<li>想读硕士还是博士</li>\n</ul>\n</li>\n<li>hsj老师<ul>\n<li>跟dxy老师同一个组</li>\n<li>叫我英文介绍项目，好在我TBSI那时准备过</li>\n<li>项目有没有能改进的地方，全程瞎逼，天马行空</li>\n</ul>\n</li>\n<li>lm老师<ul>\n<li>lambda实验室的老师，lambda的名额大部分都已经提前招完了，还有少数留在夏令营</li>\n<li>同样项目介绍</li>\n<li>给8分钟阅读他的论文，概括论文整体思想</li>\n<li>IQ题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>机试</p>\n<ul>\n<li><p>共3道题，按样例给分，共300分</p>\n</li>\n<li><p>1）找规律题：给定一个正整数 $n$，计算所有 $n$ 位长度的二进制串且没有连续 $1$ 的个数，如 $n=3$，有 000, 001, 010, 100, 101。找下规律，就可以推出递推公式。</p>\n</li>\n<li>2）搜索题：给定一个正整数 $n$，从 $1$ 到 $n$ 中选择 $n-1$ 个数，以随机的顺序拼接成字符串 $s$，给定这个字符串，找出缺失的那个数字</li>\n<li>3）动归：题目忘了。。。</li>\n</ul>\n</li>\n<li><p>面试</p>\n<ul>\n<li>3个老师分别对应三个大方向问题，面试10分钟</li>\n<li>第一个老师问项目</li>\n<li>第二个老师问算法，分治法是什么，动归是什么，分治和动归的差别是什么，当场眩晕。。</li>\n<li>第三个老师问操作系统，死锁和怎么预防死锁</li>\n<li>最后补了一个英文问题：最喜欢的编程语言</li>\n</ul>\n</li>\n</ul>\n<p>虽然南大面试感觉不好，但是机试发挥比较正常，最后也如愿拿到offer，然后又是各种纠结，对比南大和TBSI，最后还是选择了TBSI，拒绝了南大。</p>\n<p><br></p>\n<h3 id=\"九月推免\"><a href=\"#九月推免\" class=\"headerlink\" title=\"九月推免\"></a>九月推免</h3><h4 id=\"TBSI\"><a href=\"#TBSI\" class=\"headerlink\" title=\"TBSI\"></a>TBSI</h4><p>TBSI九月份的面试纯属走流程，水到爆炸，但我又是最后一个面试。。面试前同样看文献，这次是nature上面一篇关于AlphaGo Zero的文章，然后面试过程基本就是随便问下项目，然后就是open discussion，讨论阿法狗以及强化学习等，全程瞎逼逼，不懂强化学习的渣渣路过</p>\n<h4 id=\"中大\"><a href=\"#中大\" class=\"headerlink\" title=\"中大\"></a>中大</h4><ul>\n<li>机试不算分数，10道题</li>\n<li>面试注重基本知识，如高数线代，问了微分中值定理，线性方程组有解的必要条件，还有就是开放性问题，机器学习和深度学习不同点</li>\n</ul>\n<h4 id=\"复旦\"><a href=\"#复旦\" class=\"headerlink\" title=\"复旦\"></a>复旦</h4><ul>\n<li>机试<ul>\n<li>给定一条直线和一个圆，求直线在圆上的长度。分情况讨论即可</li>\n<li>给定一个数组，在某一位置的左边，求比该数大的且距离最近的位置</li>\n<li>面试经典题：一个数组，求三个数字相加等于某一个数的组合数</li>\n</ul>\n</li>\n<li>面试<ul>\n<li>自我介绍，聊项目，问了一下项目相关的一些论文</li>\n<li>聊完项目后，问有无其它学校offer，回答若为有，面试结束，回答若为无，面试官质疑你，面试也结束。  </li>\n</ul>\n</li>\n</ul>\n<p><br><br><em>写在最后</em></p>\n<p>我的选择是清华伯克利，一方面是因为清华的学位确实很吸引，另一方面是我一直有一个留学的梦想，但是由于种种原因最后放弃，但是现在有一个去伯克利修读一年拿硕士学位的机会摆在我面前，我不想放弃，虽然清华伯克利学院在深圳，且办学年限补偿，不如北京本部历史积累丰富，但是我相信这个联合培养计划不会像中大和卡耐基那样突然中止，我也相信我能够成功毕业，拿到双学位，祝愿我吧。</p>\n<p>托福GRE我又要来了（我以为我不会再见你了）。</p>\n<p><br></p>"},{"title":"用hexo搭建个人网站","date":"2018-08-14T12:39:17.000Z","_content":"{% asset_img header.jpg 800 400 %}\n该文章简述如何使用hexo搭建个人博客\n\n<!-- more -->\n# 1. hexo介绍\nhexo是基于Git和Node.js的静态网站搭建框架，通过hexo命令可以自动生成静态网站的html和css，然后可以将其部署于服务器，生成个人网站。\n{% asset_img hexo_homepage.png 800 400 %}\n<br>\n\n# 2. hexo本地安装与运行\n1. 安装Git和Node.js:   由于hexo是基于Git和Node.js的，所以在安装hexo之前，需要先安装[Git](https://git-scm.com/)和[Node.js](https://nodejs.org/en/).\n\n2. 安装hexo：输入下面这条语句，就会自动地安装hexo。\n   ```javascript\n   $ npm install hexo-cli -g\n   ```\n\n3. 初始化blog： 输入下面这些语句，hexo会自动从网上拷贝所需要的dependency和package，生成一个project，存储在`Vincent-Hoo.github.io`这个文件夹里面，`Vincent-Hoo.github.io`是博客的名字，可以取其它的名字，但是由于我之后要部署到Github上，所以就取这个名字。\n    ```\n    $ hexo init Vincent-Hoo.github.io\n    $ cd Vincent-Hoo.github.io\n    $ npm install\n    ```\n\n4. 在本地运行blog：输入以下的命令，hexo会自动生成一个静态网站在http://localhost:4000。\n    ```\n    $ hexo server\n    ```\n    当目前为止，hexo已经为我们搭建好了一个个人的博客，里面有最基本的功能，如博客发表，搜索，导航，分享等。`Hello World`是hexo初始化时候自动生成的第一篇博客。\n    {% asset_img hexo网站初始化的样子.png %}\n    <br>\n\n# 3. hexo框架的基本结构\n在你的hexo project初始化完之后，project文件夹的目录结构如下。\n\n{% codeblock %}\n|----- node_modules\n|----- scaffolds\n|----- source\n|      |----- _posts\n|      |----- _drafts\n|----- themes\n|----- _config.yml\n|----- db.json\n|----- package.json\n{% endcodeblock %}\n\n\n\n## 3.1 scaffolds\n\n首先，hexo支持三种layout\n\n- post：对应source文件夹的`_posts`，我们所有的文章都放在这个文件夹里面。\n- draft：顾名思义，草稿，对应`source`文件夹的`_drafts`，draft一般而言都不会显示在博客上，如果要让draft显示，可以修改`_config.yml`文件的`render_draft`，将其设置为true（默认为false）。\n- page：一个博客不单止有文章，还会有网页，如个人介绍，个人简历。page也是保存在`source`文件夹里面。\n\n而scaffolds里面有三个文件，`post.md`, `draft.md`, `page.md`。当我们新建一个layout的时候，hexo就会根据我们新建的layout类型，选择相应的markdown文件进行初始化，所以这三个文件相当于是模板，下面以`post.md`作为例子，顺便讲一下什么是front-matter。\n\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n```\n\n模板最前面的key-value pair就是front-matter，下面列举了一些常见的front-matter\n\n| front-matter |        description        |       default        |\n| :----------: | :-----------------------: | :------------------: |\n|    layout    | post, draft, page三者之一 |                      |\n|     tags     |           标签            |                      |\n|  categories  |           类别            |                      |\n|    title     |         文章标题          | 默认是创建时候的标题 |\n|     date     |         创建时间          | 默认是创建时候的时间 |\n\ntag和categories可以很好地将博客的文章进行分类，设置的方式如下，注意categories具有层级关系，如Cat3和Cat3.1\n```\ntitle: Hello World\ntags:\n- Tag1\n- Tag2\ncategories:\n- Cat1\n- Cat2\n- [Cat3, Cat3.1]\n```\n\n## 3.2 source\nsource文件夹是整个博客里面最重要的文件夹，一个博客几乎所有的内容都存储在里面，之前提过，有两个子文件夹`_posts`和`_drafts`，当然还会有一些page和用户自定义的数据。\n`_posts`文件夹存储所有博客中显示的文章，`_drafts`文件夹存储所有的草稿，如果要将草稿转成文章，可以使用下面的命令\n``` bash\n$ hexo publish <draft_name>\n```\n创建文章或者草稿非常简单，只需要一条命令\n``` bash\n$ hexo new <layout, default: post> <article_name>\neg:\n$ hexo new draft Hello-World\n$ hexo new (post) Hello-World\n$ hexo new page About-me\n```\n\n## 3.3 themes\nhexo博客在初始化的时候默认是用landscape主题，当然我们可以自己去下载另外的一些主题(https://hexo.io/themes/ )。切换主题只需要将`_config.yml`文件里面的`theme`改成对应的主题名字即可。\n当然，我们也可以DIY自己的主题，主题无非就是一些模板的CSS和HTML文件，还有一些脚本文件，定义了不同的地方需要如何去解析。而每一个的主题都会有自己的`_config.yml`，注意和全局的`_config.yml`区分，前者是定义主题里面的configuration，后者是定义整个博客。\n\n## 3.4 config.yml\nconfig文件定义整个博客的设置，如网站的title，author，还有目录设置，文章写作的设置，这里特别说一个设置`post_asset_folder`，asset_folder是指一篇文章的数据，如图片，如果设置为true，在创建一篇post的时候，不仅仅创建一个文章的markdown，还创建一个对应的文件夹。还有一个设置是`render_draft`，默认是设置为false的，因为草稿不会显示在网页上，但如果设置为true，那么草稿也会显示出来。\n<br>\n\n# 4. Tag Plugin\nhexo博客的文章都是以markdown的形式来保存，markdown的强大使得文章写作变得简单，但hexo的tag plugin使得写文章变得更加的简单，它通过一些特殊的语句来添加特定的内容到文章，如图像、视频等。\n1. 引用别人的话block quote\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n2. 代码块code block\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n3. 图片，图片的添加有两种方式，一种是以source文件夹为root的相对路径，一种是通过asset_folder。\n```\n{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\neg: {% img /images/xxx.jpg %}\n\n{% asset_img slug [title] %}\neg: {% asset_img xxx.jpg %}\n```\n4. 视频，可以添加YouTube或者Vimeo的视频。\n```\n{% youtube video_id %}\n{% vimeo video_id %}\n```\n5. 引用asset_folder的资料，可以给出一个link，或者path。\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n<br>\n# 5. hexo常见命令\n1. 本地调式，如果想让草稿显示出来，可以加draft；如果想浏览器自动打开网页，可以加open。\n```\nhexo server (--draft) (--open)\n```\n2. 生成静态网站文件，hexo是一个静态的博客系统，会根据文章、主题等生成静态网页的html(不同于动态网站，通过前后端进行数据交互)，执行这条命令，会生成一个public文件夹，这个文件夹就是整个静态网站的文件夹，可以将其部署到服务器上面。\n```\nhexo generate(g)\n```\n3. 部署到远端服务器，详看下一节。\n```\nhexo deploy(d)\n```\n<br>\n# 6. 部署到Github Pages\nGithub Pages可以被认为是用户编写的、托管在github上的静态网页。[GitHub Pages](https://pages.github.com/)本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。最重要的是，Github Pages能为用户免费提供服务器，因此部署静态网站就不需要自己搭建服务器和数据库了。\n{% asset_img github_pages_homepage.png 800 400%}\n\n1. 创建一个项目的仓库，仓库名为username.github.io，每个账号只能有一个仓库来存放个人主页，可以通过http://username.github.io 来访问你的个人主页。\n2. 配置`_config.yml`文件\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:Vincent-Hoo/Vincent-Hoo.github.io.git\n  branch: master\n```\n3. 安装部署到git的包\n```\nnpm install hexo-deployer-git --save\n```\n4. 部署到GitHub上，hexo d命令会直接将public文件夹部署到github上对应的仓库，然后github pages会自动根据仓库的改变，部署网页。\n```\nhexo g\nhexo d\n```\n\n<br>\n# 7. nexT主题配置和优化\n每一个主题都有自己的说明文档，具体看config文件就可以将基本的博客元素配齐，需要优化的可以参考附录的链接。\n\n# 8. 安装MathJax\n在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。\n可以参考该链接：https://blog.csdn.net/u014630987/article/details/78670258\n\n<br>\n# 9. 参考资料\n1. [hexo主页](https://hexo.io)\n2. 一些博客\n    2.1 https://blog.csdn.net/gdutxiaoxu/article/details/53576018\n    2.2 https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/\n    2.3 https://www.cnblogs.com/dushao/p/5999593.html\n3. [hexo主题选择](https://www.zhihu.com/question/24422335)\n4. [统计字数，阅读量等](http://ibruce.info/2015/04/04/busuanzi/)\n5. [评论系统](https://livere.com/)\n6. 视频教学系列\n    6.1 https://www.youtube.com/watch?v=Ud1xAhu7t2Y&list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&index=1\n    6.2 https://www.youtube.com/watch?v=Kt7u5kr_P5o&list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm\n7. nexT主题优化\n    7.1 [基本配置](https://youngerli.github.io/2017/12/02/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/)\n    7.2 [优化](https://www.jianshu.com/p/3a05351a37dc)\n\n<br>","source":"_posts/用hexo搭建个人网站.md","raw":"---\ntitle: 用hexo搭建个人网站\ndate: 2018-08-14 20:39:17\ntags:\n- hexo\n---\n{% asset_img header.jpg 800 400 %}\n该文章简述如何使用hexo搭建个人博客\n\n<!-- more -->\n# 1. hexo介绍\nhexo是基于Git和Node.js的静态网站搭建框架，通过hexo命令可以自动生成静态网站的html和css，然后可以将其部署于服务器，生成个人网站。\n{% asset_img hexo_homepage.png 800 400 %}\n<br>\n\n# 2. hexo本地安装与运行\n1. 安装Git和Node.js:   由于hexo是基于Git和Node.js的，所以在安装hexo之前，需要先安装[Git](https://git-scm.com/)和[Node.js](https://nodejs.org/en/).\n\n2. 安装hexo：输入下面这条语句，就会自动地安装hexo。\n   ```javascript\n   $ npm install hexo-cli -g\n   ```\n\n3. 初始化blog： 输入下面这些语句，hexo会自动从网上拷贝所需要的dependency和package，生成一个project，存储在`Vincent-Hoo.github.io`这个文件夹里面，`Vincent-Hoo.github.io`是博客的名字，可以取其它的名字，但是由于我之后要部署到Github上，所以就取这个名字。\n    ```\n    $ hexo init Vincent-Hoo.github.io\n    $ cd Vincent-Hoo.github.io\n    $ npm install\n    ```\n\n4. 在本地运行blog：输入以下的命令，hexo会自动生成一个静态网站在http://localhost:4000。\n    ```\n    $ hexo server\n    ```\n    当目前为止，hexo已经为我们搭建好了一个个人的博客，里面有最基本的功能，如博客发表，搜索，导航，分享等。`Hello World`是hexo初始化时候自动生成的第一篇博客。\n    {% asset_img hexo网站初始化的样子.png %}\n    <br>\n\n# 3. hexo框架的基本结构\n在你的hexo project初始化完之后，project文件夹的目录结构如下。\n\n{% codeblock %}\n|----- node_modules\n|----- scaffolds\n|----- source\n|      |----- _posts\n|      |----- _drafts\n|----- themes\n|----- _config.yml\n|----- db.json\n|----- package.json\n{% endcodeblock %}\n\n\n\n## 3.1 scaffolds\n\n首先，hexo支持三种layout\n\n- post：对应source文件夹的`_posts`，我们所有的文章都放在这个文件夹里面。\n- draft：顾名思义，草稿，对应`source`文件夹的`_drafts`，draft一般而言都不会显示在博客上，如果要让draft显示，可以修改`_config.yml`文件的`render_draft`，将其设置为true（默认为false）。\n- page：一个博客不单止有文章，还会有网页，如个人介绍，个人简历。page也是保存在`source`文件夹里面。\n\n而scaffolds里面有三个文件，`post.md`, `draft.md`, `page.md`。当我们新建一个layout的时候，hexo就会根据我们新建的layout类型，选择相应的markdown文件进行初始化，所以这三个文件相当于是模板，下面以`post.md`作为例子，顺便讲一下什么是front-matter。\n\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\n---\n```\n\n模板最前面的key-value pair就是front-matter，下面列举了一些常见的front-matter\n\n| front-matter |        description        |       default        |\n| :----------: | :-----------------------: | :------------------: |\n|    layout    | post, draft, page三者之一 |                      |\n|     tags     |           标签            |                      |\n|  categories  |           类别            |                      |\n|    title     |         文章标题          | 默认是创建时候的标题 |\n|     date     |         创建时间          | 默认是创建时候的时间 |\n\ntag和categories可以很好地将博客的文章进行分类，设置的方式如下，注意categories具有层级关系，如Cat3和Cat3.1\n```\ntitle: Hello World\ntags:\n- Tag1\n- Tag2\ncategories:\n- Cat1\n- Cat2\n- [Cat3, Cat3.1]\n```\n\n## 3.2 source\nsource文件夹是整个博客里面最重要的文件夹，一个博客几乎所有的内容都存储在里面，之前提过，有两个子文件夹`_posts`和`_drafts`，当然还会有一些page和用户自定义的数据。\n`_posts`文件夹存储所有博客中显示的文章，`_drafts`文件夹存储所有的草稿，如果要将草稿转成文章，可以使用下面的命令\n``` bash\n$ hexo publish <draft_name>\n```\n创建文章或者草稿非常简单，只需要一条命令\n``` bash\n$ hexo new <layout, default: post> <article_name>\neg:\n$ hexo new draft Hello-World\n$ hexo new (post) Hello-World\n$ hexo new page About-me\n```\n\n## 3.3 themes\nhexo博客在初始化的时候默认是用landscape主题，当然我们可以自己去下载另外的一些主题(https://hexo.io/themes/ )。切换主题只需要将`_config.yml`文件里面的`theme`改成对应的主题名字即可。\n当然，我们也可以DIY自己的主题，主题无非就是一些模板的CSS和HTML文件，还有一些脚本文件，定义了不同的地方需要如何去解析。而每一个的主题都会有自己的`_config.yml`，注意和全局的`_config.yml`区分，前者是定义主题里面的configuration，后者是定义整个博客。\n\n## 3.4 config.yml\nconfig文件定义整个博客的设置，如网站的title，author，还有目录设置，文章写作的设置，这里特别说一个设置`post_asset_folder`，asset_folder是指一篇文章的数据，如图片，如果设置为true，在创建一篇post的时候，不仅仅创建一个文章的markdown，还创建一个对应的文件夹。还有一个设置是`render_draft`，默认是设置为false的，因为草稿不会显示在网页上，但如果设置为true，那么草稿也会显示出来。\n<br>\n\n# 4. Tag Plugin\nhexo博客的文章都是以markdown的形式来保存，markdown的强大使得文章写作变得简单，但hexo的tag plugin使得写文章变得更加的简单，它通过一些特殊的语句来添加特定的内容到文章，如图像、视频等。\n1. 引用别人的话block quote\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n2. 代码块code block\n```\n{% codeblock [title] [lang:language] [url] [link text] %}\ncode snippet\n{% endcodeblock %}\n```\n3. 图片，图片的添加有两种方式，一种是以source文件夹为root的相对路径，一种是通过asset_folder。\n```\n{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\neg: {% img /images/xxx.jpg %}\n\n{% asset_img slug [title] %}\neg: {% asset_img xxx.jpg %}\n```\n4. 视频，可以添加YouTube或者Vimeo的视频。\n```\n{% youtube video_id %}\n{% vimeo video_id %}\n```\n5. 引用asset_folder的资料，可以给出一个link，或者path。\n```\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n<br>\n# 5. hexo常见命令\n1. 本地调式，如果想让草稿显示出来，可以加draft；如果想浏览器自动打开网页，可以加open。\n```\nhexo server (--draft) (--open)\n```\n2. 生成静态网站文件，hexo是一个静态的博客系统，会根据文章、主题等生成静态网页的html(不同于动态网站，通过前后端进行数据交互)，执行这条命令，会生成一个public文件夹，这个文件夹就是整个静态网站的文件夹，可以将其部署到服务器上面。\n```\nhexo generate(g)\n```\n3. 部署到远端服务器，详看下一节。\n```\nhexo deploy(d)\n```\n<br>\n# 6. 部署到Github Pages\nGithub Pages可以被认为是用户编写的、托管在github上的静态网页。[GitHub Pages](https://pages.github.com/)本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。最重要的是，Github Pages能为用户免费提供服务器，因此部署静态网站就不需要自己搭建服务器和数据库了。\n{% asset_img github_pages_homepage.png 800 400%}\n\n1. 创建一个项目的仓库，仓库名为username.github.io，每个账号只能有一个仓库来存放个人主页，可以通过http://username.github.io 来访问你的个人主页。\n2. 配置`_config.yml`文件\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:Vincent-Hoo/Vincent-Hoo.github.io.git\n  branch: master\n```\n3. 安装部署到git的包\n```\nnpm install hexo-deployer-git --save\n```\n4. 部署到GitHub上，hexo d命令会直接将public文件夹部署到github上对应的仓库，然后github pages会自动根据仓库的改变，部署网页。\n```\nhexo g\nhexo d\n```\n\n<br>\n# 7. nexT主题配置和优化\n每一个主题都有自己的说明文档，具体看config文件就可以将基本的博客元素配齐，需要优化的可以参考附录的链接。\n\n# 8. 安装MathJax\n在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。\n可以参考该链接：https://blog.csdn.net/u014630987/article/details/78670258\n\n<br>\n# 9. 参考资料\n1. [hexo主页](https://hexo.io)\n2. 一些博客\n    2.1 https://blog.csdn.net/gdutxiaoxu/article/details/53576018\n    2.2 https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/\n    2.3 https://www.cnblogs.com/dushao/p/5999593.html\n3. [hexo主题选择](https://www.zhihu.com/question/24422335)\n4. [统计字数，阅读量等](http://ibruce.info/2015/04/04/busuanzi/)\n5. [评论系统](https://livere.com/)\n6. 视频教学系列\n    6.1 https://www.youtube.com/watch?v=Ud1xAhu7t2Y&list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&index=1\n    6.2 https://www.youtube.com/watch?v=Kt7u5kr_P5o&list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm\n7. nexT主题优化\n    7.1 [基本配置](https://youngerli.github.io/2017/12/02/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/)\n    7.2 [优化](https://www.jianshu.com/p/3a05351a37dc)\n\n<br>","slug":"用hexo搭建个人网站","published":1,"updated":"2018-09-05T05:09:58.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn2m7gl5000fakw284akskar","content":"<img src=\"/2018/08/14/用hexo搭建个人网站/header.jpg\" width=\"800\" height=\"400\">\n<p>该文章简述如何使用hexo搭建个人博客</p>\n<a id=\"more\"></a>\n<h1 id=\"1-hexo介绍\"><a href=\"#1-hexo介绍\" class=\"headerlink\" title=\"1. hexo介绍\"></a>1. hexo介绍</h1><p>hexo是基于Git和Node.js的静态网站搭建框架，通过hexo命令可以自动生成静态网站的html和css，然后可以将其部署于服务器，生成个人网站。<br><img src=\"/2018/08/14/用hexo搭建个人网站/hexo_homepage.png\" width=\"800\" height=\"400\"><br><br></p>\n<h1 id=\"2-hexo本地安装与运行\"><a href=\"#2-hexo本地安装与运行\" class=\"headerlink\" title=\"2. hexo本地安装与运行\"></a>2. hexo本地安装与运行</h1><ol>\n<li><p>安装Git和Node.js:   由于hexo是基于Git和Node.js的，所以在安装hexo之前，需要先安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>和<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>.</p>\n</li>\n<li><p>安装hexo：输入下面这条语句，就会自动地安装hexo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化blog： 输入下面这些语句，hexo会自动从网上拷贝所需要的dependency和package，生成一个project，存储在<code>Vincent-Hoo.github.io</code>这个文件夹里面，<code>Vincent-Hoo.github.io</code>是博客的名字，可以取其它的名字，但是由于我之后要部署到Github上，所以就取这个名字。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init Vincent-Hoo.github.io</span><br><span class=\"line\">$ cd Vincent-Hoo.github.io</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地运行blog：输入以下的命令，hexo会自动生成一个静态网站在<a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000。</a></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p> 当目前为止，hexo已经为我们搭建好了一个个人的博客，里面有最基本的功能，如博客发表，搜索，导航，分享等。<code>Hello World</code>是hexo初始化时候自动生成的第一篇博客。</p>\n <img src=\"/2018/08/14/用hexo搭建个人网站/hexo网站初始化的样子.png\">\n<p> <br></p>\n</li>\n</ol>\n<h1 id=\"3-hexo框架的基本结构\"><a href=\"#3-hexo框架的基本结构\" class=\"headerlink\" title=\"3. hexo框架的基本结构\"></a>3. hexo框架的基本结构</h1><p>在你的hexo project初始化完之后，project文件夹的目录结构如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|----- node_modules</span><br><span class=\"line\">|----- scaffolds</span><br><span class=\"line\">|----- source</span><br><span class=\"line\">|      |----- _posts</span><br><span class=\"line\">|      |----- _drafts</span><br><span class=\"line\">|----- themes</span><br><span class=\"line\">|----- _config.yml</span><br><span class=\"line\">|----- db.json</span><br><span class=\"line\">|----- package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-1-scaffolds\"><a href=\"#3-1-scaffolds\" class=\"headerlink\" title=\"3.1 scaffolds\"></a>3.1 scaffolds</h2><p>首先，hexo支持三种layout</p>\n<ul>\n<li>post：对应source文件夹的<code>_posts</code>，我们所有的文章都放在这个文件夹里面。</li>\n<li>draft：顾名思义，草稿，对应<code>source</code>文件夹的<code>_drafts</code>，draft一般而言都不会显示在博客上，如果要让draft显示，可以修改<code>_config.yml</code>文件的<code>render_draft</code>，将其设置为true（默认为false）。</li>\n<li>page：一个博客不单止有文章，还会有网页，如个人介绍，个人简历。page也是保存在<code>source</code>文件夹里面。</li>\n</ul>\n<p>而scaffolds里面有三个文件，<code>post.md</code>, <code>draft.md</code>, <code>page.md</code>。当我们新建一个layout的时候，hexo就会根据我们新建的layout类型，选择相应的markdown文件进行初始化，所以这三个文件相当于是模板，下面以<code>post.md</code>作为例子，顺便讲一下什么是front-matter。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>模板最前面的key-value pair就是front-matter，下面列举了一些常见的front-matter</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">front-matter</th>\n<th style=\"text-align:center\">description</th>\n<th style=\"text-align:center\">default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">post, draft, page三者之一</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">categories</td>\n<td style=\"text-align:center\">类别</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">文章标题</td>\n<td style=\"text-align:center\">默认是创建时候的标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">创建时间</td>\n<td style=\"text-align:center\">默认是创建时候的时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>tag和categories可以很好地将博客的文章进行分类，设置的方式如下，注意categories具有层级关系，如Cat3和Cat3.1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Tag1</span><br><span class=\"line\">- Tag2</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- Cat1</span><br><span class=\"line\">- Cat2</span><br><span class=\"line\">- [Cat3, Cat3.1]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-source\"><a href=\"#3-2-source\" class=\"headerlink\" title=\"3.2 source\"></a>3.2 source</h2><p>source文件夹是整个博客里面最重要的文件夹，一个博客几乎所有的内容都存储在里面，之前提过，有两个子文件夹<code>_posts</code>和<code>_drafts</code>，当然还会有一些page和用户自定义的数据。<br><code>_posts</code>文件夹存储所有博客中显示的文章，<code>_drafts</code>文件夹存储所有的草稿，如果要将草稿转成文章，可以使用下面的命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish &lt;draft_name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建文章或者草稿非常简单，只需要一条命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &lt;layout, default: post&gt; &lt;article_name&gt;</span><br><span class=\"line\">eg:</span><br><span class=\"line\">$ hexo new draft Hello-World</span><br><span class=\"line\">$ hexo new (post) Hello-World</span><br><span class=\"line\">$ hexo new page About-me</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-3-themes\"><a href=\"#3-3-themes\" class=\"headerlink\" title=\"3.3 themes\"></a>3.3 themes</h2><p>hexo博客在初始化的时候默认是用landscape主题，当然我们可以自己去下载另外的一些主题(<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a> )。切换主题只需要将<code>_config.yml</code>文件里面的<code>theme</code>改成对应的主题名字即可。<br>当然，我们也可以DIY自己的主题，主题无非就是一些模板的CSS和HTML文件，还有一些脚本文件，定义了不同的地方需要如何去解析。而每一个的主题都会有自己的<code>_config.yml</code>，注意和全局的<code>_config.yml</code>区分，前者是定义主题里面的configuration，后者是定义整个博客。</p>\n<h2 id=\"3-4-config-yml\"><a href=\"#3-4-config-yml\" class=\"headerlink\" title=\"3.4 config.yml\"></a>3.4 config.yml</h2><p>config文件定义整个博客的设置，如网站的title，author，还有目录设置，文章写作的设置，这里特别说一个设置<code>post_asset_folder</code>，asset_folder是指一篇文章的数据，如图片，如果设置为true，在创建一篇post的时候，不仅仅创建一个文章的markdown，还创建一个对应的文件夹。还有一个设置是<code>render_draft</code>，默认是设置为false的，因为草稿不会显示在网页上，但如果设置为true，那么草稿也会显示出来。<br><br></p>\n<h1 id=\"4-Tag-Plugin\"><a href=\"#4-Tag-Plugin\" class=\"headerlink\" title=\"4. Tag Plugin\"></a>4. Tag Plugin</h1><p>hexo博客的文章都是以markdown的形式来保存，markdown的强大使得文章写作变得简单，但hexo的tag plugin使得写文章变得更加的简单，它通过一些特殊的语句来添加特定的内容到文章，如图像、视频等。</p>\n<ol>\n<li><p>引用别人的话block quote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码块code block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>图片，图片的添加有两种方式，一种是以source文件夹为root的相对路径，一种是通过asset_folder。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class=\"line\">eg: &#123;% img /images/xxx.jpg %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">eg: &#123;% asset_img xxx.jpg %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>视频，可以添加YouTube或者Vimeo的视频。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br><span class=\"line\">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用asset_folder的资料，可以给出一个link，或者path。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"5-hexo常见命令\"><a href=\"#5-hexo常见命令\" class=\"headerlink\" title=\"5. hexo常见命令\"></a>5. hexo常见命令</h1><ol>\n<li><p>本地调式，如果想让草稿显示出来，可以加draft；如果想浏览器自动打开网页，可以加open。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server (--draft) (--open)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成静态网站文件，hexo是一个静态的博客系统，会根据文章、主题等生成静态网页的html(不同于动态网站，通过前后端进行数据交互)，执行这条命令，会生成一个public文件夹，这个文件夹就是整个静态网站的文件夹，可以将其部署到服务器上面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate(g)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到远端服务器，详看下一节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy(d)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"6-部署到Github-Pages\"><a href=\"#6-部署到Github-Pages\" class=\"headerlink\" title=\"6. 部署到Github Pages\"></a>6. 部署到Github Pages</h1><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。最重要的是，Github Pages能为用户免费提供服务器，因此部署静态网站就不需要自己搭建服务器和数据库了。<br><img src=\"/2018/08/14/用hexo搭建个人网站/github_pages_homepage.png\" width=\"800\" height=\"400\"></p>\n<ol>\n<li>创建一个项目的仓库，仓库名为username.github.io，每个账号只能有一个仓库来存放个人主页，可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。</li>\n<li><p>配置<code>_config.yml</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:Vincent-Hoo/Vincent-Hoo.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装部署到git的包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到GitHub上，hexo d命令会直接将public文件夹部署到github上对应的仓库，然后github pages会自动根据仓库的改变，部署网页。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"7-nexT主题配置和优化\"><a href=\"#7-nexT主题配置和优化\" class=\"headerlink\" title=\"7. nexT主题配置和优化\"></a>7. nexT主题配置和优化</h1><p>每一个主题都有自己的说明文档，具体看config文件就可以将基本的博客元素配齐，需要优化的可以参考附录的链接。</p>\n<h1 id=\"8-安装MathJax\"><a href=\"#8-安装MathJax\" class=\"headerlink\" title=\"8. 安装MathJax\"></a>8. 安装MathJax</h1><p>在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。<br>可以参考该链接：<a href=\"https://blog.csdn.net/u014630987/article/details/78670258\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014630987/article/details/78670258</a></p>\n<p><br></p>\n<h1 id=\"9-参考资料\"><a href=\"#9-参考资料\" class=\"headerlink\" title=\"9. 参考资料\"></a>9. 参考资料</h1><ol>\n<li><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo主页</a></li>\n<li>一些博客<br> 2.1 <a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br> 2.2 <a href=\"https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/\" target=\"_blank\" rel=\"noopener\">https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/</a><br> 2.3 <a href=\"https://www.cnblogs.com/dushao/p/5999593.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dushao/p/5999593.html</a></li>\n<li><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">hexo主题选择</a></li>\n<li><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"noopener\">统计字数，阅读量等</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">评论系统</a></li>\n<li>视频教学系列<br> 6.1 <a href=\"https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1</a><br> 6.2 <a href=\"https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm</a></li>\n<li>nexT主题优化<br> 7.1 <a href=\"https://youngerli.github.io/2017/12/02/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">基本配置</a><br> 7.2 <a href=\"https://www.jianshu.com/p/3a05351a37dc\" target=\"_blank\" rel=\"noopener\">优化</a></li>\n</ol>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<img src=\"/2018/08/14/用hexo搭建个人网站/header.jpg\" width=\"800\" height=\"400\">\n<p>该文章简述如何使用hexo搭建个人博客</p>","more":"<h1 id=\"1-hexo介绍\"><a href=\"#1-hexo介绍\" class=\"headerlink\" title=\"1. hexo介绍\"></a>1. hexo介绍</h1><p>hexo是基于Git和Node.js的静态网站搭建框架，通过hexo命令可以自动生成静态网站的html和css，然后可以将其部署于服务器，生成个人网站。<br><img src=\"/2018/08/14/用hexo搭建个人网站/hexo_homepage.png\" width=\"800\" height=\"400\"><br><br></p>\n<h1 id=\"2-hexo本地安装与运行\"><a href=\"#2-hexo本地安装与运行\" class=\"headerlink\" title=\"2. hexo本地安装与运行\"></a>2. hexo本地安装与运行</h1><ol>\n<li><p>安装Git和Node.js:   由于hexo是基于Git和Node.js的，所以在安装hexo之前，需要先安装<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>和<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>.</p>\n</li>\n<li><p>安装hexo：输入下面这条语句，就会自动地安装hexo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化blog： 输入下面这些语句，hexo会自动从网上拷贝所需要的dependency和package，生成一个project，存储在<code>Vincent-Hoo.github.io</code>这个文件夹里面，<code>Vincent-Hoo.github.io</code>是博客的名字，可以取其它的名字，但是由于我之后要部署到Github上，所以就取这个名字。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init Vincent-Hoo.github.io</span><br><span class=\"line\">$ cd Vincent-Hoo.github.io</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地运行blog：输入以下的命令，hexo会自动生成一个静态网站在<a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000。</a></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p> 当目前为止，hexo已经为我们搭建好了一个个人的博客，里面有最基本的功能，如博客发表，搜索，导航，分享等。<code>Hello World</code>是hexo初始化时候自动生成的第一篇博客。</p>\n <img src=\"/2018/08/14/用hexo搭建个人网站/hexo网站初始化的样子.png\">\n<p> <br></p>\n</li>\n</ol>\n<h1 id=\"3-hexo框架的基本结构\"><a href=\"#3-hexo框架的基本结构\" class=\"headerlink\" title=\"3. hexo框架的基本结构\"></a>3. hexo框架的基本结构</h1><p>在你的hexo project初始化完之后，project文件夹的目录结构如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|----- node_modules</span><br><span class=\"line\">|----- scaffolds</span><br><span class=\"line\">|----- source</span><br><span class=\"line\">|      |----- _posts</span><br><span class=\"line\">|      |----- _drafts</span><br><span class=\"line\">|----- themes</span><br><span class=\"line\">|----- _config.yml</span><br><span class=\"line\">|----- db.json</span><br><span class=\"line\">|----- package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-1-scaffolds\"><a href=\"#3-1-scaffolds\" class=\"headerlink\" title=\"3.1 scaffolds\"></a>3.1 scaffolds</h2><p>首先，hexo支持三种layout</p>\n<ul>\n<li>post：对应source文件夹的<code>_posts</code>，我们所有的文章都放在这个文件夹里面。</li>\n<li>draft：顾名思义，草稿，对应<code>source</code>文件夹的<code>_drafts</code>，draft一般而言都不会显示在博客上，如果要让draft显示，可以修改<code>_config.yml</code>文件的<code>render_draft</code>，将其设置为true（默认为false）。</li>\n<li>page：一个博客不单止有文章，还会有网页，如个人介绍，个人简历。page也是保存在<code>source</code>文件夹里面。</li>\n</ul>\n<p>而scaffolds里面有三个文件，<code>post.md</code>, <code>draft.md</code>, <code>page.md</code>。当我们新建一个layout的时候，hexo就会根据我们新建的layout类型，选择相应的markdown文件进行初始化，所以这三个文件相当于是模板，下面以<code>post.md</code>作为例子，顺便讲一下什么是front-matter。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>模板最前面的key-value pair就是front-matter，下面列举了一些常见的front-matter</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">front-matter</th>\n<th style=\"text-align:center\">description</th>\n<th style=\"text-align:center\">default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">post, draft, page三者之一</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">categories</td>\n<td style=\"text-align:center\">类别</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">文章标题</td>\n<td style=\"text-align:center\">默认是创建时候的标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">创建时间</td>\n<td style=\"text-align:center\">默认是创建时候的时间</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>tag和categories可以很好地将博客的文章进行分类，设置的方式如下，注意categories具有层级关系，如Cat3和Cat3.1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hello World</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Tag1</span><br><span class=\"line\">- Tag2</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- Cat1</span><br><span class=\"line\">- Cat2</span><br><span class=\"line\">- [Cat3, Cat3.1]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-source\"><a href=\"#3-2-source\" class=\"headerlink\" title=\"3.2 source\"></a>3.2 source</h2><p>source文件夹是整个博客里面最重要的文件夹，一个博客几乎所有的内容都存储在里面，之前提过，有两个子文件夹<code>_posts</code>和<code>_drafts</code>，当然还会有一些page和用户自定义的数据。<br><code>_posts</code>文件夹存储所有博客中显示的文章，<code>_drafts</code>文件夹存储所有的草稿，如果要将草稿转成文章，可以使用下面的命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish &lt;draft_name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建文章或者草稿非常简单，只需要一条命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &lt;layout, default: post&gt; &lt;article_name&gt;</span><br><span class=\"line\">eg:</span><br><span class=\"line\">$ hexo new draft Hello-World</span><br><span class=\"line\">$ hexo new (post) Hello-World</span><br><span class=\"line\">$ hexo new page About-me</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-3-themes\"><a href=\"#3-3-themes\" class=\"headerlink\" title=\"3.3 themes\"></a>3.3 themes</h2><p>hexo博客在初始化的时候默认是用landscape主题，当然我们可以自己去下载另外的一些主题(<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/</a> )。切换主题只需要将<code>_config.yml</code>文件里面的<code>theme</code>改成对应的主题名字即可。<br>当然，我们也可以DIY自己的主题，主题无非就是一些模板的CSS和HTML文件，还有一些脚本文件，定义了不同的地方需要如何去解析。而每一个的主题都会有自己的<code>_config.yml</code>，注意和全局的<code>_config.yml</code>区分，前者是定义主题里面的configuration，后者是定义整个博客。</p>\n<h2 id=\"3-4-config-yml\"><a href=\"#3-4-config-yml\" class=\"headerlink\" title=\"3.4 config.yml\"></a>3.4 config.yml</h2><p>config文件定义整个博客的设置，如网站的title，author，还有目录设置，文章写作的设置，这里特别说一个设置<code>post_asset_folder</code>，asset_folder是指一篇文章的数据，如图片，如果设置为true，在创建一篇post的时候，不仅仅创建一个文章的markdown，还创建一个对应的文件夹。还有一个设置是<code>render_draft</code>，默认是设置为false的，因为草稿不会显示在网页上，但如果设置为true，那么草稿也会显示出来。<br><br></p>\n<h1 id=\"4-Tag-Plugin\"><a href=\"#4-Tag-Plugin\" class=\"headerlink\" title=\"4. Tag Plugin\"></a>4. Tag Plugin</h1><p>hexo博客的文章都是以markdown的形式来保存，markdown的强大使得文章写作变得简单，但hexo的tag plugin使得写文章变得更加的简单，它通过一些特殊的语句来添加特定的内容到文章，如图像、视频等。</p>\n<ol>\n<li><p>引用别人的话block quote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代码块code block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class=\"line\">code snippet</span><br><span class=\"line\">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>图片，图片的添加有两种方式，一种是以source文件夹为root的相对路径，一种是通过asset_folder。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class=\"line\">eg: &#123;% img /images/xxx.jpg %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">eg: &#123;% asset_img xxx.jpg %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>视频，可以添加YouTube或者Vimeo的视频。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br><span class=\"line\">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引用asset_folder的资料，可以给出一个link，或者path。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"5-hexo常见命令\"><a href=\"#5-hexo常见命令\" class=\"headerlink\" title=\"5. hexo常见命令\"></a>5. hexo常见命令</h1><ol>\n<li><p>本地调式，如果想让草稿显示出来，可以加draft；如果想浏览器自动打开网页，可以加open。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server (--draft) (--open)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成静态网站文件，hexo是一个静态的博客系统，会根据文章、主题等生成静态网页的html(不同于动态网站，通过前后端进行数据交互)，执行这条命令，会生成一个public文件夹，这个文件夹就是整个静态网站的文件夹，可以将其部署到服务器上面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate(g)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到远端服务器，详看下一节。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy(d)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"6-部署到Github-Pages\"><a href=\"#6-部署到Github-Pages\" class=\"headerlink\" title=\"6. 部署到Github Pages\"></a>6. 部署到Github Pages</h1><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。最重要的是，Github Pages能为用户免费提供服务器，因此部署静态网站就不需要自己搭建服务器和数据库了。<br><img src=\"/2018/08/14/用hexo搭建个人网站/github_pages_homepage.png\" width=\"800\" height=\"400\"></p>\n<ol>\n<li>创建一个项目的仓库，仓库名为username.github.io，每个账号只能有一个仓库来存放个人主页，可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。</li>\n<li><p>配置<code>_config.yml</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:Vincent-Hoo/Vincent-Hoo.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装部署到git的包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到GitHub上，hexo d命令会直接将public文件夹部署到github上对应的仓库，然后github pages会自动根据仓库的改变，部署网页。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><br></p>\n<h1 id=\"7-nexT主题配置和优化\"><a href=\"#7-nexT主题配置和优化\" class=\"headerlink\" title=\"7. nexT主题配置和优化\"></a>7. nexT主题配置和优化</h1><p>每一个主题都有自己的说明文档，具体看config文件就可以将基本的博客元素配齐，需要优化的可以参考附录的链接。</p>\n<h1 id=\"8-安装MathJax\"><a href=\"#8-安装MathJax\" class=\"headerlink\" title=\"8. 安装MathJax\"></a>8. 安装MathJax</h1><p>在 hexo 中，你会发现我们不能用 Latex 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。<br>可以参考该链接：<a href=\"https://blog.csdn.net/u014630987/article/details/78670258\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014630987/article/details/78670258</a></p>\n<p><br></p>\n<h1 id=\"9-参考资料\"><a href=\"#9-参考资料\" class=\"headerlink\" title=\"9. 参考资料\"></a>9. 参考资料</h1><ol>\n<li><a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">hexo主页</a></li>\n<li>一些博客<br> 2.1 <a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a><br> 2.2 <a href=\"https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/\" target=\"_blank\" rel=\"noopener\">https://www.cgmartin.com/2016/01/03/getting-started-with-hexo-blog/</a><br> 2.3 <a href=\"https://www.cnblogs.com/dushao/p/5999593.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dushao/p/5999593.html</a></li>\n<li><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">hexo主题选择</a></li>\n<li><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"noopener\">统计字数，阅读量等</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">评论系统</a></li>\n<li>视频教学系列<br> 6.1 <a href=\"https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Ud1xAhu7t2Y&amp;list=PLXbU-2B80FvDjD_RiuNwsSQ4eF8pkwAIa&amp;index=1</a><br> 6.2 <a href=\"https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=Kt7u5kr_P5o&amp;list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm</a></li>\n<li>nexT主题优化<br> 7.1 <a href=\"https://youngerli.github.io/2017/12/02/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/\" target=\"_blank\" rel=\"noopener\">基本配置</a><br> 7.2 <a href=\"https://www.jianshu.com/p/3a05351a37dc\" target=\"_blank\" rel=\"noopener\">优化</a></li>\n</ol>\n<p><br></p>"}],"PostAsset":[{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二维正态.png","slug":"二维正态.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/Git常用命令/git-cheatsheet.pdf","slug":"git-cheatsheet.pdf","post":"cjn2m7gky000bakw203xq50i1","modified":0,"renderable":0},{"_id":"source/_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛/header.png","slug":"header.png","post":"cjn2m7gl1000dakw2x8uy8cvp","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——事件与概率/condition_proba.png","slug":"condition_proba.png","post":"cjn2m7gbw0001akw2jm22tqjd","modified":0,"renderable":0},{"_id":"source/_posts/Git常用命令/header.jpg","slug":"header.jpg","post":"cjn2m7gky000bakw203xq50i1","modified":0,"renderable":0},{"_id":"source/_posts/【数据挖掘比赛】————达观杯文本智能处理挑战赛/达观杯十强分享汇总ppt.pdf","slug":"达观杯十强分享汇总ppt.pdf","post":"cjn2m7gl1000dakw2x8uy8cvp","modified":0,"renderable":0},{"_id":"source/_posts/用hexo搭建个人网站/github_pages_homepage.png","slug":"github_pages_homepage.png","post":"cjn2m7gl5000fakw284akskar","modified":0,"renderable":0},{"_id":"source/_posts/用hexo搭建个人网站/header.jpg","slug":"header.jpg","post":"cjn2m7gl5000fakw284akskar","modified":0,"renderable":0},{"_id":"source/_posts/用hexo搭建个人网站/hexo_homepage.png","slug":"hexo_homepage.png","post":"cjn2m7gl5000fakw284akskar","modified":0,"renderable":0},{"_id":"source/_posts/用hexo搭建个人网站/hexo网站初始化的样子.png","slug":"hexo网站初始化的样子.png","post":"cjn2m7gl5000fakw284akskar","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/branch.png","slug":"branch.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/ff_merge.png","slug":"ff_merge.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/git_four_states.png","slug":"git_four_states.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/git_reset.png","slug":"git_reset.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/git_workflow.png","slug":"git_workflow.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/header.jpg","slug":"header.jpg","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/pr.jpg","slug":"pr.jpg","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/pull.png","slug":"pull.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/push.png","slug":"push.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/Getting-Started-with-Git/stash.png","slug":"stash.png","post":"cjn2m7g920000akw28lq36428","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/F分布.png","slug":"F分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/t分布.png","slug":"t分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/t分布alpha.png","slug":"t分布alpha.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二维随机变量.png","slug":"二维随机变量.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/二项分布.png","slug":"二项分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/分布函数.png","slug":"分布函数.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/卡方分布.png","slug":"卡方分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/卡方分布alpha.png","slug":"卡方分布alpha.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/指数分布.png","slug":"指数分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/【概率论与数理统计】——随机变量及其分布/泊松分布.png","slug":"泊松分布.png","post":"cjn2m7gcd0003akw2sndeiqfs","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/上海展览中心.png","slug":"上海展览中心.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/上海财经大学.png","slug":"上海财经大学.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/东门.png","slug":"东门.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/二校门.png","slug":"二校门.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/凯旋门.png","slug":"凯旋门.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/圆明园大水法.png","slug":"圆明园大水法.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/圆明园迷宫.png","slug":"圆明园迷宫.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/庙门.png","slug":"庙门.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/水木清华.png","slug":"水木清华.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/田子坊.png","slug":"田子坊.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/颐和园一隅.png","slug":"颐和园一隅.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/颐和园佛香阁.png","slug":"颐和园佛香阁.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0},{"_id":"source/_posts/北京上海那些事/颐和园石舫.png","slug":"颐和园石舫.png","post":"cjn2m7gku0009akw28m1lwmmr","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjn2m7g920000akw28lq36428","category_id":"cjn2m7gcb0002akw2qsl6917a","_id":"cjn2m7gch0007akw2pmmgeu3q"},{"post_id":"cjn2m7gky000bakw203xq50i1","category_id":"cjn2m7gcb0002akw2qsl6917a","_id":"cjn2m7gl6000gakw2f8647vjf"}],"PostTag":[{"post_id":"cjn2m7gbw0001akw2jm22tqjd","tag_id":"cjn2m7gce0004akw243jj5s78","_id":"cjn2m7gcg0006akw2ucywf1a9"},{"post_id":"cjn2m7gcd0003akw2sndeiqfs","tag_id":"cjn2m7gce0004akw243jj5s78","_id":"cjn2m7gch0008akw2oyt9lpv8"},{"post_id":"cjn2m7gl5000fakw284akskar","tag_id":"cjn2m7gl6000hakw2rs4ch1dv","_id":"cjn2m7gl7000iakw2w1olib0b"}],"Tag":[{"name":"概率论","_id":"cjn2m7gce0004akw243jj5s78"},{"name":"hexo","_id":"cjn2m7gl6000hakw2rs4ch1dv"}]}}